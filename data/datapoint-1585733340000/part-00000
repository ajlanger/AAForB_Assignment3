{"title_page": "XPCOM", "text_new": "'''Cross Platform Component Object Model''' ('''XPCOM''') is a deprecated [[cross-platform]] [[Component-based software engineering|component model]] from [[Mozilla]]. It is similar to Microsoft [[Component Object Model]] (COM) and [[Common Object Request Broker Architecture]] (CORBA).<ref>[[IBM System Object Model#Comparison of support for compiled class libraries|Comparison with COM, GObject, SOM, Objective-C, Windows Runtime]]</ref> It features multiple [[language binding]]s and [[interface description language]] (IDL) descriptions; thus programmers can plug their custom functions into the framework and connect it with other components.\n\nThe most prominent usage of XPCOM is within the [[Firefox]] web browser. Many of its internal components interact via XPCOM interfaces. Furthermore, Firefox used to allow [[Add-on (Mozilla)|add-ons]] extensive XPCOM access, but this was removed in Firefox 57 and replaced with the [[Browser extension#API conformity|WebExtensions API]].<ref>[https://www.mozilla.org/en-US/firefox/57.0/releasenotes/ Firefox 57 release notes]</ref><ref>{{cite web|title=The Future of Developing Firefox Add-ons|url=https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/|date=2015-08-21|author=Kev Needham|accessdate=2018-04-02|website=blog.mozilla.org}}</ref> (Three [[Fork (software development)|forks]] of Firefox still support the legacy add-on capability: [[Pale Moon (web browser)|Pale Moon]],<ref>{{cite web|url=https://www.palemoon.org/roadmap.shtml |title=Pale Moon future roadmap | accessdate=2018-04-02 |publisher=[[Pale Moon (web browser)|Pale Moon]]}}</ref> [[Basilisk (web browser)|Basilisk]],<ref>{{cite web|title=Pale Moon team releases first version of Basilisk browser|url=https://www.ghacks.net/2017/11/17/pale-moon-team-releases-first-version-of-basilisk-browser/|website=ghacks.net|date=2017-11-17|accessdate=2018-04-02}}</ref> [[Waterfox]].<ref>{{cite web|title=Waterfox, Its Legacy and Looking to the Future|url=https://blog.waterfoxproject.org/waterfox-its-legacy-and-looking-to-the-future|website=Waterfox blog|date=2018-04-28|accessdate=2018-06-20}}</ref>)\n\n==The model==\nXPCOM is one of the main things making the [[Mozilla]] application environment an actual framework. It is a development environment that provides the following features for the cross-platform software developer:\n\n* Component management\n* File abstraction\n* [[Message passing|Object message passing]]\n* [[Memory management]]\n\nThis component object model makes virtually all of the functionality of [[Gecko (layout engine)|Gecko]] available as a series of components, or reusable cross-platform [[software library|libraries]], that can be accessed from the [[web browser]] or scripted from any Mozilla application. Applications that must access the various Mozilla XPCOM libraries ([[Computer network|networking]], [[Computer security|security]], [[Document Object Model|DOM]], etc.) use a special layer of XPCOM called [[XPConnect]], which [[Reflection (computer programming)|reflects]] the library interfaces into [[JavaScript]], or other languages. XPConnect glues the front end to the [[C++]] or [[C (programming language)|C]] programming language based components in XPCOM, and it can be extended to include scripting support for other languages: PyXPCOM<ref>[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_bindings/PyXPCOM PyXPCOM]</ref> already offers support for [[Python (programming language)|Python]]. PerlConnect and plXPCOM<ref>[http://plxpcom.mozdev.org/ Perl XPCOM project]</ref> provide support for [[Perl]], and there are efforts underway to add [[Common Language Infrastructure]] (CLI) and [[Ruby (programming language)|Ruby]] language support for XPConnect.\n\nFor developers, XPCOM allows writing components in [[C++]], [[C (programming language)|C]], [[JavaScript]], [[Python (programming language)|Python]], or other languages for which special bindings have been created, and compile and run those components on dozens of different platforms, including these and others where Mozilla is supported.\n\nThe flexibility to reuse the XPCOM components from the Gecko library and develop new components that run on different platforms facilitates [[rapid application development]] and results in an application that is more productive and easier to maintain. The networking library, for example, is a set of XPCOM components that can be accessed and used by any Mozilla application. File I/O, security, password management, and profiles are also separate XPCOM components that programmers can use in their own application development.\n\n==Past overuse==\nXPCOM adds a lot of code for [[Marshalling (computer science)|marshalling]] objects, and in the [[Netscape]] era XPCOM was overused for internal interfaces where it wasn't truly necessary, resulting in [[software bloat]].<ref>{{cite web |url = https://arstechnica.com/information-technology/2004/06/collins-interview/2/ |title = Ars Technica sits down with Scott Collins from Mozilla.org |author = Jorge O. Castro |publisher = Ars Technica |date = 2004-06-15 |accessdate=2017-02-16}}</ref> This was a key reason why in 2001 [[Apple Inc.|Apple]] forked [[KHTML]], not Gecko, to create the [[WebKit]] [[browser engine|engine]] for its [[Safari (web browser)|Safari]] browser.<ref>{{cite web|url=http://news.cnet.com/2100-1023-980492.html |archiveurl=https://web.archive.org/web/20121025015655/http://news.cnet.com/2100-1023-980492.html |title=Apple snub stings Mozilla |author=Paul Festa |publisher=[[CNET Networks]] |date=2003-01-14 |archivedate=2012-10-25 |accessdate=2017-02-16 |authorlink=Paul Festa |url-status=dead }}</ref>\n\nMozilla has since cleaned up some of the XPCOM bloat.<ref>{{cite web | url= https://wiki.mozilla.org/Gecko:DeCOMtamination | title= Gecko:DeCOMtamination}}</ref> By 2008, this combined with other efforts resulted in big performance improvements for [[Gecko (software)|Gecko]].<ref>{{cite web |url =https://arstechnica.com/information-technology/2008/09/mozilla-committed-to-gecko/ |author = Ryan Paul |title = Why Mozilla is committed to Gecko as WebKit popularity grows |date = 2008-09-09 |accessdate=2017-02-16}}</ref>\n<!--Note: this section is NOT about add-on support, it's about core browser functionality. So don't add Firefox 57 or similar info here; that's already sufficiently covered in the lede.-->\n\n==References==\n{{Reflist}}\n\n==External links==\n*[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference XPCOM API Reference]\n*[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM XPCOM Project Homepage]\n*[http://books.mozdev.org/html/mozilla-chp-8.html A slightly out-of-date but still useful book that talks about XPCOM]\n*[http://www.codeproject.com/Articles/87465/A-Simple-XPCOM-Tutorial A Simple XPCOM Tutorial]\n{{Mozilla projects}}\n\n{{DEFAULTSORT:Xpcom}}\n[[Category:Application programming interfaces]]\n[[Category:Mozilla]]\n", "text_old": "'''Cross Platform Component Object Model''' ('''XPCOM''') is a [[cross-platform]] [[Component-based software engineering|component model]] from [[Mozilla]]. It is similar to Microsoft [[Component Object Model]] (COM) and [[Common Object Request Broker Architecture]] (CORBA).<ref>[[IBM System Object Model#Comparison of support for compiled class libraries|Comparison with COM, GObject, SOM, Objective-C, Windows Runtime]]</ref> It features multiple [[language binding]]s and [[interface description language]] (IDL) descriptions; thus programmers can plug their custom functions into the framework and connect it with other components.\n\nThe most prominent usage of XPCOM is within the [[Firefox]] web browser. Many of its internal components interact via XPCOM interfaces. Furthermore, Firefox used to allow [[Add-on (Mozilla)|add-ons]] extensive XPCOM access, but this was removed in Firefox 57 and replaced with the less-permissive [[Browser extension#API conformity|WebExtensions API]].<ref>[https://www.mozilla.org/en-US/firefox/57.0/releasenotes/ Firefox 57 release notes]</ref><ref>{{cite web|title=The Future of Developing Firefox Add-ons|url=https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/|date=2015-08-21|author=Kev Needham|accessdate=2018-04-02|website=blog.mozilla.org}}</ref> (Three [[Fork (software development)|forks]] of Firefox still support the legacy add-on capability: [[Pale Moon (web browser)|Pale Moon]],<ref>{{cite web|url=https://www.palemoon.org/roadmap.shtml |title=Pale Moon future roadmap | accessdate=2018-04-02 |publisher=[[Pale Moon (web browser)|Pale Moon]]}}</ref> [[Basilisk (web browser)|Basilisk]],<ref>{{cite web|title=Pale Moon team releases first version of Basilisk browser|url=https://www.ghacks.net/2017/11/17/pale-moon-team-releases-first-version-of-basilisk-browser/|website=ghacks.net|date=2017-11-17|accessdate=2018-04-02}}</ref> [[Waterfox]].<ref>{{cite web|title=Waterfox, Its Legacy and Looking to the Future|url=https://blog.waterfoxproject.org/waterfox-its-legacy-and-looking-to-the-future|website=Waterfox blog|date=2018-04-28|accessdate=2018-06-20}}</ref>)\n\n==The model==\nXPCOM is one of the main things making the [[Mozilla]] application environment an actual framework. It is a development environment that provides the following features for the cross-platform software developer:\n\n* Component management\n* File abstraction\n* [[Message passing|Object message passing]]\n* [[Memory management]]\n\nThis component object model makes virtually all of the functionality of [[Gecko (layout engine)|Gecko]] available as a series of components, or reusable cross-platform [[software library|libraries]], that can be accessed from the [[web browser]] or scripted from any Mozilla application. Applications that must access the various Mozilla XPCOM libraries ([[Computer network|networking]], [[Computer security|security]], [[Document Object Model|DOM]], etc.) use a special layer of XPCOM called [[XPConnect]], which [[Reflection (computer programming)|reflects]] the library interfaces into [[JavaScript]], or other languages. XPConnect glues the front end to the [[C++]] or [[C (programming language)|C]] programming language based components in XPCOM, and it can be extended to include scripting support for other languages: PyXPCOM<ref>[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_bindings/PyXPCOM PyXPCOM]</ref> already offers support for [[Python (programming language)|Python]]. PerlConnect and plXPCOM<ref>[http://plxpcom.mozdev.org/ Perl XPCOM project]</ref> provide support for [[Perl]], and there are efforts underway to add [[Common Language Infrastructure]] (CLI) and [[Ruby (programming language)|Ruby]] language support for XPConnect.\n\nFor developers, XPCOM allows writing components in [[C++]], [[C (programming language)|C]], [[JavaScript]], [[Python (programming language)|Python]], or other languages for which special bindings have been created, and compile and run those components on dozens of different platforms, including these and others where Mozilla is supported.\n\nThe flexibility to reuse the XPCOM components from the Gecko library and develop new components that run on different platforms facilitates [[rapid application development]] and results in an application that is more productive and easier to maintain. The networking library, for example, is a set of XPCOM components that can be accessed and used by any Mozilla application. File I/O, security, password management, and profiles are also separate XPCOM components that programmers can use in their own application development.\n\n==Past overuse==\nXPCOM adds a lot of code for [[Marshalling (computer science)|marshalling]] objects, and in the [[Netscape]] era XPCOM was overused for internal interfaces where it wasn't truly necessary, resulting in [[software bloat]].<ref>{{cite web |url = https://arstechnica.com/information-technology/2004/06/collins-interview/2/ |title = Ars Technica sits down with Scott Collins from Mozilla.org |author = Jorge O. Castro |publisher = Ars Technica |date = 2004-06-15 |accessdate=2017-02-16}}</ref> This was a key reason why in 2001 [[Apple Inc.|Apple]] forked [[KHTML]], not Gecko, to create the [[WebKit]] [[browser engine|engine]] for its [[Safari (web browser)|Safari]] browser.<ref>{{cite web|url=http://news.cnet.com/2100-1023-980492.html |archiveurl=https://web.archive.org/web/20121025015655/http://news.cnet.com/2100-1023-980492.html |title=Apple snub stings Mozilla |author=Paul Festa |publisher=[[CNET Networks]] |date=2003-01-14 |archivedate=2012-10-25 |accessdate=2017-02-16 |authorlink=Paul Festa |url-status=dead }}</ref>\n\nMozilla has since cleaned up some of the XPCOM bloat.<ref>{{cite web | url= https://wiki.mozilla.org/Gecko:DeCOMtamination | title= Gecko:DeCOMtamination}}</ref> By 2008, this combined with other efforts resulted in big performance improvements for [[Gecko (software)|Gecko]].<ref>{{cite web |url =https://arstechnica.com/information-technology/2008/09/mozilla-committed-to-gecko/ |author = Ryan Paul |title = Why Mozilla is committed to Gecko as WebKit popularity grows |date = 2008-09-09 |accessdate=2017-02-16}}</ref>\n<!--Note: this section is NOT about add-on support, it's about core browser functionality. So don't add Firefox 57 or similar info here; that's already sufficiently covered in the lede.-->\n\n==References==\n{{Reflist}}\n\n==External links==\n*[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference XPCOM API Reference]\n*[https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM XPCOM Project Homepage]\n*[http://books.mozdev.org/html/mozilla-chp-8.html A slightly out-of-date but still useful book that talks about XPCOM]\n*[http://www.codeproject.com/Articles/87465/A-Simple-XPCOM-Tutorial A Simple XPCOM Tutorial]\n{{Mozilla projects}}\n\n{{DEFAULTSORT:Xpcom}}\n[[Category:Application programming interfaces]]\n[[Category:Mozilla]]\n", "name_user": "Shenlebantongying", "label": "safe", "comment": "Deprecation & neuarility", "url_page": "//en.wikipedia.org/wiki/XPCOM"}
