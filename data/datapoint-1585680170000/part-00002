{"title_page": "X.509", "text_new": "{{Infobox technology standard\n| title             = X.509\n| long_name         = Information technology - Open Systems Interconnection - The Directory: Public-key and attribute certificate frameworks  \n| image             = \n| caption           = \n| status            = In force\n| year_started      = 1988\n| version           = (10/16)\n| version_date      = October 2016\n| preview           = \n| preview_date      = \n| organization      = [[ITU-T]]\n| committee         = Study Group 17\n| base_standards    = [[ASN.1]]\n| related_standards = [[X.500]]\n| abbreviation      = \n| domain            = [[cryptography]]\n| license           = \n| website           = https://www.itu.int/rec/T-REC-X.509\n}}\n\nIn [[cryptography]], '''X.509''' is a standard defining the format of [[public key certificate]]s.<ref>{{Cite webtitle=X.509\u00a0:\u00a0Information technology - Open Systems Interconnection - The Directory: Public-key and attribute certificate frameworks|website=www.itu.int|access-date=2019-11-06}}</ref> X.509 certificates are used in many Internet protocols, including [[Transport Layer Security|TLS/SSL]], which is the basis for HTTPS<ref name=\":0\" />, the secure protocol for a hostname, or an organization, or an individual), and is either signed by a [[certificate authority]] or self-signed. When a certificate is signed by a trusted certificate authority, or validated by other means, someone holding that certificate can rely on the public key it contains to establish secure communications with another party, or validate documents [[Digital signature|digitally signed]] by the corresponding [[private key]].\n\nX.509 also defines [[certificate revocation list]]s, which are a means to distribute information about certificates that haveommunications Union's]] Standardization sector ([[ITU-T]]), and is based on [[Abstract Syntax Notation One|ASN.1]], another ITU-T standard.\n\n==History and usage==\nX.509 was initially issued on July 3, 1988 and was begun in association with the [[X.500]] standard.  It assumes a strict hierarchical system of [[certificate authority|certificate authorities]] (CAs) for issuing the certificates. This contrasts with [[web of trust]] models, like [[Pretty Good Privacy|PGP]], where anyone (not just special CAs) may sign and thus attest to the validity of others' key certificates. Version 3 of X.509 includes the flexibility to support other topologies like [[network bridge|bridges]] and [[Mesh network|meshes]].<ref name=\":0\">RFC 4158</ref>  It can be used in a peer-to-peer, [[OpenPGP]]-like web of trust,{{citation needed|date=March 2011}} but was rarely used that way as of 2004. The X.500 system has only been implemented by sovereign nations for state identity information sharing treaty fulfillment purposes, and the [[IETF]]'s Public-Key Infrastructure (X.509), or PKIX, working group has adapted the standard to the more flexible organization of the Internet. In fact, the term ''X.509 certificate'' usually refers to the IETF's PKIX certificate and [[revocation list|CRL]] Profile of the X.509 v3 certificate standard, as specified in RFC 5280, commonly called PKIX for ''Public Key Infrastructure (X.509)''.{{citation needed|date=January 2012}}\n\n==Certificates==\nIn the X.509 system, an organization that wants a signed certificate requests one via a [[certificate signing request]] (CSR).\n\nTo do this, it first generates a [[key pair]], keeping the [[Private-key cryptography|private key]] secret and using it to sign the CSR. This contains information identifying the applicant and the applicant's [[public-key cryptography|public key]] that is used to verify the signature of the CSR - and the [[Distinguished Name]] (DN) that the certificate is for. The CSR may be accompanied by other credentials or proofs of identity required by the certificate authority.\n\nThe [[certification authority]] issues a certificate binding a public key to a particular [[Distinguished Name#Directory structure|distinguished name]].\n\nAn organization's trusted [[root certificate]]s can be distributed to all employees so that they can use the company PKI system.{{citation needed|date=March 2016}} Browsers such as [[Internet Explorer]], [[Firefox]], [[Opera (web browser)|Opera]], [[Safari (web browser)|Safari]] and [[Google Chrome|Chrome]] come with a predetermined set of root certificates pre-installed, so [[Secure Sockets Layer|SSL]] certificates from major certificate authorities will work instantly; in effect the browsers' developers determine which CAs are trusted third parties for the browsers' users.{{Citation needed|date=January 2012}} For example, Firefox provides a CSV and/or HTML file containing a list of Included CAs.<ref>{{Cite web|url=https://wiki.mozilla.org/CA:IncludedCAs|title=CA:IncludedCAs - MozillaWiki|website=wiki.mozilla.org|access-date=2017-01-17}}</ref>\n\nX.509 and RFC 5280 also include standards for certificate [[revocation list]] (CRL) implementations. Another [[IETF]]-approved way of checking a certificate's validity is the [[Online Certificate Status Protocol]] (OCSP). Firefox 3 enables OCSP checking by default, as do versions of Windows from at least Vista and later.<ref>{{cite web |url=https://bugzilla.mozilla.org/show_bug.cgi?id=110161 | title=Bug 110161 - (ocspdefault) enable OCSP by default |accessdate=2016-03-17}}</ref>\n\n===Structure of a certificate===\nThe structure foreseen by the standards is expressed in a formal language, [[Abstract Syntax Notation One]] (ASN.1).\n\nThe structure of an X.509 v3 [[digital certificate]] is as follows:\n* Certificate\n**Version Number\n**Serial Number\n**Signature Algorithm ID\n**Issuer Name\n**Validity period\n***Not Before\n***Not After\n**Subject name\n**Subject Public Key Info\n***Public Key Algorithm\n***Subject Public Key\n**Issuer Unique Identifier (optional)\n**Subject Unique Identifier (optional)\n**Extensions (optional)\n*** ...\n*Certificate Signature Algorithm\n*Certificate Signature\n\nEach extension has its own ID, expressed as [[object identifier]], which is a set of values, together with either a critical or non-critical indication.  A certificate-using system must reject the certificate if it encounters a critical extension that it does not recognize, or a critical extension that contains information that it cannot process.  A non-critical extension may be ignored if it is not recognized, but must be processed if it is recognized.<ref>[http://tools.ietf.org/html/rfc5280#section-4.2, RFC 5280 section 4.2, retrieved 12 February 2013]</ref>\n\nThe structure of version 1 is given in <nowiki>RFC 1422</nowiki>.<ref>[http://www.ietf.org/rfc/rfc1422 RFC 1422]</ref>\n\nITU-T introduced issuer and subject unique identifiers in version 2 to permit the reuse of issuer or subject name after some time.  An example of reuse will be when a [[certificate authority|CA]] goes bankrupt and its name is deleted from the country's public list.  After some time another CA with the same name may register itself, even though it is unrelated to the first one. However, [[IETF]] recommends that no issuer and subject names be reused.  Therefore, version 2 is not widely deployed in the Internet.{{citation needed|date=January 2012}}\n\nExtensions were introduced in version 3. A CA can use extensions to issue a certificate only for a specific purpose (e.g. only for [[code signing|signing digital objects]]).\n\nIn all versions, the serial number must be unique for each certificate issued by a specific CA (as mentioned in <nowiki>RFC 5280</nowiki>).\n\n===Extensions informing a specific usage of a certificate===\n<nowiki>RFC 5280</nowiki> (and its predecessors) defines a number of certificate extensions which indicate how the certificate should be used. Most of them are arcs from the <tt>joint-iso-ccitt(2) ds(5) id-ce(29)</tt> OID. Some of the most common, defined in section 4.2.1, are:\n\n* Basic Constraints, <tt>{ id-ce 19 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.9\n    | title =RFC 5280, Section 'Basic Constraints'\n  }}\n</ref> are used to indicate whether the certificate belongs to a CA.\n* Key Usage, <tt>{ id-ce 15 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.3\n    | title ='RFC 5280, Section 'Key Usage'\n  }}\n</ref> provides a bitmap specifying the cryptographic operations which may be performed using the public key contained in the certificate; for example, it could indicate that the key should be used for signatures but not for encipherment.\n* Extended Key Usage, <tt>{ id-ce 37 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.12\n    | title = RFC 5280, Section 'Extended Key Usage'\n  }}\n</ref> is used, typically on a leaf certificate, to indicate the purpose of the public key contained in the certificate. It contains a list of OIDs, each of which indicates an allowed use. For example, <tt>{ id-pkix 3 1  }</tt> indicates that the key may be used on the server end of a TLS or SSL connection; <tt>{ id-pkix 3 4  }</tt> indicates that the key may be used to secure email.\n\nIn general, if a certificate has several extensions restricting its use, all restrictions must be satisfied for a given use to be appropriate. <nowiki>RFC 5280</nowiki> gives the specific example of a certificate containing both keyUsage and extendedKeyUsage: in this case, both must be processed and the certificate can only be used if both extensions are coherent in specifying the usage of a certificate. For example, [[Network Security Services|NSS]] uses both extensions to specify certificate usage.<ref>[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/nss_tech_notes/nss_tech_note3 All About Certificate Extensions]</ref>\n\n===Certificate filename extensions===\nThere are several commonly used filename extensions for X.509 certificates.  Unfortunately, some of these extensions are also used for other data such as private keys.\n\n* <tt>.pem</tt> \u2013 ([[Privacy-enhanced Electronic Mail]]) [[Base64]] encoded [[Distinguished Encoding Rules|DER]] certificate, enclosed between \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\"\n* <tt>.cer</tt>, <tt>.crt</tt>, <tt>.der</tt> \u2013 usually in binary [[Distinguished Encoding Rules|DER]] form, but Base64-encoded certificates are common too (see <tt>.pem</tt> above)\n* <tt>.p7b</tt>, <tt>.p7c</tt> \u2013 [[PKCS7|PKCS#7]] SignedData structure without data, just certificate(s) or [[revocation list|CRL]](s)\n* <tt>.p12</tt> \u2013 [[PKCS12|PKCS#12]], may contain certificate(s) (public) and private keys (password protected)\n* <tt>.pfx</tt> \u2013 PFX, predecessor of PKCS#12 (usually contains data in PKCS#12 format, e.g., with PFX files generated in [[Internet Information Services|IIS]])\n\n[[PKCS7|PKCS#7]] is a standard for signing or encrypting (officially called \"enveloping\") data. Since the certificate is needed to verify signed data, it is possible to include them in the SignedData structure. A <tt>.P7C</tt> file is a degenerated SignedData structure, without any data to sign.{{citation needed|date=January 2012}}\n\n[[PKCS12|PKCS#12]] evolved from the ''personal information exchange'' (PFX) standard and is used to exchange public and private objects in a single file.{{citation needed|date=January 2012}}\n\n==Certificate chains and cross-certification==\nA '''certificate chain''' (see the equivalent concept of \"certification path\" defined by RFC 5280)<ref name =\"RFC 5280 Certification Path Validation\">{{cite book\n  | title = Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\n  | publisher = Network Working Group\n  | year = 2008\n  | section = Certification Path Validation \n  | url = http://tools.ietf.org/html/rfc5280#page-71\n}}</ref> is a list of certificates (usually starting with an end-entity certificate) followed by one or more [[Certificate authority|CA]] certificates (usually the last one being a self-signed certificate), with the following properties:\n# The Issuer of each certificate (except the last one) matches the Subject of the next certificate in the list.\n# Each certificate (except the last one) is supposed to be signed by the secret key corresponding to the next certificate in the chain (i.e. the signature of one certificate can be verified using the public key contained in the following certificate).\n# The last certificate in the list is a [[trust anchor]]: a certificate that you trust because it was delivered to you by some trustworthy procedure.\n\nCertificate chains are used in order to check that the public key (PK) contained in a target certificate (the first certificate in the chain) and other data contained in it effectively belongs to its subject. In order to ascertain this, the signature on the target certificate is verified by using the PK contained in the following certificate, whose signature is verified using the next certificate, and so on until the last certificate in the chain is reached. As the last certificate is a trust anchor, successfully reaching it will prove that the target certificate can be trusted.\n\nThe description in the preceding paragraph is a simplified view on the [[certification path validation algorithm|certification path validation process]] as defined by RFC 5280,<ref name=\"RFC 5280 Certification Path Validation\"/> which involves additional checks, such as verifying validity dates on certificates, looking up [[revocation list|CRLs]], etc.\n\n[[File:Cross-certification diagram.svg|thumb|350px|right|Example 1: Cross-certification between two PKIs]]\n[[File:CA certificate renewal.png|frame|right|Example 2: CA certificate renewal]]\n\nExamining how certificate chains are built and validated, it is important to note that a concrete certificate can be part of very different certificate chains (all of them valid). This is because several CA certificates can be generated for the same subject and public key, but be signed with different private keys (from different CAs or different private keys from the same CA). So, although a single X.509 certificate can have only one issuer and one CA signature, it can be validly linked to more than one certificate, building completely different certificate chains. This is crucial for cross-certification between PKIs and other applications.<ref name=\"Understanding Certification Path Construction\">\n{{cite book\n  |title=Understanding Certification Path Construction\n  |date=September 2002\n  |publisher=PKI Forum\n  |last=Lloyd\n  |first=Steve\n  |url=http://www.oasis-pki.org/pdfs/Understanding_Path_construction-DS2.pdf\n}}\n</ref>\nSee the following examples.\n\nIn these diagrams:\n* Each box represents a certificate, with its Subject in bold.\n* A \u2192 B means \"A is signed by B\" (or, more precisely, \"A is signed by the secret key corresponding to the public key contained in B\"). \n* Certificates with the same color (that are not white/transparent) contain the same public key.\n\n===Example 1: Cross-certification at root Certification Authority (CA) level between two PKIs===\n\nIn order to manage that user certificates existing in PKI 2 (like \"User 2\") are trusted by PKI 1, CA1 generates a certificate (cert2.1) containing the public key of CA2.<ref>\n{{cite book\n  |title=Qualified Subordination Deployment Scenarios\n  |date=August 2009\n  |publisher=Microsoft\n  |section=Cross-Certification Between Root CAs\n  |url=https://technet.microsoft.com/en-us/library/cc785267(v=ws.10).aspx\n}}\n</ref>\nNow both \"cert2 and cert2.1 (in green) have the same subject and public key, so there are two valid chains for cert2.2 (User 2): \"cert2.2 \u2192 cert2\" and \"cert2.2 \u2192 cert2.1 \u2192 cert1\".\n\nSimilarly, CA2 can generate a certificate (cert1.1) containing the public key of CA1 so that user certificates existing in PKI 1 (like \"User 1\") are trusted by PKI 2.\n\n===Example 2: CA certificate renewal===\n{{cite book\n  |title=Understanding Certification Path Construction\n  |date=September 2002\n  |publisher=PKI Forum\n  |url=http://www.oasis-pki.org/pdfs/Understanding_Path_construction-DS2.pdf \n  |quote=To allow for graceful transition from the old signing key pair to the new signing key pair, the CA should issue a certificate that contains the old public key signed by the new private signing key and a certificate that contains the new public key signed by the old private signing key. Both of these certificates are self-issued, but neither is [[Self-signed certificate|self-signed]]. Note that these are in addition to the two self-signed certificates (one old, one new).\n}}\n\nSince both cert1 and cert3 contain the same public key (the old one), there are two valid certificate chains for cert5: \"cert5 \u2192 cert1\" and \"cert5 \u2192 cert3 \u2192 cert2\", and analogously for cert6. This allows that old user certificates (such as cert5) and new certificates (such as cert6) can be trusted indifferently by a party having either the new root CA certificate or the old one as trust anchor during the transition to the new CA keys.<ref name=\" PKI Implementing and Managing E-Security\">\n{{cite book\n  |title=PKI: Implementing and Managing E-Security\n  |year=2001\n  |publisher=RSA Press - Osborne/McGraw-Hill\n  |last1=Nash\n  |last2=Duane\n  |last3=Joseph\n  |last4=Brink\n  |isbn=0-07-213123-3\n  |section=Key and Certificate Life Cycles. CA Certificate Renewal\n}}\n</ref>\n\n==Sample X.509 certificates==\nThis is an example of a decoded X.509 certificate that was used by wikipedia.org and several other Wikipedia websites. It was issued by [[GlobalSign]], as stated in the Issuer field. Its Subject field describes Wikipedia as an organization, and its Subject Alternative Name field describes the hostnames for which it could be used. The Subject Public Key Info field contains an [[ECDSA]] public key, while the signature at the bottom was generated by GlobalSign's [[RSA (cryptosystem)|RSA]] private key.\n\n=== End-entity certificate ===\n Certificate:\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             10:e6:fc:62:b7:41:8a:d5:00:5e:45:b6\n         Signature Algorithm: sha256WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n         Validity\n             Not Before: Nov 21 08:00:00 2016 GMT\n             Not After : Nov 22 07:59:59 2017 GMT\n         Subject: C=US, ST=California, L=San Francisco, O=Wikimedia Foundation, Inc., CN=*.wikipedia.org\n         Subject Public Key Info:\n             Public Key Algorithm: id-ecPublicKey\n                 Public-Key: (256 bit)\n             pub: \n                     00:c9:22:69:31:8a:d6:6c:ea:da:c3:7f:2c:ac:a5:\n                     af:c0:02:ea:81:cb:65:b9:fd:0c:6d:46:5b:c9:1e:\n                     9d:3b:ef\n                 ASN1 OID: prime256v1\n                 NIST CURVE: P-256\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Digital Signature, Key Agreement\n             Authority Information Access: \n                 CA Issuers - URI:<nowiki>http://secure.globalsign.com/cacert/gsorganizationvalsha2g2r1.crt</nowiki>\n                 OCSP - URI:<nowiki>http://ocsp2.globalsign.com/gsorganizationvalsha2g2</nowiki>\n             X509v3 Certificate Policies: \n                 Policy: 1.3.6.1.4.1.4146.1.20\n                   CPS: <nowiki>https://www.globalsign.com/repository/</nowiki>\n                 Policy: 2.23.140.1.2.2\n             X509v3 Basic Constraints: \n                 CA:FALSE\n             X509v3 CRL Distribution Points: \n                 Full Name:\n                   URI:<nowiki>http://crl.globalsign.com/gs/gsorganizationvalsha2g2.crl</nowiki>\n             X509v3 Subject Alternative Name: \n                 DNS:*.wikipedia.org, DNS:*.m.mediawiki.org, DNS:*.m.wikibooks.org, DNS:*.m.wikidata.org, DNS:*.m.wikimedia.org, DNS:*.m.wikimediafoundation.org, DNS:*.m.wikinews.org, DNS:*.m.wikipedia.org, DNS:*.m.wikiquote.org, DNS:*.m.wikisource.org, DNS:*.m.wikiversity.org, DNS:*.m.wikivoyage.org, DNS:*.m.wiktionary.org, DNS:*.mediawiki.org, DNS:*.planet.wikimedia.org, DNS:*.wikibooks.org, DNS:*.wikidata.org, DNS:*.wikimedia.org, DNS:*.wikimediafoundation.org, DNS:*.wikinews.org, DNS:*.wikiquote.org, DNS:*.wikisource.org, DNS:*.wikiversity.org, DNS:*.wikivoyage.org, DNS:*.wiktionary.org, DNS:*.wmfusercontent.org, DNS:*.zero.wikipedia.org, DNS:mediawiki.org, DNS:w.wiki, DNS:wikibooks.org, DNS:wikidata.org, DNS:wikimedia.org, DNS:wikimediafoundation.org, DNS:wikinews.org, DNS:wikiquote.org, DNS:wikisource.org, DNS:wikiversity.org, DNS:wikivoyage.org, DNS:wiktionary.org, DNS:wmfusercontent.org, DNS:wikipedia.org\n             X509v3 Extended Key Usage: \n                 TLS Web Server Authentication, TLS Web Client Authentication\n             X509v3 Subject Key Identifier: \n                 28:2A:26:2A:57:8B:3B:CE:B4:D6:AB:54:EF:D7:38:21:2C:49:5C:36\n             X509v3 Authority Key Identifier: \n                 keyid:96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n \n     Signature Algorithm: sha256WithRSAEncryption\n          8b:c3:ed:d1:9d:39:6f:af:40:72:bd:1e:18:5e:30:54:23:35:\n          ...\n\nTo validate this end-entity certificate, one needs an intermediate certificate that matches its Issuer and Authority Key Identifier:\n{| class=\"wikitable\"\n|Issuer\n|C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n|-\n|Authority Key Identifier\n|96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n|}\nIn a TLS connection, a properly-configured server would provide the intermediate as part of the handshake. However, it's also possible to retrieve the intermediate certificate by fetching the \"CA Issuers\" URL from the end-entity certificate.\n\n=== Intermediate certificate ===\nThis is an example of an intermediate certificate belonging to a [[certificate authority]]. This certificate signed the end-entity certificate above, and was signed by the root certificate below. Note that the subject field of this intermediate certificate matches the issuer field of the end-entity certificate that it signed. Also, the \"subject key identifier\" field in the intermediate matches the \"authority key identifier\" field in the end-entity certificate.\n Certificate:\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             04:00:00:00:00:01:44:4e:f0:42:47\n         Signature Algorithm: sha256WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Validity\n             Not Before: Feb 20 10:00:00 2014 GMT\n             Not After : Feb 20 10:00:00 2024 GMT\n         Subject: C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n         Subject Public Key Info:\n             Public Key Algorithm: rsaEncryption\n                 Public-Key: (2048 bit)\n                 Modulus:\n                     00:c7:0e:6c:3f:23:93:7f:cc:70:a5:9d:20:c3:0e:\n                     ...\n                 Exponent: 65537 (0x10001)\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Certificate Sign, CRL Sign\n             X509v3 Basic Constraints: critical\n                 CA:TRUE, pathlen:0\n             X509v3 Subject Key Identifier:\n                 96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n             X509v3 Certificate Policies:\n                 Policy: X509v3 Any Policy\n                   CPS: <nowiki>https://www.globalsign.com/repository/</nowiki>\n \n             X509v3 CRL Distribution Points:\n \n                 Full Name:\n                   URI:<nowiki>http://crl.globalsign.net/root.crl</nowiki>\n \n             Authority Information Access:\n                 OCSP - URI:<nowiki>http://ocsp.globalsign.com/rootr1</nowiki>\n \n             X509v3 Authority Key Identifier:\n                 keyid:60:7B:66:1A:45:0D:97:CA:89:50:2F:7D:04:CD:34:A8:FF:FC:FD:4B\n \n     Signature Algorithm: sha256WithRSAEncryption\n          46:2a:ee:5e:bd:ae:01:60:37:31:11:86:71:74:b6:46:49:c8:\n          ...\n\n=== Root certificate ===\nThis is an example of a [[Self-signed certificate|self-signed]] root certificate representing a [[certificate authority]]. Its issuer and subject fields are the same, and its signature can be validated with its own public key. Validation of the trust chain has to end here. If the validating program has this root certificate in its [[Public key certificate#Root programs|trust store]], the end-entity certificate can be considered trusted for use in a TLS connection. Otherwise, the end-entity certificate is considered untrusted.\n Certificate:<ref name=\":1\" />\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             04:00:00:00:00:01:15:4b:5a:c3:94\n         Signature Algorithm: sha1WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Validity\n             Not Before: Sep  1 12:00:00 1998 GMT\n             Not After : Jan 28 12:00:00 2028 GMT\n         Subject: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Subject Public Key Info:\n             Public Key Algorithm: rsaEncryption\n                 Public-Key: (2048 bit)\n                 Modulus:\n                     00:da:0e:e6:99:8d:ce:a3:e3:4f:8a:7e:fb:f1:8b:\n                     ...\n                 Exponent: 65537 (0x10001)\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Certificate Sign, CRL Sign\n             X509v3 Basic Constraints: critical\n                 CA:TRUE\n             X509v3 Subject Key Identifier: \n                 60:7B:66:1A:45:0D:97:CA:89:50:2F:7D:04:CD:34:A8:FF:FC:FD:4B\n     Signature Algorithm: sha1WithRSAEncryption\n          d6:73:e7:7c:4f:76:d0:8d:bf:ec:ba:a2:be:34:c5:28:32:b5:\n          ...\n\n==Security==\nThere are a number of publications about PKI problems by [[Bruce Schneier]], [[Peter Gutmann (computer scientist)|Peter Gutmann]] and other security experts.<ref name=\"schneier\">\n  {{cite web\n    | url = https://www.schneier.com/paper-pki.pdf\n    | title = Top 10 PKI risks\n    | author = Carl Ellison and Bruce Schneier\n    | publisher = Computer Security Journal (Volume XVI, Number 1, 2000)\n  }}\n</ref><ref name=\"pkinotdead\">\n  {{cite web\n    | url = http://www.cs.auckland.ac.nz/~pgut001/pubs/notdead.pdf\n    | title = PKI: it's not dead, just resting\n    | author = Peter Gutmann\n    | publisher = IEEE Computer (Volume:35, Issue: 8)\n  }}\n</ref><ref name=\"gutmann1\">\n  {{cite web\n    |last=Gutmann\n    |first=Peter\n    |title=Everything you Never Wanted to Know about PKI but were Forced to Find Out\n    |url=http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf|accessdate=14 November 2011\n  }}\n</ref>\n\n===Architectural weaknesses===\n*Use of blacklisting invalid certificates (using [[revocation list|CRL]]s and [[Online Certificate Status Protocol|OCSP]]),\n**If the client only trusts certificates when CRLs are available, then they lose the offline capability that makes PKI attractive.  So most clients do trust certificates when CRLs are not available, but in that case an attacker that controls the communication channel can disable the CRLs.  Adam Langley of Google has said soft-fail CRL checks are like a safety belt that works except when you have an accident.<ref>{{cite web|last1=Langley|first1=Adam|title=Revocation checking and Chrome's CRL (05 Feb 2012)|url=https://www.imperialviolet.org/2012/02/05/crlsets.html|website=Imperial Violet|accessdate=2 February 2017}}</ref>\n*CRLs are notably a poor choice because of large sizes and convoluted distribution patterns,\n*Ambiguous OCSP semantics and lack of historical revocation status,\n*Revocation of root certificates is not addressed,\n*'''Aggregation problem''': Identity claims (authenticate with an identifier), attribute claims (submit a bag of vetted attributes), and policy claims are combined in a single container. This raises privacy, policy mapping, and maintenance issues.{{clarify|date=March 2018}}\n*'''Delegation problem''': CAs cannot technically restrict subordinate CAs from issuing certificates outside a limited namespaces or attribute set; this feature of X.509 is not in use. Therefore, a large number of CAs exist on the Internet, and classifying them and their policies is an insurmountable task. Delegation of authority within an organization cannot be handled at all, as in common business practice.\n*'''Federation problem''': Certificate chains that are the result of subordinate CAs, bridge CAs, and cross-signing make validation complex and expensive in terms of processing time. Path validation semantics may be ambiguous. The hierarchy with a third-party trusted party is the only model. This is inconvenient when a bilateral trust relationship is already in place.\n*Issuance of an [[Extended Validation Certificate|Extended Validation (EV) certificate]] for a hostname doesn't prevent issuance of a lower-validation certificate valid for the same hostname, which means that the higher validation level of EV doesn't protect against man-in-the-middle attacks.<ref>[https://www.blackhat.com/presentations/bh-usa-09/SOTIROV/BHUSA09-Sotirov-AttackExtSSL-PAPER.pdf Zusman and Sotirov Blackhat 2009]</ref>\n\n===Problems with certificate authorities===\n* The subject, not the relying party, purchases certificates. The subject will often utilize the cheapest issuer, so quality is not being paid for in the competing market. This is partly addressed by [[Extended Validation]] certificates, yet trust value in the eyes of security experts are diminishing. <ref name=\"troyhuntevcertsdead\">{{cite web|last1=Hunt|first1=Troy|title=Extended Validation Certificates are Dead|url=https://www.troyhunt.com/extended-validation-certificates-are-dead/|website=TroyHunt.com|accessdate=26 February 2019|ref=troyhuntevcertsdead}}</ref>\n* Certification authorities deny almost all warranties to the user (including subject or even relying parties).\n* \"Users use an undefined certification request protocol to obtain a certificate which is published in an unclear location in a nonexistent directory with no real means to revoke it.\"<ref name=\"gutmann1\"/>\n* Like all businesses, CAs are subject to the legal jurisdictions they operate within, and may be legally compelled to compromise the interests of their customers and their users. Intelligence agencies have also made use of false certificates issued through extralegal compromise of CAs, such as [[DigiNotar]], to carry out [[man-in-the-middle attack]]s.{{citation needed|date=May 2014}} Another example is a revocation request of the CA of the Dutch government, because of a new Dutch law becoming active starting January 1, 2018, giving new powers for the Dutch intelligence and security services.<ref name=\"van Pelt\">{{cite web|last1=van Pelt|first1=Cris|title=Logius: Dutch Government CA trust issue|url=https://bugzilla.mozilla.org/show_bug.cgi?id=1408647|website=Bugzilla|accessdate=31 October 2017|ref=vanPelt}}</ref>\n\n===Implementation issues===\nImplementations suffer from design flaws, bugs, different interpretations of standards and lack of interoperability of different standards. Some problems are:{{citation needed|date=January 2012}}\n* Many implementations turn off revocation check:\n** Seen as obstacle, policies are not enforced\n** If it was turned on in all browsers by default, including code signing, it would probably crash the infrastructure{{citation needed|date=April 2015}}\n* DNs are complex and little understood (lack of canonicalization, internationalization problems, ..)\n* rfc822Name has two notations\n* Name and policy constraints hardly supported\n* Key usage ignored, first certificate in a list being used\n* Enforcement of custom OIDs is difficult\n* Attributes should not be made critical because it makes clients crash{{Citation needed|reason=What clients? And define \"crash.\"|date=March 2018}}\n* Unspecified length of attributes lead to product-specific limits\n* There are implementation errors with X.509 that allow e.g. falsified subject names using null-terminated strings<ref>[https://www.blackhat.com/presentations/bh-usa-09/MARLINSPIKE/BHUSA09-Marlinspike-DefeatSSL-SLIDES.pdf Marlinspike Blackhat 2009]</ref> or code injection attacks in certificates.\n* By using illegal<ref>Rec. ITU-T X.690, clause 8.19.2</ref> 0x80 padded subidentifiers of [[object identifier]]s, wrong implementations or by using integer overflows of the client's browsers, an attacker can include an unknown attribute in the CSR, which the CA will sign, which the client wrongly interprets as \"CN\" (OID=2.5.4.3). Dan Kaminsky at the 26th  [[Chaos Communication Congress]] \"Black OPs of PKI\"<ref>{{cite web|url=https://events.ccc.de/congress/2009/Fahrplan/events/3658.en.html|title=26C3: Black Ops Of PKI|date=|publisher=Events.ccc.de|accessdate=2013-09-29}}</ref>\n\n===Cryptographic weaknesses===\nDigital signature systems depend on secure [[cryptographic hash function]]s to work. When a public key infrastructure allows the use of a hash function that is no longer secure, an attacker can exploit weaknesses in the hash function to forge certificates. Specifically, if an attacker is able to produce a [[Collision resistance|hash collision]], they can convince a CA to sign a certificate with innocuous contents, where the hash of those contents is identical to the hash of another, malicious set of certificate contents, created by the attacker with values of their choosing. The attacker can then append the CA-provided signature to their malicious certificate contents, resulting in a malicious certificate that appears to be signed by the CA. Because the malicious certificate contents are chosen solely by the attacker, they can have different validity dates or hostnames than the innocuous certificate. The malicious certificate can even contain a \"CA: true\" field making it able to issue further trusted certificates.\n* MD2-based certificates were used for a long time and were vulnerable to [[preimage attack]]s. Since the root certificate already had a self-signature, attackers could use this signature and use it for an intermediate certificate.\n* In 2005, [[Arjen Lenstra]] and [[Benne de Weger]] demonstrated \"how to use hash collisions to construct two X.509 certificates that contain identical signatures and that differ only in the public keys\", achieved using a [[collision attack]] on the [[MD5]] hash function.<ref name=\"Lenstra & de Weger\">{{cite techreport |first1=Arjen |last1=Lenstra |authorlink1=Arjen Lenstra |first2=Benne |last2=de Weger  |title=On the possibility of constructing meaningful hash collisions for public keys |url=http://www.win.tue.nl/~bdeweger/CollidingCertificates/ddl-full.pdf |accessdate=2013-09-28 |date=2005-05-19 |archiveurl=https://web.archive.org/web/20130514200135/http://www.win.tue.nl/~bdeweger/CollidingCertificates/ddl-full.pdf |archivedate=2013-05-14 |url-status=live |location=Murray Hill, NJ, USA & Eindhoven, The Netherlands |publisher=[[Lucent Technologies]], [[Bell Laboratories]] & [[Technische Universiteit Eindhoven]]}}</ref>\n* In 2008, [[Alexander Sotirov]] and [[Marc Stevens (computer scientist)|Marc Stevens]] presented at the [[Chaos Communication Congress]] a practical attack that allowed them to create a rogue Certificate Authority, accepted by all common browsers, by exploiting the fact that RapidSSL was still issuing X.509 certificates based on MD5.<ref>{{cite web|url=http://www.win.tue.nl/hashclash/rogue-ca/ |title=MD5 considered harmful today |publisher=Win.tue.nl |date= |accessdate=2013-09-29}}</ref>\n* In April 2009 at the Eurocrypt Conference,<ref>[https://www.iacr.org/conferences/eurocrypt2009/ Eurocrypt Conference]</ref> Australian Researchers of Macquarie University presented \"Automatic Differential Path Searching for [[SHA-1]]\".<ref>[http://eurocrypt2009rump.cr.yp.to/837a0a8086fa6ca714249409ddfae43d.pdf \"Automatic Differential Path Searching for SHA-1\"]</ref> The researchers were able to deduce a method which increases the likelihood of a collision by several orders of magnitude.<ref>{{cite web|last1=Litke|first1=Pat|title=SHA-1 Collision Attacks Now 252 |url=https://www.secureworks.com/blog/research-20935|website=SecureWorks|publisher=SecureWorks Insights|accessdate=24 February 2016}}</ref>\n* In February 2017, a group of researchers led by Marc Stevens produced a  SHA-1 collision, demonstrating SHA-1's weakness.<ref>{{Cite web|url=https://shattered.io/static/shattered.pdf|title=The first collision for full SHA-1}}</ref>\n\n==== Mitigations for cryptographic weaknesses ====\nExploiting a hash collision to forge X.509 signatures requires that the attacker be able to predict the data that the certificate authority will sign. This can be somewhat mitigated by the CA generating a random component in the certificates it signs, typically the serial number. The [[CA/Browser Forum]] has required serial number entropy in its Baseline Requirements Section 7.1 since 2011.<ref>{{Cite news|url=https://cabforum.org/baseline-requirements-documents/|title=Baseline Requirements Documents - CAB Forum|work=CAB Forum|access-date=2017-03-19|language=en-US}}</ref>\n\n{{As of|2016|01|01|df=US}}, the Baseline Requirements forbid issuance of certificates using SHA-1. {{As of|2017|alt=As of early 2017}}, Chrome<ref>{{Cite news|url=https://security.googleblog.com/2016/11/sha-1-certificates-in-chrome.html|title=SHA-1 Certificates in Chrome|work=Google Online Security Blog|access-date=2017-03-19|language=en-US}}</ref> and Firefox<ref>{{Cite web|url=https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/|title=The end of SHA-1 on the Public Web|website=Mozilla Security Blog|language=en-US|access-date=2017-03-19}}</ref> reject certificates that use SHA-1. {{As of|2017|05|df=US}} both Edge<ref>{{Cite web|url=https://technet.microsoft.com/en-us/library/security/4010323.aspx|title=Microsoft Security Advisory 4010323|website=technet.microsoft.com|language=en|access-date=2017-05-16}}</ref> and Safari<ref>{{Cite news|url=https://support.apple.com/en-us/HT207459|title=Safari and WebKit do not support SHA-1 certificates|work=Apple Support|access-date=2017-05-16|language=en-US}}</ref> are also rejecting SHA-1 certificate. Non-browser X.509 validators do not yet reject SHA-1 certificates.<ref>{{Cite web|url=https://daniel.haxx.se/blog/2017/01/10/lesser-https-for-non-browsers/|title=Lesser HTTPS for non-browsers {{!}} daniel.haxx.se|website=daniel.haxx.se|language=en-US|access-date=2017-03-19}}</ref>\n\n==PKI standards for X.509==\n* [[PKCS7]] (Cryptographic Message Syntax Standard&nbsp;\u2014 public keys with proof of identity for signed and/or encrypted message for PKI).<ref>{{Cite web|url=https://www.ietf.org/rfc/rfc2315.txt|title=PKCS #7: Cryptographic Message Syntax Version 1.5}}</ref>\n* [[Transport Layer Security]] (TLS) and its predecessor SSL&nbsp;\u2014 cryptographic protocols for Internet secure communications.<ref>{{Cite web|url=https://tools.ietf.org/rfc/rfc5246.txt|title=The Transport Layer Security (TLS) Protocol Version 1.2}}</ref>\n* [[Online Certificate Status Protocol]] (OCSP)<ref>{{Cite web|url=https://tools.ietf.org/html/rfc6960|title=X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP}}</ref> / certificate [[revocation list]] (CRL)<ref>{{Cite web|url=https://tools.ietf.org/html/rfc5280|title=Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile}}</ref>&nbsp;\u2014 this is to check certificate revocation status.\n* [[PKCS12]] (Personal Information Exchange Syntax Standard)&nbsp;\u2014 used to store a private key with the appropriate public key certificate.<ref>{{Cite web|url=https://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs12-personal-information-exchange-syntax-standard.htm|title=RSA Laboratories - PKCS #12: Personal Information Exchange Syntax Standard|website=www.emc.com|access-date=2017-03-19}}</ref>\n\n==PKIX Working Group==\nIn 1995, the [[Internet Engineering Task Force]] in conjunction with the [[National Institute of Standards and Technology]]<ref name=\"PKIX Charter\">{{Cite web|url=https://datatracker.ietf.org/wg/pkix/charter/|title=Public-Key Infrastructure (X.509) (pkix) - Charter|publisher=[[Internet Engineering Task Force]]|location=Fremont, CA, USA|accessdate=2013-10-01|work=datatracker.ietf.org}}0</ref> formed the Public-Key Infrastructure (X.509) working group. The working group, concluded in June 2014,<ref>{{Cite web|url=https://tools.ietf.org/wg/pkix/|title=Pkix Status Pages|website=tools.ietf.org|access-date=2017-03-10}}</ref> is commonly referred to as \"PKIX.\" It produced [[Request for Comments|RFCs]] and other standards documentation on using deploying X.509 in practice. In particular it produced RFC 3280 and its successor RFC 5280, which define how to use X.509 in Internet protocols.\n\n==Major protocols and standards using X.509 certificates==\n[[Transport Layer Security|TLS/SSL]] and [[HTTPS]] use the RFC 5280 profile of X.509, as do [[S/MIME]] (Secure Multipurpose Internet Mail Extensions) and the [[EAP-TLS#EAP Transport Layer Security .28EAP-TLS.29|EAP-TLS]] method for WiFi authentication. Any protocol that uses TLS, such as SMTP, POP, IMAP, LDAP, XMPP, and many more, inherently uses X.509.\n\n[[IPSec]] can use the RFC 4945 profile for authenticating peers.\n\nThe [https://apps.cablelabs.com/specification/opencable-security-specification OpenCable security specification] defines its own profile of X.509 for use in the cable industry.\n\nDevices like [[smart card]]s and [[Trusted Platform Module|TPMs]] often carry certificates to identify themselves or their owners. These certificates are in X.509 form.\n\nThe [[WS-Security]] standard defines authentication either through TLS or through its own certificate profile.<ref name=\":1\">{{Cite web|url=https://docs.oasis-open.org/wss-m/wss/v1.1.1/os/wss-x509TokenProfile-v1.1.1-os.html|title=Web Services Security X.509 Token Profile Version 1.1.1|website=docs.oasis-open.org|access-date=2017-03-14}}</ref> Both methods use X.509.\n\nThe [[Authenticode|Microsoft Authenticode]] code signing system uses X.509 to identify authors of computer programs.\n\nThe [[OPC UA]] industrial automation communication standard uses X.509.\n\n[[Secure Shell|SSH]] generally uses a [[Trust on first use|Trust On First Use]] security model and doesn't have need for certificates. However, the popular OpenSSH implementation does support a CA-signed identity model based on its own non-X.509 certificate format.<ref>{{Cite web|url=https://www.digitalocean.com/community/tutorials/how-to-create-an-ssh-ca-to-validate-hosts-and-clients-with-ubuntu|title=How To Create an SSH CA to Validate Hosts and Clients with Ubuntu {{!}} DigitalOcean|website=www.digitalocean.com|language=en|access-date=2017-03-19}}</ref>\n\n==See also==\n{{div col}}\n* [[Abstract Syntax Notation One]]\n* [[Certificate policy]]\n* [[Code Access Security]]\n* [[Communications security]]\n* [[Information security]]\n* [[ISO/IEC JTC 1]]\n* [[PKI Resource Query Protocol]]\n* [[Public-key cryptography]]\n* [[Time stamp protocol]]\n* [[Trusted timestamping]]\n{{div col end}}\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n* [https://www.itu.int/rec/T-REC-X.509/en ITU-T's X.509 standards]\n* Peter Gutmann's articles:\n** [https://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf Overview of PKI] \n** [https://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt X.509 implementation notes and style guide]\n* {{cite web|url=http://www.rsasecurity.com/rsalabs/node.asp?id=2155|title=Crypto FAQ from RSA Labs|archiveurl=https://web.archive.org/web/20061230232250/http://www.rsasecurity.com/rsalabs/node.asp?id=2155|archivedate=2006-12-30|url-status=dead}}\n* [http://java.sun.com/security/seccodeguide.html Sun Inc. - Secure code guidelines]\n* RFC 4158 - Internet X.509 Public Key Infrastructure: Certification Path Building\n* [http://certlogik.com/decoder CSR Decoder and Certificate Decoder] - can be used to decode and examine an encoded CSR or certificate.\n* [http://phpseclib.sourceforge.net/x509/decoder.php phpseclib: X.509 Decoder] - decodes to an associative array whose keys correspond to X.509's ASN.1 description\n* [http://www.actiu.net/sesele/ SeSeLe], Wizard for SSL self-signed certificates.\n* Microsoft TechNet [https://technet.microsoft.com/en-us/library/bb123848(v=exchg.65).aspx Understanding Digital Certificates]\n\n[[Category:Cryptographic protocols]]\n[[Category:Public-key cryptography]]\n[[Category:ITU-T recommendations]]\n[[Category:ITU-T X Series Recommendations]]\n[[Category:X.500]]\n", "text_old": "{{Infobox technology standard\n| title             = X.509\n| long_name         = Information technology - Open Systems Interconnection - The Directory: Public-key and attribute certificate frameworks  \n| image             = \n| caption           = \n| status            = In force\n| year_started      = 1988\n| version           = (10/16)\n| version_date      = October 2016\n| preview           = \n| preview_date      = \n| organization      = [[ITU-T]]\n| committee         = Study Group 17\n| base_standards    = [[ASN.1]]\n| related_standards = [[X.500]]\n| abbreviation      = \n| domain            = [[cryptography]]\n| license           = \n| website           = https://www.itu.int/rec/T-REC-X.509\n}}\n\nIn [[cryptography]], '''X.509''' is a standard defining the format of [[public key certificate]]s.<ref>{{Cite web|url=https://www.itu.int/rec/T-REC-X.509|title=X.509\u00a0:\u00a0Information technology - Open Systems Interconnection - The Directory: Public-key and attribute certificate frameworks|website=www.itu.int|access-date=2019-11-06}}</ref> X.509 certificates are used in many Internet protocols, including [[Transport Layer Security|TLS/SSL]], which is the basis for HTTPS<ref name=\":0\" />, the secure protocol for browsing the [[World Wide Web|web]]. They are also used in offline applications, like [[electronic signature]]s. An X.509 certificate contains a public key and an identity (a hostname, or an organization, or an individual), and is either signed by a [[certificate authority]] or self-signed. When a certificate is signed by a trusted certificate authority, or validated by other means, someone holding that certificate can rely on the public key it contains to establish secure communications with another party, or validate documents [[Digital signature|digitally signed]] by the corresponding [[private key]].\n\nX.509 also defines [[certificate revocation list]]s, which are a means to distribute information about certificates that have been deemed invalid by a signing authority, as well as a [[certification path validation algorithm]], which allows for certificates to be signed by intermediate CA certificates, which are, in turn, signed by other certificates, eventually reaching a [[trust anchor]].\n\nX.509 is defined by the [[International Telecommunication Union|International Telecommunications Union's]] Standardization sector ([[ITU-T]]), and is based on [[Abstract Syntax Notation One|ASN.1]], another ITU-T standard.\n\n==History and usage==\nX.509 was initially issued on July 3, 1988 and was begun in association with the [[X.500]] standard.  It assumes a strict hierarchical system of [[certificate authority|certificate authorities]] (CAs) for issuing the certificates. This contrasts with [[web of trust]] models, like [[Pretty Good Privacy|PGP]], where anyone (not just special CAs) may sign and thus attest to the validity of others' key certificates. Version 3 of X.509 includes the flexibility to support other topologies like [[network bridge|bridges]] and [[Mesh network|meshes]].<ref name=\":0\">RFC 4158</ref>  It can be used in a peer-to-peer, [[OpenPGP]]-like web of trust,{{citation needed|date=March 2011}} but was rarely used that way as of 2004. The X.500 system has only been implemented by sovereign nations for state identity information sharing treaty fulfillment purposes, and the [[IETF]]'s Public-Key Infrastructure (X.509), or PKIX, working group has adapted the standard to the more flexible organization of the Internet. In fact, the term ''X.509 certificate'' usually refers to the IETF's PKIX certificate and [[revocation list|CRL]] Profile of the X.509 v3 certificate standard, as specified in RFC 5280, commonly called PKIX for ''Public Key Infrastructure (X.509)''.{{citation needed|date=January 2012}}\n\n==Certificates==\nIn the X.509 system, an organization that wants a signed certificate requests one via a [[certificate signing request]] (CSR).\n\nTo do this, it first generates a [[key pair]], keeping the [[Private-key cryptography|private key]] secret and using it to sign the CSR. This contains information identifying the applicant and the applicant's [[public-key cryptography|public key]] that is used to verify the signature of the CSR - and the [[Distinguished Name]] (DN) that the certificate is for. The CSR may be accompanied by other credentials or proofs of identity required by the certificate authority.\n\nThe [[certification authority]] issues a certificate binding a public key to a particular [[Distinguished Name#Directory structure|distinguished name]].\n\nAn organization's trusted [[root certificate]]s can be distributed to all employees so that they can use the company PKI system.{{citation needed|date=March 2016}} Browsers such as [[Internet Explorer]], [[Firefox]], [[Opera (web browser)|Opera]], [[Safari (web browser)|Safari]] and [[Google Chrome|Chrome]] come with a predetermined set of root certificates pre-installed, so [[Secure Sockets Layer|SSL]] certificates from major certificate authorities will work instantly; in effect the browsers' developers determine which CAs are trusted third parties for the browsers' users.{{Citation needed|date=January 2012}} For example, Firefox provides a CSV and/or HTML file containing a list of Included CAs.<ref>{{Cite web|url=https://wiki.mozilla.org/CA:IncludedCAs|title=CA:IncludedCAs - MozillaWiki|website=wiki.mozilla.org|access-date=2017-01-17}}</ref>\n\nX.509 and RFC 5280 also include standards for certificate [[revocation list]] (CRL) implementations. Another [[IETF]]-approved way of checking a certificate's validity is the [[Online Certificate Status Protocol]] (OCSP). Firefox 3 enables OCSP checking by default, as do versions of Windows from at least Vista and later.<ref>{{cite web |url=https://bugzilla.mozilla.org/show_bug.cgi?id=110161 | title=Bug 110161 - (ocspdefault) enable OCSP by default |accessdate=2016-03-17}}</ref>\n\n===Structure of a certificate===\nThe structure foreseen by the standards is expressed in a formal language, [[Abstract Syntax Notation One]] (ASN.1).\n\nThe structure of an X.509 v3 [[digital certificate]] is as follows:\n* Certificate\n**Version Number\n**Serial Number\n**Signature Algorithm ID\n**Issuer Name\n**Validity period\n***Not Before\n***Not After\n**Subject name\n**Subject Public Key Info\n***Public Key Algorithm\n***Subject Public Key\n**Issuer Unique Identifier (optional)\n**Subject Unique Identifier (optional)\n**Extensions (optional)\n*** ...\n*Certificate Signature Algorithm\n*Certificate Signature\n\nEach extension has its own ID, expressed as [[object identifier]], which is a set of values, together with either a critical or non-critical indication.  A certificate-using system must reject the certificate if it encounters a critical extension that it does not recognize, or a critical extension that contains information that it cannot process.  A non-critical extension may be ignored if it is not recognized, but must be processed if it is recognized.<ref>[http://tools.ietf.org/html/rfc5280#section-4.2, RFC 5280 section 4.2, retrieved 12 February 2013]</ref>\n\nThe structure of version 1 is given in <nowiki>RFC 1422</nowiki>.<ref>[http://www.ietf.org/rfc/rfc1422 RFC 1422]</ref>\n\nITU-T introduced issuer and subject unique identifiers in version 2 to permit the reuse of issuer or subject name after some time.  An example of reuse will be when a [[certificate authority|CA]] goes bankrupt and its name is deleted from the country's public list.  After some time another CA with the same name may register itself, even though it is unrelated to the first one. However, [[IETF]] recommends that no issuer and subject names be reused.  Therefore, version 2 is not widely deployed in the Internet.{{citation needed|date=January 2012}}\n\nExtensions were introduced in version 3. A CA can use extensions to issue a certificate only for a specific purpose (e.g. only for [[code signing|signing digital objects]]).\n\nIn all versions, the serial number must be unique for each certificate issued by a specific CA (as mentioned in <nowiki>RFC 5280</nowiki>).\n\n===Extensions informing a specific usage of a certificate===\n<nowiki>RFC 5280</nowiki> (and its predecessors) defines a number of certificate extensions which indicate how the certificate should be used. Most of them are arcs from the <tt>joint-iso-ccitt(2) ds(5) id-ce(29)</tt> OID. Some of the most common, defined in section 4.2.1, are:\n\n* Basic Constraints, <tt>{ id-ce 19 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.9\n    | title =RFC 5280, Section 'Basic Constraints'\n  }}\n</ref> are used to indicate whether the certificate belongs to a CA.\n* Key Usage, <tt>{ id-ce 15 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.3\n    | title ='RFC 5280, Section 'Key Usage'\n  }}\n</ref> provides a bitmap specifying the cryptographic operations which may be performed using the public key contained in the certificate; for example, it could indicate that the key should be used for signatures but not for encipherment.\n* Extended Key Usage, <tt>{ id-ce 37 }</tt>,<ref>\n  {{cite web\n    | url = http://tools.ietf.org/html/rfc5280#section-4.2.1.12\n    | title = RFC 5280, Section 'Extended Key Usage'\n  }}\n</ref> is used, typically on a leaf certificate, to indicate the purpose of the public key contained in the certificate. It contains a list of OIDs, each of which indicates an allowed use. For example, <tt>{ id-pkix 3 1  }</tt> indicates that the key may be used on the server end of a TLS or SSL connection; <tt>{ id-pkix 3 4  }</tt> indicates that the key may be used to secure email.\n\nIn general, if a certificate has several extensions restricting its use, all restrictions must be satisfied for a given use to be appropriate. <nowiki>RFC 5280</nowiki> gives the specific example of a certificate containing both keyUsage and extendedKeyUsage: in this case, both must be processed and the certificate can only be used if both extensions are coherent in specifying the usage of a certificate. For example, [[Network Security Services|NSS]] uses both extensions to specify certificate usage.<ref>[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/nss_tech_notes/nss_tech_note3 All About Certificate Extensions]</ref>\n\n===Certificate filename extensions===\nThere are several commonly used filename extensions for X.509 certificates.  Unfortunately, some of these extensions are also used for other data such as private keys.\n\n* <tt>.pem</tt> \u2013 ([[Privacy-enhanced Electronic Mail]]) [[Base64]] encoded [[Distinguished Encoding Rules|DER]] certificate, enclosed between \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\"\n* <tt>.cer</tt>, <tt>.crt</tt>, <tt>.der</tt> \u2013 usually in binary [[Distinguished Encoding Rules|DER]] form, but Base64-encoded certificates are common too (see <tt>.pem</tt> above)\n* <tt>.p7b</tt>, <tt>.p7c</tt> \u2013 [[PKCS7|PKCS#7]] SignedData structure without data, just certificate(s) or [[revocation list|CRL]](s)\n* <tt>.p12</tt> \u2013 [[PKCS12|PKCS#12]], may contain certificate(s) (public) and private keys (password protected)\n* <tt>.pfx</tt> \u2013 PFX, predecessor of PKCS#12 (usually contains data in PKCS#12 format, e.g., with PFX files generated in [[Internet Information Services|IIS]])\n\n[[PKCS7|PKCS#7]] is a standard for signing or encrypting (officially called \"enveloping\") data. Since the certificate is needed to verify signed data, it is possible to include them in the SignedData structure. A <tt>.P7C</tt> file is a degenerated SignedData structure, without any data to sign.{{citation needed|date=January 2012}}\n\n[[PKCS12|PKCS#12]] evolved from the ''personal information exchange'' (PFX) standard and is used to exchange public and private objects in a single file.{{citation needed|date=January 2012}}\n\n==Certificate chains and cross-certification==\nA '''certificate chain''' (see the equivalent concept of \"certification path\" defined by RFC 5280)<ref name =\"RFC 5280 Certification Path Validation\">{{cite book\n  | title = Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\n  | publisher = Network Working Group\n  | year = 2008\n  | section = Certification Path Validation \n  | url = http://tools.ietf.org/html/rfc5280#page-71\n}}</ref> is a list of certificates (usually starting with an end-entity certificate) followed by one or more [[Certificate authority|CA]] certificates (usually the last one being a self-signed certificate), with the following properties:\n# The Issuer of each certificate (except the last one) matches the Subject of the next certificate in the list.\n# Each certificate (except the last one) is supposed to be signed by the secret key corresponding to the next certificate in the chain (i.e. the signature of one certificate can be verified using the public key contained in the following certificate).\n# The last certificate in the list is a [[trust anchor]]: a certificate that you trust because it was delivered to you by some trustworthy procedure.\n\nCertificate chains are used in order to check that the public key (PK) contained in a target certificate (the first certificate in the chain) and other data contained in it effectively belongs to its subject. In order to ascertain this, the signature on the target certificate is verified by using the PK contained in the following certificate, whose signature is verified using the next certificate, and so on until the last certificate in the chain is reached. As the last certificate is a trust anchor, successfully reaching it will prove that the target certificate can be trusted.\n\nThe description in the preceding paragraph is a simplified view on the [[certification path validation algorithm|certification path validation process]] as defined by RFC 5280,<ref name=\"RFC 5280 Certification Path Validation\"/> which involves additional checks, such as verifying validity dates on certificates, looking up [[revocation list|CRLs]], etc.\n\n[[File:Cross-certification diagram.svg|thumb|350px|right|Example 1: Cross-certification between two PKIs]]\n[[File:CA certificate renewal.png|frame|right|Example 2: CA certificate renewal]]\n\nExamining how certificate chains are built and validated, it is important to note that a concrete certificate can be part of very different certificate chains (all of them valid). This is because several CA certificates can be generated for the same subject and public key, but be signed with different private keys (from different CAs or different private keys from the same CA). So, although a single X.509 certificate can have only one issuer and one CA signature, it can be validly linked to more than one certificate, building completely different certificate chains. This is crucial for cross-certification between PKIs and other applications.<ref name=\"Understanding Certification Path Construction\">\n{{cite book\n  |title=Understanding Certification Path Construction\n  |date=September 2002\n  |publisher=PKI Forum\n  |last=Lloyd\n  |first=Steve\n  |url=http://www.oasis-pki.org/pdfs/Understanding_Path_construction-DS2.pdf\n}}\n</ref>\nSee the following examples.\n\nIn these diagrams:\n* Each box represents a certificate, with its Subject in bold.\n* A \u2192 B means \"A is signed by B\" (or, more precisely, \"A is signed by the secret key corresponding to the public key contained in B\"). \n* Certificates with the same color (that are not white/transparent) contain the same public key.\n\n===Example 1: Cross-certification at root Certification Authority (CA) level between two PKIs===\n\nIn order to manage that user certificates existing in PKI 2 (like \"User 2\") are trusted by PKI 1, CA1 generates a certificate (cert2.1) containing the public key of CA2.<ref>\n{{cite book\n  |title=Qualified Subordination Deployment Scenarios\n  |date=August 2009\n  |publisher=Microsoft\n  |section=Cross-Certification Between Root CAs\n  |url=https://technet.microsoft.com/en-us/library/cc785267(v=ws.10).aspx\n}}\n</ref>\nNow both \"cert2 and cert2.1 (in green) have the same subject and public key, so there are two valid chains for cert2.2 (User 2): \"cert2.2 \u2192 cert2\" and \"cert2.2 \u2192 cert2.1 \u2192 cert1\".\n\nSimilarly, CA2 can generate a certificate (cert1.1) containing the public key of CA1 so that user certificates existing in PKI 1 (like \"User 1\") are trusted by PKI 2.\n\n===Example 2: CA certificate renewal===\n{{cite book\n  |title=Understanding Certification Path Construction\n  |date=September 2002\n  |publisher=PKI Forum\n  |url=http://www.oasis-pki.org/pdfs/Understanding_Path_construction-DS2.pdf \n  |quote=To allow for graceful transition from the old signing key pair to the new signing key pair, the CA should issue a certificate that contains the old public key signed by the new private signing key and a certificate that contains the new public key signed by the old private signing key. Both of these certificates are self-issued, but neither is [[Self-signed certificate|self-signed]]. Note that these are in addition to the two self-signed certificates (one old, one new).\n}}\n\nSince both cert1 and cert3 contain the same public key (the old one), there are two valid certificate chains for cert5: \"cert5 \u2192 cert1\" and \"cert5 \u2192 cert3 \u2192 cert2\", and analogously for cert6. This allows that old user certificates (such as cert5) and new certificates (such as cert6) can be trusted indifferently by a party having either the new root CA certificate or the old one as trust anchor during the transition to the new CA keys.<ref name=\" PKI Implementing and Managing E-Security\">\n{{cite book\n  |title=PKI: Implementing and Managing E-Security\n  |year=2001\n  |publisher=RSA Press - Osborne/McGraw-Hill\n  |last1=Nash\n  |last2=Duane\n  |last3=Joseph\n  |last4=Brink\n  |isbn=0-07-213123-3\n  |section=Key and Certificate Life Cycles. CA Certificate Renewal\n}}\n</ref>\n\n==Sample X.509 certificates==\nThis is an example of a decoded X.509 certificate that was used by wikipedia.org and several other Wikipedia websites. It was issued by [[GlobalSign]], as stated in the Issuer field. Its Subject field describes Wikipedia as an organization, and its Subject Alternative Name field describes the hostnames for which it could be used. The Subject Public Key Info field contains an [[ECDSA]] public key, while the signature at the bottom was generated by GlobalSign's [[RSA (cryptosystem)|RSA]] private key.\n\n=== End-entity certificate ===\n Certificate:\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             10:e6:fc:62:b7:41:8a:d5:00:5e:45:b6\n         Signature Algorithm: sha256WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n         Validity\n             Not Before: Nov 21 08:00:00 2016 GMT\n             Not After : Nov 22 07:59:59 2017 GMT\n         Subject: C=US, ST=California, L=San Francisco, O=Wikimedia Foundation, Inc., CN=*.wikipedia.org\n         Subject Public Key Info:\n             Public Key Algorithm: id-ecPublicKey\n                 Public-Key: (256 bit)\n             pub: \n                     00:c9:22:69:31:8a:d6:6c:ea:da:c3:7f:2c:ac:a5:\n                     af:c0:02:ea:81:cb:65:b9:fd:0c:6d:46:5b:c9:1e:\n                     9d:3b:ef\n                 ASN1 OID: prime256v1\n                 NIST CURVE: P-256\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Digital Signature, Key Agreement\n             Authority Information Access: \n                 CA Issuers - URI:<nowiki>http://secure.globalsign.com/cacert/gsorganizationvalsha2g2r1.crt</nowiki>\n                 OCSP - URI:<nowiki>http://ocsp2.globalsign.com/gsorganizationvalsha2g2</nowiki>\n             X509v3 Certificate Policies: \n                 Policy: 1.3.6.1.4.1.4146.1.20\n                   CPS: <nowiki>https://www.globalsign.com/repository/</nowiki>\n                 Policy: 2.23.140.1.2.2\n             X509v3 Basic Constraints: \n                 CA:FALSE\n             X509v3 CRL Distribution Points: \n                 Full Name:\n                   URI:<nowiki>http://crl.globalsign.com/gs/gsorganizationvalsha2g2.crl</nowiki>\n             X509v3 Subject Alternative Name: \n                 DNS:*.wikipedia.org, DNS:*.m.mediawiki.org, DNS:*.m.wikibooks.org, DNS:*.m.wikidata.org, DNS:*.m.wikimedia.org, DNS:*.m.wikimediafoundation.org, DNS:*.m.wikinews.org, DNS:*.m.wikipedia.org, DNS:*.m.wikiquote.org, DNS:*.m.wikisource.org, DNS:*.m.wikiversity.org, DNS:*.m.wikivoyage.org, DNS:*.m.wiktionary.org, DNS:*.mediawiki.org, DNS:*.planet.wikimedia.org, DNS:*.wikibooks.org, DNS:*.wikidata.org, DNS:*.wikimedia.org, DNS:*.wikimediafoundation.org, DNS:*.wikinews.org, DNS:*.wikiquote.org, DNS:*.wikisource.org, DNS:*.wikiversity.org, DNS:*.wikivoyage.org, DNS:*.wiktionary.org, DNS:*.wmfusercontent.org, DNS:*.zero.wikipedia.org, DNS:mediawiki.org, DNS:w.wiki, DNS:wikibooks.org, DNS:wikidata.org, DNS:wikimedia.org, DNS:wikimediafoundation.org, DNS:wikinews.org, DNS:wikiquote.org, DNS:wikisource.org, DNS:wikiversity.org, DNS:wikivoyage.org, DNS:wiktionary.org, DNS:wmfusercontent.org, DNS:wikipedia.org\n             X509v3 Extended Key Usage: \n                 TLS Web Server Authentication, TLS Web Client Authentication\n             X509v3 Subject Key Identifier: \n                 28:2A:26:2A:57:8B:3B:CE:B4:D6:AB:54:EF:D7:38:21:2C:49:5C:36\n             X509v3 Authority Key Identifier: \n                 keyid:96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n \n     Signature Algorithm: sha256WithRSAEncryption\n          8b:c3:ed:d1:9d:39:6f:af:40:72:bd:1e:18:5e:30:54:23:35:\n          ...\n\nTo validate this end-entity certificate, one needs an intermediate certificate that matches its Issuer and Authority Key Identifier:\n{| class=\"wikitable\"\n|Issuer\n|C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n|-\n|Authority Key Identifier\n|96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n|}\nIn a TLS connection, a properly-configured server would provide the intermediate as part of the handshake. However, it's also possible to retrieve the intermediate certificate by fetching the \"CA Issuers\" URL from the end-entity certificate.\n\n=== Intermediate certificate ===\nThis is an example of an intermediate certificate belonging to a [[certificate authority]]. This certificate signed the end-entity certificate above, and was signed by the root certificate below. Note that the subject field of this intermediate certificate matches the issuer field of the end-entity certificate that it signed. Also, the \"subject key identifier\" field in the intermediate matches the \"authority key identifier\" field in the end-entity certificate.\n Certificate:\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             04:00:00:00:00:01:44:4e:f0:42:47\n         Signature Algorithm: sha256WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Validity\n             Not Before: Feb 20 10:00:00 2014 GMT\n             Not After : Feb 20 10:00:00 2024 GMT\n         Subject: C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2\n         Subject Public Key Info:\n             Public Key Algorithm: rsaEncryption\n                 Public-Key: (2048 bit)\n                 Modulus:\n                     00:c7:0e:6c:3f:23:93:7f:cc:70:a5:9d:20:c3:0e:\n                     ...\n                 Exponent: 65537 (0x10001)\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Certificate Sign, CRL Sign\n             X509v3 Basic Constraints: critical\n                 CA:TRUE, pathlen:0\n             X509v3 Subject Key Identifier:\n                 96:DE:61:F1:BD:1C:16:29:53:1C:C0:CC:7D:3B:83:00:40:E6:1A:7C\n             X509v3 Certificate Policies:\n                 Policy: X509v3 Any Policy\n                   CPS: <nowiki>https://www.globalsign.com/repository/</nowiki>\n \n             X509v3 CRL Distribution Points:\n \n                 Full Name:\n                   URI:<nowiki>http://crl.globalsign.net/root.crl</nowiki>\n \n             Authority Information Access:\n                 OCSP - URI:<nowiki>http://ocsp.globalsign.com/rootr1</nowiki>\n \n             X509v3 Authority Key Identifier:\n                 keyid:60:7B:66:1A:45:0D:97:CA:89:50:2F:7D:04:CD:34:A8:FF:FC:FD:4B\n \n     Signature Algorithm: sha256WithRSAEncryption\n          46:2a:ee:5e:bd:ae:01:60:37:31:11:86:71:74:b6:46:49:c8:\n          ...\n\n=== Root certificate ===\nThis is an example of a [[Self-signed certificate|self-signed]] root certificate representing a [[certificate authority]]. Its issuer and subject fields are the same, and its signature can be validated with its own public key. Validation of the trust chain has to end here. If the validating program has this root certificate in its [[Public key certificate#Root programs|trust store]], the end-entity certificate can be considered trusted for use in a TLS connection. Otherwise, the end-entity certificate is considered untrusted.\n Certificate:<ref name=\":1\" />\n     Data:\n         Version: 3 (0x2)\n         Serial Number:\n             04:00:00:00:00:01:15:4b:5a:c3:94\n         Signature Algorithm: sha1WithRSAEncryption\n         Issuer: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Validity\n             Not Before: Sep  1 12:00:00 1998 GMT\n             Not After : Jan 28 12:00:00 2028 GMT\n         Subject: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\n         Subject Public Key Info:\n             Public Key Algorithm: rsaEncryption\n                 Public-Key: (2048 bit)\n                 Modulus:\n                     00:da:0e:e6:99:8d:ce:a3:e3:4f:8a:7e:fb:f1:8b:\n                     ...\n                 Exponent: 65537 (0x10001)\n         X509v3 extensions:\n             X509v3 Key Usage: critical\n                 Certificate Sign, CRL Sign\n             X509v3 Basic Constraints: critical\n                 CA:TRUE\n             X509v3 Subject Key Identifier: \n                 60:7B:66:1A:45:0D:97:CA:89:50:2F:7D:04:CD:34:A8:FF:FC:FD:4B\n     Signature Algorithm: sha1WithRSAEncryption\n          d6:73:e7:7c:4f:76:d0:8d:bf:ec:ba:a2:be:34:c5:28:32:b5:\n          ...\n\n==Security==\nThere are a number of publications about PKI problems by [[Bruce Schneier]], [[Peter Gutmann (computer scientist)|Peter Gutmann]] and other security experts.<ref name=\"schneier\">\n  {{cite web\n    | url = https://www.schneier.com/paper-pki.pdf\n    | title = Top 10 PKI risks\n    | author = Carl Ellison and Bruce Schneier\n    | publisher = Computer Security Journal (Volume XVI, Number 1, 2000)\n  }}\n</ref><ref name=\"pkinotdead\">\n  {{cite web\n    | url = http://www.cs.auckland.ac.nz/~pgut001/pubs/notdead.pdf\n    | title = PKI: it's not dead, just resting\n    | author = Peter Gutmann\n    | publisher = IEEE Computer (Volume:35, Issue: 8)\n  }}\n</ref><ref name=\"gutmann1\">\n  {{cite web\n    |last=Gutmann\n    |first=Peter\n    |title=Everything you Never Wanted to Know about PKI but were Forced to Find Out\n    |url=http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf|accessdate=14 November 2011\n  }}\n</ref>\n\n===Architectural weaknesses===\n*Use of blacklisting invalid certificates (using [[revocation list|CRL]]s and [[Online Certificate Status Protocol|OCSP]]),\n**If the client only trusts certificates when CRLs are available, then they lose the offline capability that makes PKI attractive.  So most clients do trust certificates when CRLs are not available, but in that case an attacker that controls the communication channel can disable the CRLs.  Adam Langley of Google has said soft-fail CRL checks are like a safety belt that works except when you have an accident.<ref>{{cite web|last1=Langley|first1=Adam|title=Revocation checking and Chrome's CRL (05 Feb 2012)|url=https://www.imperialviolet.org/2012/02/05/crlsets.html|website=Imperial Violet|accessdate=2 February 2017}}</ref>\n*CRLs are notably a poor choice because of large sizes and convoluted distribution patterns,\n*Ambiguous OCSP semantics and lack of historical revocation status,\n*Revocation of root certificates is not addressed,\n*'''Aggregation problem''': Identity claims (authenticate with an identifier), attribute claims (submit a bag of vetted attributes), and policy claims are combined in a single container. This raises privacy, policy mapping, and maintenance issues.{{clarify|date=March 2018}}\n*'''Delegation problem''': CAs cannot technically restrict subordinate CAs from issuing certificates outside a limited namespaces or attribute set; this feature of X.509 is not in use. Therefore, a large number of CAs exist on the Internet, and classifying them and their policies is an insurmountable task. Delegation of authority within an organization cannot be handled at all, as in common business practice.\n*'''Federation problem''': Certificate chains that are the result of subordinate CAs, bridge CAs, and cross-signing make validation complex and expensive in terms of processing time. Path validation semantics may be ambiguous. The hierarchy with a third-party trusted party is the only model. This is inconvenient when a bilateral trust relationship is already in place.\n*Issuance of an [[Extended Validation Certificate|Extended Validation (EV) certificate]] for a hostname doesn't prevent issuance of a lower-validation certificate valid for the same hostname, which means that the higher validation level of EV doesn't protect against man-in-the-middle attacks.<ref>[https://www.blackhat.com/presentations/bh-usa-09/SOTIROV/BHUSA09-Sotirov-AttackExtSSL-PAPER.pdf Zusman and Sotirov Blackhat 2009]</ref>\n\n===Problems with certificate authorities===\n* The subject, not the relying party, purchases certificates. The subject will often utilize the cheapest issuer, so quality is not being paid for in the competing market. This is partly addressed by [[Extended Validation]] certificates, yet trust value in the eyes of security experts are diminishing. <ref name=\"troyhuntevcertsdead\">{{cite web|last1=Hunt|first1=Troy|title=Extended Validation Certificates are Dead|url=https://www.troyhunt.com/extended-validation-certificates-are-dead/|website=TroyHunt.com|accessdate=26 February 2019|ref=troyhuntevcertsdead}}</ref>\n* Certification authorities deny almost all warranties to the user (including subject or even relying parties).\n* \"Users use an undefined certification request protocol to obtain a certificate which is published in an unclear location in a nonexistent directory with no real means to revoke it.\"<ref name=\"gutmann1\"/>\n* Like all businesses, CAs are subject to the legal jurisdictions they operate within, and may be legally compelled to compromise the interests of their customers and their users. Intelligence agencies have also made use of false certificates issued through extralegal compromise of CAs, such as [[DigiNotar]], to carry out [[man-in-the-middle attack]]s.{{citation needed|date=May 2014}} Another example is a revocation request of the CA of the Dutch government, because of a new Dutch law becoming active starting January 1, 2018, giving new powers for the Dutch intelligence and security services.<ref name=\"van Pelt\">{{cite web|last1=van Pelt|first1=Cris|title=Logius: Dutch Government CA trust issue|url=https://bugzilla.mozilla.org/show_bug.cgi?id=1408647|website=Bugzilla|accessdate=31 October 2017|ref=vanPelt}}</ref>\n\n===Implementation issues===\nImplementations suffer from design flaws, bugs, different interpretations of standards and lack of interoperability of different standards. Some problems are:{{citation needed|date=January 2012}}\n* Many implementations turn off revocation check:\n** Seen as obstacle, policies are not enforced\n** If it was turned on in all browsers by default, including code signing, it would probably crash the infrastructure{{citation needed|date=April 2015}}\n* DNs are complex and little understood (lack of canonicalization, internationalization problems, ..)\n* rfc822Name has two notations\n* Name and policy constraints hardly supported\n* Key usage ignored, first certificate in a list being used\n* Enforcement of custom OIDs is difficult\n* Attributes should not be made critical because it makes clients crash{{Citation needed|reason=What clients? And define \"crash.\"|date=March 2018}}\n* Unspecified length of attributes lead to product-specific limits\n* There are implementation errors with X.509 that allow e.g. falsified subject names using null-terminated strings<ref>[https://www.blackhat.com/presentations/bh-usa-09/MARLINSPIKE/BHUSA09-Marlinspike-DefeatSSL-SLIDES.pdf Marlinspike Blackhat 2009]</ref> or code injection attacks in certificates.\n* By using illegal<ref>Rec. ITU-T X.690, clause 8.19.2</ref> 0x80 padded subidentifiers of [[object identifier]]s, wrong implementations or by using integer overflows of the client's browsers, an attacker can include an unknown attribute in the CSR, which the CA will sign, which the client wrongly interprets as \"CN\" (OID=2.5.4.3). Dan Kaminsky at the 26th  [[Chaos Communication Congress]] \"Black OPs of PKI\"<ref>{{cite web|url=https://events.ccc.de/congress/2009/Fahrplan/events/3658.en.html|title=26C3: Black Ops Of PKI|date=|publisher=Events.ccc.de|accessdate=2013-09-29}}</ref>\n\n===Cryptographic weaknesses===\nDigital signature systems depend on secure [[cryptographic hash function]]s to work. When a public key infrastructure allows the use of a hash function that is no longer secure, an attacker can exploit weaknesses in the hash function to forge certificates. Specifically, if an attacker is able to produce a [[Collision resistance|hash collision]], they can convince a CA to sign a certificate with innocuous contents, where the hash of those contents is identical to the hash of another, malicious set of certificate contents, created by the attacker with values of their choosing. The attacker can then append the CA-provided signature to their malicious certificate contents, resulting in a malicious certificate that appears to be signed by the CA. Because the malicious certificate contents are chosen solely by the attacker, they can have different validity dates or hostnames than the innocuous certificate. The malicious certificate can even contain a \"CA: true\" field making it able to issue further trusted certificates.\n* MD2-based certificates were used for a long time and were vulnerable to [[preimage attack]]s. Since the root certificate already had a self-signature, attackers could use this signature and use it for an intermediate certificate.\n* In 2005, [[Arjen Lenstra]] and [[Benne de Weger]] demonstrated \"how to use hash collisions to construct two X.509 certificates that contain identical signatures and that differ only in the public keys\", achieved using a [[collision attack]] on the [[MD5]] hash function.<ref name=\"Lenstra & de Weger\">{{cite techreport |first1=Arjen |last1=Lenstra |authorlink1=Arjen Lenstra |first2=Benne |last2=de Weger  |title=On the possibility of constructing meaningful hash collisions for public keys |url=http://www.win.tue.nl/~bdeweger/CollidingCertificates/ddl-full.pdf |accessdate=2013-09-28 |date=2005-05-19 |archiveurl=https://web.archive.org/web/20130514200135/http://www.win.tue.nl/~bdeweger/CollidingCertificates/ddl-full.pdf |archivedate=2013-05-14 |url-status=live |location=Murray Hill, NJ, USA & Eindhoven, The Netherlands |publisher=[[Lucent Technologies]], [[Bell Laboratories]] & [[Technische Universiteit Eindhoven]]}}</ref>\n* In 2008, [[Alexander Sotirov]] and [[Marc Stevens (computer scientist)|Marc Stevens]] presented at the [[Chaos Communication Congress]] a practical attack that allowed them to create a rogue Certificate Authority, accepted by all common browsers, by exploiting the fact that RapidSSL was still issuing X.509 certificates based on MD5.<ref>{{cite web|url=http://www.win.tue.nl/hashclash/rogue-ca/ |title=MD5 considered harmful today |publisher=Win.tue.nl |date= |accessdate=2013-09-29}}</ref>\n* In April 2009 at the Eurocrypt Conference,<ref>[https://www.iacr.org/conferences/eurocrypt2009/ Eurocrypt Conference]</ref> Australian Researchers of Macquarie University presented \"Automatic Differential Path Searching for [[SHA-1]]\".<ref>[http://eurocrypt2009rump.cr.yp.to/837a0a8086fa6ca714249409ddfae43d.pdf \"Automatic Differential Path Searching for SHA-1\"]</ref> The researchers were able to deduce a method which increases the likelihood of a collision by several orders of magnitude.<ref>{{cite web|last1=Litke|first1=Pat|title=SHA-1 Collision Attacks Now 252 |url=https://www.secureworks.com/blog/research-20935|website=SecureWorks|publisher=SecureWorks Insights|accessdate=24 February 2016}}</ref>\n* In February 2017, a group of researchers led by Marc Stevens produced a  SHA-1 collision, demonstrating SHA-1's weakness.<ref>{{Cite web|url=https://shattered.io/static/shattered.pdf|title=The first collision for full SHA-1}}</ref>\n\n==== Mitigations for cryptographic weaknesses ====\nExploiting a hash collision to forge X.509 signatures requires that the attacker be able to predict the data that the certificate authority will sign. This can be somewhat mitigated by the CA generating a random component in the certificates it signs, typically the serial number. The [[CA/Browser Forum]] has required serial number entropy in its Baseline Requirements Section 7.1 since 2011.<ref>{{Cite news|url=https://cabforum.org/baseline-requirements-documents/|title=Baseline Requirements Documents - CAB Forum|work=CAB Forum|access-date=2017-03-19|language=en-US}}</ref>\n\n{{As of|2016|01|01|df=US}}, the Baseline Requirements forbid issuance of certificates using SHA-1. {{As of|2017|alt=As of early 2017}}, Chrome<ref>{{Cite news|url=https://security.googleblog.com/2016/11/sha-1-certificates-in-chrome.html|title=SHA-1 Certificates in Chrome|work=Google Online Security Blog|access-date=2017-03-19|language=en-US}}</ref> and Firefox<ref>{{Cite web|url=https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/|title=The end of SHA-1 on the Public Web|website=Mozilla Security Blog|language=en-US|access-date=2017-03-19}}</ref> reject certificates that use SHA-1. {{As of|2017|05|df=US}} both Edge<ref>{{Cite web|url=https://technet.microsoft.com/en-us/library/security/4010323.aspx|title=Microsoft Security Advisory 4010323|website=technet.microsoft.com|language=en|access-date=2017-05-16}}</ref> and Safari<ref>{{Cite news|url=https://support.apple.com/en-us/HT207459|title=Safari and WebKit do not support SHA-1 certificates|work=Apple Support|access-date=2017-05-16|language=en-US}}</ref> are also rejecting SHA-1 certificate. Non-browser X.509 validators do not yet reject SHA-1 certificates.<ref>{{Cite web|url=https://daniel.haxx.se/blog/2017/01/10/lesser-https-for-non-browsers/|title=Lesser HTTPS for non-browsers {{!}} daniel.haxx.se|website=daniel.haxx.se|language=en-US|access-date=2017-03-19}}</ref>\n\n==PKI standards for X.509==\n* [[PKCS7]] (Cryptographic Message Syntax Standard&nbsp;\u2014 public keys with proof of identity for signed and/or encrypted message for PKI).<ref>{{Cite web|url=https://www.ietf.org/rfc/rfc2315.txt|title=PKCS #7: Cryptographic Message Syntax Version 1.5}}</ref>\n* [[Transport Layer Security]] (TLS) and its predecessor SSL&nbsp;\u2014 cryptographic protocols for Internet secure communications.<ref>{{Cite web|url=https://tools.ietf.org/rfc/rfc5246.txt|title=The Transport Layer Security (TLS) Protocol Version 1.2}}</ref>\n* [[Online Certificate Status Protocol]] (OCSP)<ref>{{Cite web|url=https://tools.ietf.org/html/rfc6960|title=X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP}}</ref> / certificate [[revocation list]] (CRL)<ref>{{Cite web|url=https://tools.ietf.org/html/rfc5280|title=Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile}}</ref>&nbsp;\u2014 this is to check certificate revocation status.\n* [[PKCS12]] (Personal Information Exchange Syntax Standard)&nbsp;\u2014 used to store a private key with the appropriate public key certificate.<ref>{{Cite web|url=https://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs12-personal-information-exchange-syntax-standard.htm|title=RSA Laboratories - PKCS #12: Personal Information Exchange Syntax Standard|website=www.emc.com|access-date=2017-03-19}}</ref>\n\n==PKIX Working Group==\nIn 1995, the [[Internet Engineering Task Force]] in conjunction with the [[National Institute of Standards and Technology]]<ref name=\"PKIX Charter\">{{Cite web|url=https://datatracker.ietf.org/wg/pkix/charter/|title=Public-Key Infrastructure (X.509) (pkix) - Charter|publisher=[[Internet Engineering Task Force]]|location=Fremont, CA, USA|accessdate=2013-10-01|work=datatracker.ietf.org}}0</ref> formed the Public-Key Infrastructure (X.509) working group. The working group, concluded in June 2014,<ref>{{Cite web|url=https://tools.ietf.org/wg/pkix/|title=Pkix Status Pages|website=tools.ietf.org|access-date=2017-03-10}}</ref> is commonly referred to as \"PKIX.\" It produced [[Request for Comments|RFCs]] and other standards documentation on using deploying X.509 in practice. In particular it produced RFC 3280 and its successor RFC 5280, which define how to use X.509 in Internet protocols.\n\n==Major protocols and standards using X.509 certificates==\n[[Transport Layer Security|TLS/SSL]] and [[HTTPS]] use the RFC 5280 profile of X.509, as do [[S/MIME]] (Secure Multipurpose Internet Mail Extensions) and the [[EAP-TLS#EAP Transport Layer Security .28EAP-TLS.29|EAP-TLS]] method for WiFi authentication. Any protocol that uses TLS, such as SMTP, POP, IMAP, LDAP, XMPP, and many more, inherently uses X.509.\n\n[[IPSec]] can use the RFC 4945 profile for authenticating peers.\n\nThe [https://apps.cablelabs.com/specification/opencable-security-specification OpenCable security specification] defines its own profile of X.509 for use in the cable industry.\n\nDevices like [[smart card]]s and [[Trusted Platform Module|TPMs]] often carry certificates to identify themselves or their owners. These certificates are in X.509 form.\n\nThe [[WS-Security]] standard defines authentication either through TLS or through its own certificate profile.<ref name=\":1\">{{Cite web|url=https://docs.oasis-open.org/wss-m/wss/v1.1.1/os/wss-x509TokenProfile-v1.1.1-os.html|title=Web Services Security X.509 Token Profile Version 1.1.1|website=docs.oasis-open.org|access-date=2017-03-14}}</ref> Both methods use X.509.\n\nThe [[Authenticode|Microsoft Authenticode]] code signing system uses X.509 to identify authors of computer programs.\n\nThe [[OPC UA]] industrial automation communication standard uses X.509.\n\n[[Secure Shell|SSH]] generally uses a [[Trust on first use|Trust On First Use]] security model and doesn't have need for certificates. However, the popular OpenSSH implementation does support a CA-signed identity model based on its own non-X.509 certificate format.<ref>{{Cite web|url=https://www.digitalocean.com/community/tutorials/how-to-create-an-ssh-ca-to-validate-hosts-and-clients-with-ubuntu|title=How To Create an SSH CA to Validate Hosts and Clients with Ubuntu {{!}} DigitalOcean|website=www.digitalocean.com|language=en|access-date=2017-03-19}}</ref>\n\n==See also==\n{{div col}}\n* [[Abstract Syntax Notation One]]\n* [[Certificate policy]]\n* [[Code Access Security]]\n* [[Communications security]]\n* [[Information security]]\n* [[ISO/IEC JTC 1]]\n* [[PKI Resource Query Protocol]]\n* [[Public-key cryptography]]\n* [[Time stamp protocol]]\n* [[Trusted timestamping]]\n{{div col end}}\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n* [https://www.itu.int/rec/T-REC-X.509/en ITU-T's X.509 standards]\n* Peter Gutmann's articles:\n** [https://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf Overview of PKI] \n** [https://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt X.509 implementation notes and style guide]\n* {{cite web|url=http://www.rsasecurity.com/rsalabs/node.asp?id=2155|title=Crypto FAQ from RSA Labs|archiveurl=https://web.archive.org/web/20061230232250/http://www.rsasecurity.com/rsalabs/node.asp?id=2155|archivedate=2006-12-30|url-status=dead}}\n* [http://java.sun.com/security/seccodeguide.html Sun Inc. - Secure code guidelines]\n* RFC 4158 - Internet X.509 Public Key Infrastructure: Certification Path Building\n* [http://certlogik.com/decoder CSR Decoder and Certificate Decoder] - can be used to decode and examine an encoded CSR or certificate.\n* [http://phpseclib.sourceforge.net/x509/decoder.php phpseclib: X.509 Decoder] - decodes to an associative array whose keys correspond to X.509's ASN.1 description\n* [http://www.actiu.net/sesele/ SeSeLe], Wizard for SSL self-signed certificates.\n* Microsoft TechNet [https://technet.microsoft.com/en-us/library/bb123848(v=exchg.65).aspx Understanding Digital Certificates]\n\n[[Category:Cryptographic protocols]]\n[[Category:Public-key cryptography]]\n[[Category:ITU-T recommendations]]\n[[Category:ITU-T X Series Recommendations]]\n[[Category:X.500]]\n", "name_user": "219.70.243.151", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/X.509"}
