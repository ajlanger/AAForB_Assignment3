{"title_page": "Wayland (display server protocol)", "text_new": "{{format references|date=December 2019}}\n{{Use dmy dates|date=November 2014}}\n\n{{Infobox software\n| name                   = Wayland\n| logo                   = Wayland Logo.svg\n| logo size              = 100px\n| screenshot             = Maynard desktop.png\n| caption                = Screenshot of [[#Maynard|Maynard]], a [[Plug-in (computing)|plug-in]] for [[#Weston|Weston]], the [[reference implementation]] of Wayland\n| author                 = Kristian H\u00f8gsberg\n| developer              = [[freedesktop.org]] et al.\n| released               = {{Start date and age|2008|09|30|df=yes}}<ref>{{cite web\n | url         = https://cgit.freedesktop.org/wayland/wayland/commit/?id=97f1ebe8d5c2e166fabf757182c289fed266a45a\n | title       = Initial commit\n | first       = Kristian\n | last        = H\u00f8gsberg\n | date        = 30 September 2008\n | access-date = 3 January 2020}}</ref>\n| latest release version = Wayland: 1.20,<ref name=\"wayland 1.20\" /> Weston: 8.0<ref name=\"weston 8.0\" />\n| latest release date    = {{Start date and age|2020|02|29|df=yes}}\n| latest preview version = Wayland: 1.16.93,<ref name=\"wayland 1.16.93\" /> Weston: 6.0.91<ref name=\"weston 6.0.91\" />\n| latest preview date    = {{Start date and age|2019|08|02|df=yes}}\n| programming language   = [[C (programming language)|C]]\n| operating system       = official: [[Linux]]<br />unofficial: [[FreeBSD]], [[DragonFly BSD]]\n| platform               =\n| genre                  = {{unbulleted list|[[Windowing system]]|[[Display server]]}}\n| license                = [[MIT License]]{{r|License}}{{r|wllicense}}{{r|Larabel 2015 license}}\n| website                = {{URL|https://wayland.freedesktop.org/}}\n}}\n\n'''Wayland''' is a [[communication protocol]] that specifies the communication between a [[display server]] and its clients, as well as a [[C (programming language)|C]] library implementation of that protocol.{{r|Wayland homepage}} A display server using the Wayland protocol is called a ''[[#Wayland compositors|Wayland compositor]]'', because it additionally performs the task of a [[compositing window manager]].\n\nWayland is developed by a group of volunteers initially led by Kristian H\u00f8gsberg as a [[free software|free]] and [[Open-source software|open-source]] community-driven project with the aim of replacing the [[X Window System]] with a modern, secure, simpler [[windowing system]] in [[Linux]] and other [[Unix-like]] operating systems.{{r|Wayland homepage}} The project's source code is published under the terms of the [[MIT License]], a [[permissive free software licence]].{{r|Wayland FAQ}}{{r|License}}\n\nAs part of its efforts, the Wayland project also develops a [[reference implementation]] of a Wayland compositor called ''[[#Weston|Weston]]''.{{r|Wayland homepage}}\n\n==Overview==\n[[File:Wayland display server protocol.svg|thumb|right|upright=1.6|{{ordered list\n| The [[evdev]] module of the [[Linux kernel]] gets an event and sends it to the [[Wayland compositor]].\n| The Wayland compositor looks through its [[scenegraph]] to determine which window should receive the event. The scenegraph corresponds to what is on screen and the Wayland compositor understands the transformations that it may have applied to the elements in the scenegraph. Thus, the Wayland compositor can pick the right window and transform the screen coordinates to window local coordinates, by applying the inverse transformations. The types of transformation that can be applied to a window is only restricted to what the compositor can do, as long as it can compute the inverse transformation for the input events.\n| As in the X case, when the client receives the event, it updates the UI in response. But in the Wayland case, the rendering happens by the client via [[EGL (API)|EGL]], and the client just sends a request to the compositor to indicate the region that was updated.\n| The Wayland compositor collects damage requests from its clients and then re-composites the screen. The compositor can then directly issue an [[ioctl]] to schedule a pageflip with [[KMS (Linux kernel)|KMS]].}}]]\n\nStarting around 2010, Linux desktop graphics has moved from having \"a pile of [[Rendering (computer graphics)|rendering]] interfaces... all talking to the [[display server|X server]], which is at the center of the universe\" towards putting the Linux kernel and its components (i.e. [[Direct Rendering Infrastructure|Direct Rendering Infrastructure (DRI)]], [[Direct Rendering Manager|Direct Rendering Manager (DRM)]]) \"in the middle\", with \"window systems like X and Wayland ... off in the corner\". This will be \"a much-simplified graphics system offering more flexibility and better performance\".{{r|Corbet 2010}}\n\nKristian H\u00f8gsberg could have added an [[Xdmx|extension to X]] as many recent projects have done, but preferred to \"[push] X out of the hotpath between clients and the hardware\" for reasons explained in the project's FAQ:{{r|Wayland FAQ}}\n\n{{quote|What\u2019s different now is that a lot of infrastructure has moved from the [[display server|X server]] into the kernel (memory management, command scheduling, [[mode-setting|mode setting]]) or libraries ([[cairo (graphics)|cairo]], pixman, [[freetype]], [[fontconfig]], [[pango]], etc.), and there is very little left that has to happen in a central server process. ... [An X server has] a tremendous amount of functionality that you must support to claim to speak the X protocol, yet nobody will ever use this. ... This includes code tables, glyph rasterization and caching, [[X logical font description|XLFDs]] (seriously, XLFDs!), and the entire core rendering API that lets you draw stippled lines, polygons, wide arcs and many more state-of-the-1980s style graphics primitives. For many things we've been able to keep the X.org server modern by adding extension such as [[XRandR]], [[XRender]] and [[composite (graphics)|COMPOSITE]] ... With Wayland we can move the X server and all its legacy technology to an optional code path. Getting to a point where the X server is a compatibility option instead of the core rendering system will take a while, but we'll never get there if [we] don\u2019t plan for it.}}\n\nWayland consists of a protocol and a reference implementation named [[#Weston|Weston]]. The project is also developing versions of [[GTK]] and [[Qt (software)|Qt]] that render to Wayland instead of to X. Most applications are expected to gain support for Wayland through one of these libraries without modification to the application.\n\nInitial versions of Wayland have not provided [[network transparency]], though H\u00f8gsberg noted in 2010 that network transparency is possible.{{r|H\u00f8gsberg remotewl}}\nIt was attempted as a [[Google Summer of Code]] project in 2011, but was not successful.{{r|Larabel 2011 remote}}\nAdam Jackson has envisioned providing remote access to a Wayland application by either \"pixel-scraping\" (like [[Virtual Network Computing|VNC]]) or getting it to send a \"rendering command stream\" across the network (as in [[Remote Desktop Protocol|RDP]], [[SPICE (protocol)|SPICE]] or [[X Window System|X11]]).{{r|Jackson remotewl}} As of early 2013, H\u00f8gsberg is experimenting with network transparency using a proxy Wayland server which sends compressed images to the real compositor.{{r|Stone 2013 LCA}}{{r|Willis 2013}} In August 2017, GNOME saw the first such pixel-scraping VNC server implementation under Wayland.{{r|GNOME Remote Desktop}}\n\n==Software architecture==\n\n===Protocol architecture===\n[[File:Wayland protocol architecture.svg|thumb|right|upright=1.6|In the Wayland protocol architecture, a client and a compositor communicate through the Wayland protocol using the reference implementation libraries.]]\n\nWayland protocol follows a [[client\u2013server model]] in which clients are the graphical applications requesting the display of pixel buffers on the screen, and the server (compositor) is the service provider controlling the display of these buffers.\n\nThe Wayland reference implementation has been designed as a two-layer protocol:{{r|hellowl}}\n* A low-level layer or ''wire protocol'' that handles the [[inter-process communication]] between the two involved [[Process (computing)|processes]]{{mdashb}}client and compositor{{mdashb}}and the [[Marshalling (computer science)|marshalling]] of the data that they interchange. This layer is message-based and usually implemented using the kernel IPC services, specifically [[Unix domain sockets]] in the case of [[Linux]] and [[Unix-like]] operating systems.{{r|Wayland doc|page=9}}\n* A high-level layer built upon it, that handles the information that client and compositor need to exchange to implement the basic features of a [[window system]]. This layer is implemented as \"an asynchronous object-oriented protocol\".{{r|Wayland doc|page=9}}\n\nWhile the low-level layer was written manually in [[C (programming language)|C]], the high-level layer is automatically generated from a description of the elements of the protocol stored in [[XML]] format.{{r|wlprotoxml}} Every time the protocol description of this XML file changes, the C source code that implements such protocol can be regenerated to include the new changes, allowing a very flexible, extensible and error-proof protocol.\n\nThe reference implementation of Wayland protocol is split in two [[Library (computing)|libraries]]: a library to be used by Wayland clients called <code>libwayland-client</code> and a library to be used by Wayland compositors called <code>libwayland-server</code>.{{r|Wayland doc|page=57}}\n\n===Protocol overview===\nThe Wayland protocol is described as an \"asynchronous [[object-oriented]] protocol\".{{r|Wayland doc|page=9}} ''Object-oriented'' means that the services offered by the compositor are presented as a series of ''objects'' living on the same compositor. Each object implements an ''interface'' which has a name, a number of methods (called ''requests'') as well as several associated ''events''. Every request and event has zero or more arguments, each one with a name and a [[data type]]. The protocol is ''asynchronous'' in the sense that requests do not have to wait for synchronized replies or [[Acknowledgement (data networks)|ACKs]], avoiding [[round-trip delay time]] and achieving improved performance.\n\nThe Wayland clients can make a request (a method invocation) on some object if the object's interface supports that request. The client must also supply the required data for the arguments of such request. This is the way the clients request services from the compositor. The compositor in turn sends information back to the client by causing the object to emit events (probably with arguments too). These events can be emitted by the compositor as a response to a certain request, or asynchronously, subject to the occurrence of internal events (such as one from an input device) or state changes. The error conditions are also signaled as events by the compositor.{{r|Wayland doc|page=9}}\n\nFor a client to be able to make a request to an object, it first needs to tell the server the ID number it will use to identify that object.{{r|Wayland doc|page=9}} There are two types of objects in the compositor: global objects and non-global objects. Global objects are advertised by the compositor to the clients when they are created (and also when they are destroyed), while non-global objects are usually created by other objects that already exist as part of their functionality.{{r|Paalanen 2014}}\n\nThe interfaces and their requests and events are the core elements that define the Wayland protocol. Each version of the protocol includes a set of interfaces, along with their requests and events, which are expected to be in any Wayland compositor. Optionally, a Wayland compositor may define and implement its own interfaces that support new requests and events, thereby extending functionality beyond the core protocol.{{r|Wayland doc|page=10}} To facilitate changes to the protocol, each interface contains a \"version number\" attribute in addition to its name; this attribute allows for distinguishing variants of the same interface. Each Wayland compositor exposes not only what interfaces are available, but also the supported versions of those interfaces.{{r|Wayland doc|page=12}}\n\n====Wayland core interfaces====\nThe interfaces of the current version of Wayland protocol are defined in the file <tt>protocol/wayland.xml</tt> of the Wayland source code.{{r|wlprotoxml}} This is an [[XML]] file that lists the existing interfaces in the current version, along with their requests, events and other attributes. This set of interfaces is the minimum required to be implemented by any Wayland compositor.\n\nSome of the most basic interfaces of the Wayland protocol are:{{r|Wayland doc|pages=10-12}}\n* ''wl_display''{{snd}} the core global object, a special object to encapsulate the Wayland protocol itself\n* ''wl_registry''{{snd}} the global registry object, in which the compositor registers all the global objects that it wants to be available to all clients\n* ''wl_compositor''{{snd}} an object that represents the compositor, and is in charge of combining the different surfaces into one output\n* ''wl_surface''{{snd}} an object representing a rectangular area on the screen, defined by a location, size and pixel content\n* ''wl_buffer''{{snd}} an object that, when attached to a ''wl_surface'' object, provides its displayable content\n* ''wl_output''{{snd}} an object representing the displayable area of a screen\n* ''wl_pointer'', ''wl_keyboard'', ''wl_touch''{{snd}} objects representing different input devices like [[Pointer (graphical user interfaces)|pointers]] or [[Computer keyboard|keyboards]]\n* ''wl_seat''{{snd}} an object representing a seat (a set of input/output devices) in [[multiseat configuration]]s\n\nA typical Wayland client session starts by opening a connection to the compositor using the ''wl_display'' object. This is a special local object that represents the connection and does not live within the server. By using its interface the client can request the ''wl_registry'' global object from the compositor, where all the global object names live, and bind those that the client is interested in. Usually the client binds at least a ''wl_compositor'' object from where it will request one or more ''wl_surface'' objects to show the application output on the display.{{r|Paalanen 2014}}\n\n====Wayland extension interfaces====\nA Wayland compositor can define and export its own additional interfaces.{{r|Wayland doc|page=10}} This feature is used to extend the protocol beyond the basic functionality provided by the core interfaces, and has become the standard way to implement Wayland protocol extensions. Certain compositors can choose to add custom interfaces to provide specialized or unique features. The Wayland reference compositor, Weston, used them to implement new experimental interfaces as a testbed for new concepts and ideas, some of which later became part of the core protocol (such as ''wl_subsurface'' interface added in Wayland 1.4{{r|wayland 1.4}}).\n\n===Extension protocols to the core protocol===\n\n====XDG-Shell protocol====\nXDG-Shell protocol (see [[freedesktop.org]] for XDG) is an extended way to manage surfaces under Wayland compositors (not only Weston). The traditional way to manipulate (maximize, minimize, fullscreen, etc.) surfaces is to use the wl_shell_*() functions, which are part of the core Wayland protocol and live in <tt>libwayland-client</tt>. An implementation of the xdg-shell protocol, on the contrary, is supposed to be provided by the Wayland compositor. So you will find the <tt>xdg-shell-client-protocol.h</tt> header in the Weston source tree. Each Wayland compositor is supposed to provide its own implementation.\n\n{{As of|2014|6}}, XDG-Shell protocol was not versioned and still prone to changes.\n\nxdg_shell is a protocol aimed to substitute wl_shell in the long term, but will not be part of the Wayland core protocol. It starts as a non-stable API, aimed to be used as a development place at first, and once features are defined as required by several desktop shells, it can be finally made stable. It provides mainly two new interfaces: xdg_surface and xdg_popup. The xdg_surface interface implements a desktop-style window that can be moved, resized, maximized, etc.; it provides a request for creating child/parent relationship. The xdg_popup interface implements a desktop-style popup/menu; an xdg_popup is always transient for another surface, and also has implicit grab.{{r|xdg-shell}}\n\n====IVI-Shell protocol====\nIVI-Shell is an extension to the Wayland core protocol, targeting [[in-vehicle infotainment]] (IVI) devices.<ref>{{cite web|url=https://github.com/GENIVI/wayland-ivi-extension|title=GENIVI/wayland-ivi-extension|publisher=}}</ref>\n\n===Rendering model===\n[[File:The Linux Graphics Stack and glamor.svg|thumb|right|upright=1.6|[[Wayland compositor]] and its clients use [[EGL (API)|EGL]] to draw directly into the [[framebuffer]]; [[X.Org Server]] with [[XWayland]] and [[Glamor (software)|Glamor]].]]\n\nThe Wayland protocol does not include a rendering API.{{r|Wayland doc|page=7}}{{r|Wayland FAQ}}{{r|Vervloesem 2012}}{{r|Barnes slides|p=2}} Instead, Wayland follows a ''direct rendering'' model, in which the client must render the window contents to a buffer shareable with the compositor.{{r|Wayland doc|page=7}} For that purpose, the client can choose to do all the rendering by itself, use a rendering library like [[Cairo (graphics)|Cairo]] or [[OpenGL]], or rely on the rendering engine of high-level widget libraries with Wayland support, such as [[Qt (software)|Qt]] or [[GTK]]. The client can also optionally use other specialized libraries to perform specific tasks, such as [[Freetype]] for [[Font rasterization|font rendering]].\n\nThe resulting buffer with the rendered window contents are stored in a ''wl_buffer'' object. The internal type of this object is implementation dependent. The only requirement is that the content data must be shareable between the client and the compositor. If the client uses a software (CPU) renderer and the result is stored in the [[Main memory|system memory]], then client and compositor can use [[shared memory]] to implement the buffer communication without extra copies. The Wayland protocol already natively provides this kind of shared memory buffer through the ''wl_shm'' and ''wl_shm_pool'' interfaces.{{r|Wayland doc|page=11, 20-21}} The drawback of this method is that the compositor may need to do additional work (usually to copy the shared data to the GPU) to display it, which leads to slower graphics performance.\n\nThe most typical case is for the client to render directly into a [[video memory]] buffer using a hardware (GPU) accelerated API such as [[OpenGL]], [[OpenGL ES]] or [[Vulkan (API)|Vulkan]]. Client and compositor can share this GPU-space buffer using a special handler to reference it.{{r|Paalanen 2012}} This method allows the compositor to avoid additional copies of data to the GPU, resulting in faster graphics performance than using shm buffers, and is therefore the preferred one. The compositor can further optimize the composition of the final scene to be shown on the display by using the same hardware acceleration API as the client.\n\nWhen rendering is completed in a shared buffer, the Wayland client should instruct the compositor to present the rendered contents of the buffer on the display. For this purpose, the client binds the buffer object that stores the rendered contents to the surface object, and sends a \"commit\" request to the surface, transferring the effective control of the buffer to the compositor.{{r|hellowl}} Then the client waits for the compositor to release the buffer (signaled by an event) if it wants to reuse the buffer to render another frame, or it can use another buffer to render the new frame, and, when the rendering is finished, bind this new buffer to the surface and commit its contents.{{r|Wayland doc|page=7}} The procedure used for rendering, including the number of buffers involved and their management, is entirely under the client control.{{r|Wayland doc|page=7}}\n\n==Comparison with other window systems==\n{{See also|Mir (software)#Software architecture|label 1=Mir software architecture|Mir (software)#Controversy|label 2=Controversy around Mir}}\n\n===Differences between Wayland and X===\nThere are several differences between Wayland and X in regards to performance, code maintainability, and security:{{r|Griffith 2013}}\n\n; Architecture : The [[Compositing window manager|composition manager]] is a separate, additional feature in X, while Wayland merges display server and compositor as a single function.{{r|Wayland architecture}}{{r|Vervloesem 2012}} Also, it incorporates some of the tasks of the [[window manager]], which in X is a separate client-side process.{{r|Edge 2012}}\n\n; Compositing : Compositing is optional in X, but mandatory in Wayland. Compositing in X is \"active\"; that is, the compositor must fetch all pixel data, which introduces latency. In Wayland, compositing is \"passive\", which means the compositor receives pixel data directly from clients.{{r|Wayland Compositor|pages=8-11}}\n\n; Rendering : The X server itself is able to perform rendering, although it can also be instructed to display a rendered window sent by a client. In contrast, Wayland does not expose any API for rendering, but delegates to clients such tasks (including the rendering of fonts, widgets, etc.).{{r|Wayland architecture}}{{r|Vervloesem 2012}} Window decorations can be rendered on the client side (e.g., by a graphics toolkit) or on the server side (by the compositor).{{r|Graesslin 2013 decorations}}\n\n; Security : Wayland isolates the input and output of every window, achieving confidentiality, integrity and availability in both cases; the original X design lacks these important security features,{{r|Kerrisk 2012}}{{r|Peres 2014}}{{r|Graesslin 2015 security}} although some extensions have been developed trying to mitigate it.{{r|X.Org Security}}{{r|X11 Security extension}}{{r|XACE}} Also, with the vast majority of the code running in the client, less code needs to run with ''root'' privileges, improving security,{{r|Kerrisk 2012}} although multiple popular Linux distributions now allow X to be run without root privileges.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=Debian-Non-Root-X|title=Debian Moves To Non-Root X.Org Server By Default - Phoronix|website=www.phoronix.com}}</ref><ref>{{cite web|url=https://wiki.gentoo.org/wiki/Non_root_Xorg|title=Non root Xorg - Gentoo Wiki|website=wiki.gentoo.org}}</ref><ref>{{cite web|url=https://wiki.ubuntu.com/X/Rootless|title=X/Rootless - Ubuntu Wiki|website=wiki.ubuntu.com}}</ref><ref>{{cite web|url=https://bugzilla.redhat.com/show_bug.cgi?id=1078902|title=1078902 \u2013 Xorg without root rights|website=bugzilla.redhat.com}}</ref>\n\n; Inter-process communication : The X server provides a basic communication method between X clients, later extended by [[ICCCM]] conventions. This X client-to-client communication is used by window managers and also to implement [[X session manager|X sessions]], [[X Window selection|selections and drag-and-drop]], and other features. The Wayland core protocol does not support communication between wayland clients at all, and the corresponding functionality (if needed) should be implemented by the [[desktop environments]] (like KDE or GNOME), or by a third party (for example, by using native [[Inter-process communication|IPC]] of the underlying operating system).\n\n; Networking : The X Window System is an [[X Window System protocols and architecture|architecture]] that was designed at its core to run over a network. Wayland does not offer network transparency by itself;{{r|Wayland FAQ}} however, a compositor can implement any [[List of remote desktop protocols|remote desktop protocol]] to achieve remote display. In addition, there is research into Wayland image streaming and compression that would provide remote frame buffer access similar to that of [[VNC]].{{r|Willis 2013}}\n\n===Compatibility with X===\n[[File:XWayland.png|thumb|right|upright=1.6|A screenshot showing xwayland]]\n\n[[XWayland]] is an [[X Window System|X Server]] running as a Wayland client, and thus is capable of displaying native X11 client applications in a Wayland compositor environment.{{r|xwayland}} This is similar to the way [[XQuartz]] runs X applications in [[macOS]]\u2019s native windowing system. The goal of XWayland is to facilitate the transition from X Window System to Wayland environments, providing a way to run unported applications in the meantime. XWayland was mainlined into [[X.Org Server]] version 1.16.{{r|xorg 1.16}}\n\nWidget toolkits such as [[Qt (software)|Qt]]5 and [[GTK]]3 can switch their graphical back-end at run time,{{r|H\u00f8gsberg 2011 GTK}} allowing users to choose at [[load time]] whether they want to run the application over X or over Wayland. Qt 5 provides the {{code|-platform}} command-line option{{r|QtWayland}} to that effect, whereas GTK 3 lets users select the desired [[GDK]] back-end by setting the {{code|GDK_BACKEND}} [[Environment variable|Unix environment variable]].{{r|H\u00f8gsberg 2011 GTK}}{{r|GTK Wayland support}}\n\n==Wayland compositors==\n[[File:Window (windowing system).svg|thumb|right|upright=1.6|Typical elements of a [[window (computing)|window]]. Neither Wayland nor X11 specifies what software is responsible for rendering the [[window decoration]]. Weston requires that they are drawn by the client, but [[KWin]] will implement server-side decoration.{{r|Graesslin 2013 decorations}}]]\n\n{{Main|List of display servers#Wayland|l1=List of Wayland compositors}}\n\n[[Display server]]s that implement the Wayland display server protocol are also called ''Wayland compositors'' because they additionally perform the task of a [[compositing window manager]].\n\n* [[#Weston|Weston]]{{snd}} the [[reference implementation]] of a Wayland compositor; Weston implements [[Client-Side_Decoration|client side decorations]]\n* Lipstick{{snd}} mobile [[graphical shell]] framework which implements Wayland compositor; it is used in [[Sailfish OS]], [[Nemo Mobile]] and [[AsteroidOS]]{{r|Edge 2013 jolla}}\n* [[Enlightenment (window manager)|Enlightenment]] has full Wayland support since version 0.20{{r|Larabel 2015 e20}}\n* [[KWin]] has nearly complete Wayland support as of 2018{{citation needed|date=September 2018}}\n* [[Mutter (software)|Mutter]] maintains a separate branch for the integration of Wayland for GNOME 3.9 (in September 2013){{r|mutter wayland}}\n* [[Clutter (software)|Clayland]] \u2013 a simple example Wayland compositor using Clutter\n* [[Westeros (software)|Westeros]] \u2013 a Wayland compositor library that allows applications to create their own Wayland displays, which allows nesting and embedding of third party applications<ref>{{cite web|url=https://github.com/rdkcmf/westeros|accessdate=19 September 2016|title=Westeros Github Mirror}}</ref>\n* [[wlroots]] \u2013 a modular Wayland implementation that functions as a base for other compositors, most notably [[Sway (window manager)|Sway]]<ref>{{cite web|url=https://github.com/swaywm/wlroots|title=swaywm/wlroots|website=GitHub|language=en|access-date=2018-10-28}}</ref><ref>{{cite web|url=https://github.com/swaywm/sway|title=swaywm/sway|website=GitHub|language=en|access-date=2018-10-28}}</ref>\n* [[Sway (window manager)|Sway]] \u2013 a tiling Wayland compositor and a drop-in replacement for the i3 window manager for X11<ref>{{cite web|url=https://swaywm.org/|title=Sway|website=swaywm.org|access-date=2018-12-20}}</ref>\n\n==={{Anchor|WESTON|MAYNARD}}Weston===\n[[File:PostmarketOS and Weston compositor running on Motorola Moto G.jpg|thumb|Weston running on [[postmarketOS]]]]\n\nWeston is the reference implementation of a Wayland compositor<ref>{{cite web|url=https://cgit.freedesktop.org/wayland/weston/plain/README.md?h=6.0 |title=README |website=cgit.freedesktop.org}}</ref> also developed by the Wayland project. It is written in [[C (programming language)|C]] and published under the [[MIT License]]. Weston has official support for only the [[Linux]] operating system due to Weston's dependence on certain features of the [[Linux kernel]], such as [[KMS driver|kernel mode-setting]], [[Graphics Execution Manager]] (GEM), and [[udev]], which have not been implemented in other Unix-like operating systems.{{r|wayland README}} When running on Linux, handling of the input hardware relies on [[evdev]], while the handling of buffers relies on [[Generic Buffer Management]] (GBM). However, in 2013 a prototype port of Weston to [[FreeBSD]] was announced.{{r|Larabel 2013 freebsd}}\n\nWeston supports [[High-bandwidth Digital Content Protection]] (HDCP).<ref>{{cite web|url=https://gitlab.freedesktop.org/wayland/weston/merge_requests/48/diffs?commit_id=05dc6b86431fe040f91ca7b4cf122fa9dc4dd8dd|title=Adding Content protection support in drm-backend (!48) \u00b7 Merge Requests \u00b7 wayland / weston|website=GitLab|language=en|access-date=2019-10-27}}</ref>\n\nWeston relies on GEM to share application buffers between the compositor and applications. It contains a plug-in system of \"shells\" for common desktop features like docks and panels.{{r|Willis 2013}} Clients are responsible for the drawing of their window borders and their decorations. For rendering, Weston can use [[OpenGL ES]]{{r|Paalanen 2012 EGL}} or the pixman library to do [[software rendering]].{{r|Larabel 2013 pixman}} The full OpenGL implementation is not used, because on most current systems, installing the full OpenGL libraries would also install [[GLX]] and other [[X Window System]] support libraries as dependencies.{{r|H\u00f8gsberg wayland GL}}\n\nA remote access interface for Weston was proposed in October 2013 by a [[RealVNC]] employee.{{r|RealVNC remote}}\n\n====Maynard====\n''Maynard'' is a [[graphical shell]] and has been written as a plug-in for Weston, just as the [[GNOME Shell]] has been written as a plug-in to [[Mutter (software)|Mutter]].{{r|maynard}}\n\n===libinput===\n[[File:Libinput for Wayland compositors.svg|thumb|right|upright=1.6|libinput was created to consolidate the input stack across multiple Wayland compositors.]]\n\nThe Weston code for handling input devices (keyboards, pointers, touch screens, etc.) was split into its own separate library, called ''libinput'', for which support was first merged in Weston&nbsp;1.5.{{r|wayland 1.5}}{{r|libinput announce}}\n\nLibinput handles input devices for multiple Wayland compositors and also provides a generic [[X.Org Server]] input driver. It aims to provide one implementation for multiple Wayland compositors with a common way to handle input events while minimizing the amount of custom input code compositors need to include. libinput provides device detection{{clarify|reason=both input and output devices?|date=December 2016}} (via [[udev]]), device handling, input device event processing and abstraction.{{r|libinput}}{{r|XDC2014 libinput}}\n\nVersion 1.0 of libinput followed version 0.21, and included support for tablets, button sets and touchpad gestures. This version will maintain stable API/ABI.{{r|libinput stable API}}\n\nAs GNOME/GTK and [[KDE Frameworks 5]]{{r|autoref0004}} have mainlined the required changes, Fedora&nbsp;22 will replace X.Org's evdev and Synaptics drivers with libinput.{{r|libinput fedora 22}}\n\nWith version 1.16, the [[X.Org Server]] obtained support for the [[libinput]] library in form of a wrapper called <tt>xf86-input-libinput</tt>.{{r|Hutterer 2014}}{{r|libinputfosdem15}}\n\n===Wayland Security Module===\nWayland Security Module is a proposition that resembles the [[Linux Security Module]] interface found in the [[Linux kernel]].{{r|XDC2014 wayland security}}\n\nSome applications (especially the ones related to [[accessibility]]) require privileged capabilities that should work across different Wayland compositors. Currently,{{When|date=October 2014}} applications under Wayland are generally unable to perform any sensitive tasks such as taking screenshots or injecting input events. Wayland developers are actively looking for feasible ways to handle privileged clients securely and then designing privileged interfaces for them.\n\nWayland Security Module is a way to delegate security decisions within the compositor to a centralized security decision engine.{{r|XDC2014 wayland security}}\n\n==Adoption==\nThe Wayland protocol is designed to be simple so that additional protocols and interfaces need to be defined and implemented to achieve a holistic windowing system. As of July 2014 these additional interfaces were being worked on. So, while the toolkits already fully support Wayland, the developers of the [[graphical shell]]s are cooperating with the Wayland developers creating the necessary additional interfaces.\n\n===Desktop Linux distributions===\n{{Outdated section|date=March 2020}}\nIn general, out-of-the-box support for a full desktop running Wayland in major Linux distributions is still in early stages.{{When?|date=April 2019}} Most Linux distributions that ship version 3.20 or newer of the Gnome desktop environment support manually installing a Wayland session, and in case of Gnome 3.22 or newer might default to Wayland. Notable early adopters that provide Wayland out of the box are:\n* [[Fedora Linux|Fedora]] starting with version 25 uses Wayland for the default GNOME 3.22 desktop session, with [[X.Org Server|X.Org]] as a fallback if the graphics driver cannot support Wayland.\n* RebeccaBlackOS is a [[live USB]] Debian-based<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=RBOS-2016-02-08|title=Wayland Live OS Is Now Based On Debian Testing, Working KDE Wayland Support |publisher=Phoronix}}</ref> Linux distribution that allows a convenient way to try out a real Wayland desktop without having to make any modifications to the main operating system of the computer.<ref>{{cite web|url=https://sourceforge.net/projects/rebeccablackos/|title=RebeccaBlackOS|publisher=Sourceforge}}</ref> It has been used since as early as 2012 to showcase Wayland.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=MTA3Njk|title=Trying Out Wayland With Rebecca Black |publisher=Phoronix}}</ref><ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=MTUzNTU|title=New Wayland Live CD Has A Lot Of Features |publisher=Phoronix}}</ref>\n* [[Ubuntu (operating system)|Ubuntu]] ships Wayland as default in Ubuntu 17.10 (Artful Aardvark).<ref>{{cite web|url=https://wiki.ubuntu.com/ArtfulAardvark/ReleaseNotes#Ubuntu_Desktop|title=ReleaseNotes for Ubuntu 17.10|publisher=Canonical}}</ref> Ubuntu reverted to X.Org for Ubuntu 18.04 LTS, as Wayland still has issues with screen sharing and remote desktop applications, and does not recover as well from window manager crashes.<ref>{{cite web|url=https://www.neowin.net/news/ubuntu-1804-will-revert-to-long-in-the-tooth-xorg|title=Ubuntu 18.04 will revert to long-in-the-tooth Xorg|publisher=}}</ref><ref>{{cite web |url=https://insights.ubuntu.com/2018/01/26/bionic-beaver-18-04-lts-to-use-xorg-by-default/| title=Bionic Beaver 18.04 LTS to use Xorg by default |publisher=Canonical}}</ref>\n* [[Red Hat Enterprise Linux]] ships Wayland as the default session in version 8.<ref>{{cite web|url=https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.0_release_notes/new-features|title=Chapter 4. New features|website=Red Hat Customer Portal|language=en|access-date=2019-05-08}}</ref>\n* [[Debian]] ships Wayland as the default session for GNOME since version 10.<ref>{{cite web|url=https://wiki.debian.org/NewInBuster|title=NewInBuster - Debian Wiki|website=wiki.debian.org|access-date=2019-07-15}}</ref>\n* [[Slackware Linux]] included Wayland on Feb 20th, 2020<ref>{{cite web|url=http://www.slackware.com/changelog/current.php?cpu=x86_64|title=Slackware ChangeLogs|publisher=Slackware Linux|access-date=2020-02-26}}</ref> for the development version, -current, which will eventually become version 15.0.\n\n===Toolkit support===\nToolkits supporting Wayland include the following:\n* [[Clutter (software)|Clutter]] has complete Wayland support.{{r|clutter 1.6}}{{r|Bradford 2011}}{{r|clutter 1.16}}\n* [[Enlightenment Foundation Libraries|EFL]] has complete Wayland support, except for selection.{{r|efl wayland}}\n* [[GTK]] 3.20 has complete Wayland support.{{r|gtk+ wayland}}\n* [[Qt (framework)|Qt]] 5 has complete Wayland support, and can be used to write both Wayland compositors and Wayland clients.\n* [[Simple DirectMedia Layer|SDL]] support for Wayland debuted with the 2.0.2 release{{r|sdl2 wayland}} and was enabled by default since version 2.0.4.{{r|Larabel 2016 SDL2}}\n* [[GLFW]] 3.2 has Wayland support.{{r|glfw wayland}}\n* [[FreeGLUT]] has initial Wayland support.{{r|freeglut wayland}}\n\n===Desktop environments===\nDesktop environments in process of being ported from X to Wayland include [[GNOME]],{{r|GNOME wl}} [[KDE Plasma 5]]{{r|KDE wl}} and [[Enlightenment (software)|Enlightenment]].{{r|enlightenment wl}}\n\nIn November 2015, Enlightenment e20 was announced with full Wayland support.{{r|e20 wl}}{{r|Larabel 2015 e20}}{{r|FOSDEM2016 wl}} GNOME 3.20 was the first version to have a full Wayland session.{{r|GNOME release plan}} GNOME 3.22 now defaults to Wayland.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=article&item=gnome-322-features&num=1|title=A Look At The Exciting Features/Improvements Of GNOME 3.22 |publisher=Phoronix}}</ref> GNOME 3.24 will ship the NVidia patches developed for Fedora 25.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=GNOME-Mutter-Mainline-EGLStream|title=GNOME Lands Mainline NVIDIA Wayland Support Using EGLStreams |publisher=Phoronix}}</ref>\n\nWayland support for KDE Plasma was delayed until the release of Plasma 5,{{r|vizzzion}} though previously [[KWin]] 4.11 got an experimental Wayland support.{{r|Larabel 2013 kwin}} The version 5.4 of Plasma was the first with a Wayland session.{{r|Graesslin 2015}}\n\n===Other software===\nOther software supporting Wayland includes the following:\n* [[Intelligent Input Bus]] is working on Wayland support, it could be ready for Fedora 22.{{r|Schaller 2014}}\n* [[RealVNC]] published a Wayland developer preview in July 2014.{{r|RealVNC remote}}{{r|autoref0005}}{{r|autoref0006}}\n* [[Maliit]] is an [[input method]] framework that runs under Wayland.{{r|autoref0007}}{{r|autoref0008}}{{r|Maliit}}\n* [[kmscon]] supports Wayland with wlterm.{{r|kmscon wl}}\n* [[Mesa (computer graphics)|Mesa]] has Wayland support integrated.{{r|Hillesley 2012 p3}}\n* [[Eclipse (software)|Eclipse]] was made to run on Wayland during a [[Google Summer of Code|GSoC]]-Project in 2014.{{r|eclipse wl}}\n* The [[Vulkan WSI]] (Window System Interface) is a set of API calls serve a similar purpose as EGL does for OpenGL ES or GLX for OpenGL. Vulkan WSI includes support for Wayland from day one: VK_USE_PLATFORM_WAYLAND_KHR. Vulkan clients can run on unmodified Wayland servers, including Weston, GENIVI LayerManager, Mutter / GNOME Shell, Enlightenment, and more. The WSI allows applications to discover the different GPUs on the system, and display the results of GPU rendering to a window system.{{r|Collabora vulkan}}\n* [[SPURV (compatibility layer)|SPURV]], a compatibility layer for Android applications to run on GNU/Linux distributions using Wayland\n\n===Mobile and embedded hardware===\nMobile and embedded hardware supporting Wayland includes the following:\n* [[GENIVI Alliance]]: The GENIVI automotive industry consortium for [[in-vehicle infotainment]] (IVI) supports Wayland.{{r|genivi}}\n* [[Raspberry Pi]]: The [[Raspberry Pi Foundation]] in collaboration with [[Collabora]] released [[Maynard (software)|Maynard]] and work on improving performance and memory consumption, but do not expect to be able to replace X11 as the default display server until later.{{r|Collabora RPi}}{{r|RPi wayland}}\n* [[Jolla]]: Smartphones from Jolla use Wayland. It is also used as standard when Linux [[Sailfish OS]] is used with hardware from other vendors or when it is installed into Android devices by users.{{r|auto}}{{r|auto1}}{{r|auto2}}\n* [[Tizen]]: Tizen up to 2.x supports Wayland in [[in-vehicle infotainment]] (IVI) setups{{r|tizen 2.0}} and from 3.0 onward defaults to Wayland.{{r|tizen 3.0}}<ref>{{cite web\n | url        = https://arstechnica.com/gadgets/2017/05/the-samsung-z4-is-tizens-new-flagship-smartphone/\n | title      = The Samsung Z4 is Tizen\u2019s new flagship smartphone\n | last       = Amadeo\n | first      = Ron\n | work       = [[Ars Technica]]\n | accessdate = 13 May 2017}}</ref>\n\n==History==\n[[File:Linux graphics drivers DRI Wayland.svg|thumb|right|upright=1.6|'''Wayland''' uses [[Direct Rendering Manager|direct rendering]] over [[EGL (API)|EGL]].]]\n\nKristian H\u00f8gsberg, a [[Linux]] graphics and [[X.Org Server|X.Org]] [[Software developer|developer]] who previously worked on [[AIGLX]] and [[Direct Rendering Infrastructure|DRI2]], started Wayland as a spare-time project in 2008 while working for [[Red Hat]].{{r|H\u00f8gsberg 2008}}{{r|FOSDEM2012 interview}}{{r|Hillesley 2012}}{{r|LPC2009}} His stated goal was a system in which \"every frame is perfect, by which I mean that applications will be able to control the rendering enough that we'll never see tearing, lag, redrawing or flicker.\" H\u00f8gsberg was driving through the town of [[Wayland, Massachusetts]] when the underlying concepts \"crystallized\", hence the name.{{r|Hillesley 2012}}{{r|Jenkins 2011}}\n\nIn October 2010, Wayland became a [[freedesktop.org]] project.{{r|Larabel 2010 freedesktop}}{{r|wayland freedesktop}} As part of the migration the prior [[Google Groups|Google Group]] was replaced by the ''wayland-devel'' mailing list as the project's central point of discussion and development.\n\nThe Wayland client and server libraries were initially released under the [[MIT License]],{{r|original license}} while the reference compositor Weston and some example clients used the [[GNU General Public License version 2]].{{r|license clarification}} Later all the GPL code [[Software relicensing|was relicensed]] under the MIT license \"to make it easier to move code between the reference implementation and the actual libraries\".{{r|license change GPL}} In 2015 it was discovered that the license text used by Wayland was a slightly different and older version of the MIT license, and the license text was updated to the current version used by the [[X.Org Server|X.Org project]] (known as [[Expat License|MIT Expat License]]).{{r|License}}\n\nWayland works with all [[Mesa (computer graphics)|Mesa-compatible]] drivers with [[DRI2]] support{{r|Hillesley 2012 p3}} as well as [[Android (operating system)|Android]] drivers via the [[Hybris (software)|Hybris project]].{{r|wayland part1}}{{r|wayland part2}}{{r|Larabel 2013 Jolla}}\n\nThe developers of Wayland are largely current [[X.Org Server]] developers.{{r|Stone 2013 LCA}}\n\n===Releases===\n{| class=\"wikitable sortable collapsible text-align:center\"\n|+ Major Wayland and Weston releases{{r|wayland releases}}\n|-\n! rowspan=\"2\" | Version\n! rowspan=\"2\" | Date\n! colspan=\"2\" | Main features\n|-\n! Wayland\n! Weston\n|-\n| {{Version|o|0.85|sortKey=0.85}}\n| {{dts|format=dmy|2012|02|09}}{{r|wayland 0.85}}\n| colspan=\"2\" style=\"text-align: center;\" | First release.\n|-\n| {{Version|o|0.95|sortKey=0.95}}\n| {{dts|format=dmy|2012|07|24}}{{r|wayland 0.95}}\n| Began API stabilization.\n|\n|-\n| {{Version|o|1.0|sortKey=1.0}}\n| {{dts|format=dmy|2012|10|22}}{{r|wayland 1.0}}{{r|Scherschel wayland 1.0}}\n| Stable wayland-client API.\n|\n|-\n| {{Version|o|1.1|sortKey=1.1}}\n| {{dts|format=dmy|2013|04|15}}{{r|Larabel wayland 1.1}}{{r|wayland 1.1}}\n|\n| Software rendering.{{r|Larabel 2013 pixman}} FBDEV, RDP backends.\n|-\n| {{Version|o|1.2|sortKey=1.2}}\n| {{dts|format=dmy|2013|07|12}}{{r|Larabel wayland 1.2}}{{r|wayland 1.2}}\n| Stable wayland-server API.\n| Color management. Subsurfaces. [[Raspberry Pi]] backend.\n|-\n| {{Version|o|1.3|sortKey=1.3}}\n| {{dts|format=dmy|2013|10|11}}{{r|wayland 1.3}}\n| More pixel formats. Support for language bindings.\n| [[Android (operating system)|Android]] driver [[Hybris (software)#Features|support]] via [[libhybris]].\n|-\n| {{Version|o|1.4|sortKey=1.4}}\n| {{dts|format=dmy|2014|01|23}}{{r|wayland 1.4}}\n| New wl_subcompositor and wl_subsurface interfaces.\n| Multiple framebuffer formats. logind support for rootless Weston.\n|-\n| {{Version|o|1.5|sortKey=1.5}}\n| {{dts|format=dmy|2014|05|20}}{{r|wayland 1.5}}\n|\n| libinput. Fullscreen shell.\n|-\n| {{Version|o|1.6|sortKey=1.6}}\n| {{dts|format=dmy|2014|09|19}}{{r|wayland 1.6}}\n|\n| libinput by default.\n|-\n| {{Version|o|1.7|sortKey=1.7}}\n| {{dts|format=dmy|2015|02|14}}{{r|wayland 1.7}}{{r|weston 1.7}}\n|\n| Support for the Wayland presentation extension and for surface roles. [[In car entertainment|IVI]] shell protocol.\n|-\n| {{Version|o|1.8|sortKey=1.8}}\n| {{dts|format=dmy|2015|06|02}}{{r|wayland 1.8}}{{r|weston 1.8}}\n| Separated headers for core and generated protocol.\n| Repaint scheduling. Named outputs. Output transformations. Surface-shooting API.\n|-\n| {{Version|o|1.9|sortKey=1.9}}\n| {{dts|format=dmy|2015|09|21}}{{r|wayland 1.9}}{{r|weston 1.9}}\n| Updated license.\n| Updated license. New test framework. Triple-head DRM compositor. linux_dmabuf extension.\n|-\n| {{Version|o|1.10|sortKey=1.10}}\n| {{dts|format=dmy|2016|02|17}}{{r|wayland 1.10}}{{r|weston 1.10}}\n| Drag-and-drop functionality, grouped pointer events.{{r|autoref0010}}\n| Video 4 Linux 2, touch input, debugging improvements.{{r|Larabel wayland 1.10}}\n|-\n| {{Version|o|1.11|sortKey=1.11}}\n| {{dts|format=dmy|2016|06|01}}{{r|wayland 1.11}}{{r|weston 1.11}}\n| New backup loading routine, new setup logic.\n| Proxy wrappers, shared memory changes, Doxygen-generated HTML docs.\n|-\n| {{Version|o|1.12|sortKey=1.12}}\n| {{dts|format=dmy|2016|09|21}}{{r|wayland 1.12}}{{r|weston 1.12}}\n| Debugging support improved.\n| libweston and libweston-desktop. Pointer locking and confinement. Relative pointer support.\n|-\n| {{Version|o|1.13|sortKey=1.13}}\n| {{dts|format=dmy|2017|02|24}}{{r|wayland 1.13}}{{r|weston 2.0}}\n|\n| The ABI of Weston has been changed, thus the new version was named 2.0.0 rather than 1.13.0.\n|-\n| {{Version|o|1.14|sortKey=1.14}}\n| {{dts|format=dmy|2017|08|08}}{{r|wayland 1.14}}{{r|weston 3.0}}\n|\n| Weston 3.0.0 was released at the same time.\n|-\n| {{Version|o|1.15|sortKey=1.15}}\n| {{dts|format=dmy|2018|04|09}}{{r|wayland 1.15}}{{r|weston 4.0}}\n|\n| Weston 4.0.0 was released at the same time.\n|-\n| {{Version|o|1.16|sortKey=1.16}}\n| {{dts|format=dmy|2018|08|24}}{{r|wayland 1.16}}{{r|weston 5.0}}\n|\n| Weston 5.0.0 was released at the same time.\n|-\n| {{Version|o|1.17|sortKey=1.17}}\n| {{dts|format=dmy|2019|03|20}}{{r|wayland 1.17}}{{r|weston 6.0}}\n|\n| Weston 6.0.0 was released at the same time.\n|-\n| {{Version|o|1.18|sortKey=1.18}}\n| {{dts|format=dmy|2019|08|02}}{{r|wayland 1.18}}{{r|weston 7.0}}\n|\n| Weston 7.0.0 was released one month later.\n|-\n| {{Version|o|1.19|sortKey=1.19}}\n| {{dts|format=dmy|2020|02|29}}{{r|wayland 1.19}}{{r|weston 8.0}}\n|\n| Weston 8.0.0.\n|-\n| {{Version|c|1.20|sortKey=1.20}}\n| {{dts|format=dmy|2020|02|29}}{{r|wayland 1.20}}{{r|weston 8.0}}\n|\n|\n|-\n| colspan=4 | {{Version|l|show=11101}}\n|}\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Mir (software)]]\n* [[X Window System]]\n\n==References==\n{{Reflist|30em|refs=\n\n<!-- official documentation -->\n\n<ref name=\"wllicense\">{{cite web|url=https://cgit.freedesktop.org/wayland/wayland/tree/COPYING|title=wayland/wayland: root/COPYING|website=freedesktop.org|accessdate=14 June 2015}}</ref>\n<ref name=\"Wayland homepage\">{{cite web|title=Wayland|url=https://wayland.freedesktop.org/|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"Wayland FAQ\">{{cite web|title=Wayland FAQ|url=https://wayland.freedesktop.org/faq.html|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"Wayland architecture\">{{cite web|title=Wayland Architecture|url=https://wayland.freedesktop.org/architecture.html|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"xwayland\">{{cite web|title=X Clients under Wayland (XWayland)|url=https://wayland.freedesktop.org/xserver.html|publisher=Wayland project|accessdate=18 July 2014}}</ref>\n<ref name=\"wayland README\">{{cite web|url=https://cgit.freedesktop.org/wayland/wayland/plain/README|title=README file from the Wayland source code repository|work=[[freedesktop.org]]}}</ref>\n<ref name=\"wayland releases\">{{cite web|url=https://wayland.freedesktop.org/releases.html|title=Wayland|publisher=Wayland.freedesktop.org|date=|accessdate=15 July 2013}}</ref>\n<ref name=\"wlprotoxml\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=protocol/wayland.xml|url=https://cgit.freedesktop.org/wayland/wayland/tree/protocol/wayland.xml|website=FreeDesktop.org|accessdate=25 July 2014}}</ref>\n\n<ref name=\"Wayland doc\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Wayland Documentation 1.3|url=https://wayland.freedesktop.org/docs/pdf/Documentation-1.3-Wayland-en-US.pdf|accessdate=16 March 2016}}</ref>\n\n<!-- articles -->\n\n<ref name=\"Bradford 2011\">{{cite web|last1=Bradford|first1=Rob|title=Clutter & Cogl Wayland update|url=http://www.robster.org.uk/2011/12/16/clutter-cogl-wayland-update/|date=16 December 2011|accessdate=9 March 2016|quote=The Clutter client side support is basically complete}}</ref>\n<ref name=\"Corbet 2010\">{{cite web|last1=Corbet|first1=Jonathan|title=LPC: Life after X|url=https://lwn.net/Articles/413335/|website=LWN.net|date=5 November 2010|accessdate=17 April 2016}}</ref>\n<ref name=\"Edge 2012\">{{cite web|last1=Edge|first1=Jake|title=LFCS 2012: X and Wayland|url=https://lwn.net/Articles/491509/|website=LWN.net|date=11 April 2012|accessdate=17 April 2016}}</ref>\n<ref name=\"Edge 2013 jolla\">{{cite web|last1=Edge|first1=Jake|title=Jolla: Sailfish OS, Qt, and open source|url=https://lwn.net/Articles/561463/|website=LWN.net|date=31 July 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2013 decorations\">{{cite web|last1=Graesslin|first1=Martin|title=Client Side Window Decorations and Wayland|url=https://blog.martin-graesslin.com/blog/2013/02/client-side-window-decorations-and-wayland/|date=7 February 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2015\">{{cite web|last1=Graesslin|first1=Martin|title=Four years later|url=https://blog.martin-graesslin.com/blog/2015/06/four-years-later/|date=29 June 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2015 security\">{{cite web|last1=Graesslin|first1=Martin|title=Looking at the security of Plasma/Wayland|url=https://blog.martin-graesslin.com/blog/2015/11/looking-at-the-security-of-plasmawayland/|date=23 November 2015|accessdate=18 April 2016}}</ref>\n<ref name=\"Griffith 2013\">{{cite web|last1=Griffith|first1=Eric|title=The Wayland Situation: Facts About X vs. Wayland|url=https://www.phoronix.com/scan.php?page=article&item=x_wayland_situation|website=Phoronix.com|date=7 June 2013|accessdate=17 April 2016|page=2}}</ref>\n<ref name=\"Hillesley 2012\">{{cite web|last1=Hillesley|first1=Richard|title=Wayland - Beyond X|url=http://www.h-online.com/open/features/Wayland-Beyond-X-1432046.html|website=The H Open|publisher=Heise Media UK|date=13 February 2012|accessdate=8 March 2016}}</ref>\n<ref name=\"Hillesley 2012 p3\">Hillesley, p. 3.</ref>\n<ref name=\"H\u00f8gsberg 2008\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Premature publicity is better than no publicity|url=https://hoegsberg.blogspot.com/2008/11/premature-publicity-is-better-than-no.html|date=3 November 2008|accessdate=6 April 2016}}</ref>\n<ref name=\"H\u00f8gsberg 2011 GTK\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Multiple backends for GTK|url=https://hoegsberg.blogspot.com/2011/01/multiple-backends-for-gtk.html|date=3 January 2011|accessdate=10 March 2016}}</ref>\n<ref name=\"Hutterer 2014\">{{cite web|last1=Hutterer|first1=Peter|title=libinput - a common input stack for Wayland compositors and X.Org drivers|url=https://who-t.blogspot.com/2014/09/libinput-common-input-stack-for-wayland.html|date=24 September 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Jenkins 2011\">{{cite web|last1=Jenkins|first1=Evan|title=The Linux graphics stack from X to Wayland|url=https://arstechnica.com/information-technology/2011/03/the-linux-graphics-stack-from-x-to-wayland/|website=Ars Technica|date=22 March 2011|accessdate=17 April 2016}}</ref>\n<ref name=\"Kerrisk 2012\">{{cite web|last1=Kerrisk|first1=Michael|title=XDC2012: Graphics stack security|url=https://lwn.net/Articles/517375/|website=LWN.net|date=25 September 2012|accessdate=13 April 2016}}</ref>\n<ref name=\"Larabel 2010 freedesktop\">{{cite web|last1=Larabel|first1=Michael|title=Wayland Becomes A FreeDesktop.org Project|url=https://www.phoronix.com/scan.php?page=news_item&px=ODczNQ|website=Phoronix.com|date=29 October 2010|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2011 remote\">{{cite web|last1=Larabel|first1=Michael|title=Remote Wayland Server Project: Does It Work Yet?|url=https://www.phoronix.com/scan.php?page=news_item&px=OTgxMQ|website=Phoronix.com|date=18 August 2011|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 pixman\">{{cite web|last1=Larabel|first1=Michael|title=A Software-Based Pixman Renderer For Wayland's Weston|url=https://www.phoronix.com/scan.php?page=news_item&px=MTI2Nzg|website=Phoronix.com|date=6 January 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 freebsd\">{{cite web|last1=Larabel|first1=Michael|title=Wayland Begins Porting Process To FreeBSD|url=https://www.phoronix.com/scan.php?page=news_item&px=MTMwMzE|website=Phoronix.com|date=16 February 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 Jolla\">{{cite web|last1=Larabel|first1=Michael|title=Jolla Brings Wayland Atop Android GPU Drivers|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM0OTE|website=Phoronix.com|date=11 April 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.1\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.1 Officially Released With Weston 1.1|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM1Mjk|website=Phoronix.com|date=16 April 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 kwin\">{{cite web|last1=Larabel|first1=Michael|title=KDE 4.11 Beta Released, Works On Wayland|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM4OTE|website=Phoronix.com|date=14 June 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.2\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.2.0 Released, Joined By Weston Compositor|url=https://www.phoronix.com/scan.php?page=news_item&px=MTQwOTg|website=Phoronix.com|date=13 July 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2015 license\">{{cite web|last1=Larabel|first1=Michael|title=Wayland's MIT License To Be Updated/Corrected|url=https://www.phoronix.com/scan.php?page=news_item&px=Wayland-License-MIT-Update|website=Phoronix.com|date=10 June 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2015 e20\">{{cite web|last1=Larabel|first1=Michael|title=Enlightenment 0.20 Arrives With Full Wayland Support & Better FreeBSD Support|url=https://www.phoronix.com/scan.php?page=news_item&px=Enlightenment-0.20-Released|website=Phoronix.com|date=30 November 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2016 SDL2\">{{cite web|last1=Larabel|first1=Michael|title=SDL 2.0.4 Was Quietly Released Last Week With Wayland & Mir By Default|url=https://www.phoronix.com/scan.php?page=news_item&px=SDL-2.0.4-Released|website=Phoronix.com|date=9 January 2016|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.10\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.10 Officially Released|url=https://www.phoronix.com/scan.php?page=news_item&px=Wayland-1.10-Released|website=Phoronix.com|date=16 February 2016|accessdate=17 April 2016}}</ref>\n<ref name=\"Paalanen 2012 EGL\">{{cite web|last1=Paalanen|first1=Pekka|title=What does EGL do in the Wayland stack|url=https://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html|date=10 March 2012|accessdate=19 May 2016}}</ref>\n<ref name=\"Paalanen 2012\">{{cite web|last1=Paalanen|first1=Pekka|title=On supporting Wayland GL clients and proprietary embedded platforms|url=https://ppaalanen.blogspot.com/2012/11/on-supporting-wayland-gl-clients-and.html|date=21 November 2012|accessdate=6 April 2016|quote=Buffer sharing works by creating a handle for a buffer, and passing that handle to another process which then uses the handle to make the GPU access again the same buffer.}}</ref>\n<ref name=\"Paalanen 2014\">{{cite web|last1=Paalanen|first1=Pekka|title=Wayland protocol design: object lifespan|url=https://ppaalanen.blogspot.com/2014/07/wayland-protocol-design-object-lifespan.html|date=25 July 2014|accessdate=6 April 2016}}</ref>\n<ref name=\"Peres 2014\">{{cite web|last1=Peres|first1=Martin|title=Wayland Compositors - Why and How to Handle Privileged Clients!|url=https://mupuf.org/blog/2014/02/19/wayland-compositors-why-and-how-to-handle/|date=21 February 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Schaller 2014\">{{cite web|last1=Schaller|first1=Christian|title=Wayland in Fedora Update|url=https://blogs.gnome.org/uraeus/2014/07/03/wayland-in-fedora-update/|website=blogs.gnome.org|date=3 July 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Scherschel wayland 1.0\">{{cite web|last1=Scherschel|first1=Fabian|title=Wayland's 1.0 milestone fixes graphics protocol|url=http://www.h-online.com/open/news/item/Wayland-s-1-0-milestone-fixes-graphics-protocol-1734638.html|website=The H Open|publisher=Heise Media UK|date=23 October 2012|accessdate=17 April 2016}}</ref>\n<ref name=\"Vervloesem 2012\">{{cite web|last1=Vervloesem|first1=Koen|title=FOSDEM: The Wayland display server|url=https://lwn.net/Articles/481490/|website=LWN.net|date=15 February 2012|accessdate=9 May 2016}}</ref>\n<ref name=\"Willis 2013\">{{cite web|last1=Willis|first1=Nathan|title=LCA: The ways of Wayland|url=https://lwn.net/Articles/536862/|website=LWN.net|accessdate=19 May 2016|date=13 February 2013}}</ref>\n\n<ref name=\"LPC2009\">{{cite web|url=https://linuxplumbersconf.org/ocw/users/73|title=Wayland \u2013 A New Display Server for Linux|last=H\u00f8gsberg|first=Kristian|publisher=Linux Plumbers Conference, 2009}}</ref>\n<ref name=\"FOSDEM2012 interview\">{{cite web|title=Interview: Kristian H\u00f8gsberg|url=https://archive.fosdem.org/2012/interview/kristian-hogsberg.html|website=FOSDEM Archive|accessdate=8 March 2016|date=29 January 2012}}</ref>\n<ref name=\"XDC2014 libinput\">{{cite speech|title=Consolidating the input stacks with libinput|first=Peter|last=Hutterer|event=The X.Org Developer Conference 2014|location=Bordeaux|date=8 October 2014|url=https://www.x.org/wiki/Events/XDC2014/XDC2014HuttererLibInput/|accessdate=14 January 2020}}</ref>\n<ref name=\"XDC2014 wayland security\">{{cite speech|title=Security in Wayland-based Desktop Environments: Privileged Clients, Authorization, Authentication and Sandboxing!|first1=Steve|last1=Dodier-Lazaro|first2=Martin|last2=Peres|event=The X.Org Developer Conference 2014|location=Bordeaux|date=9 October 2014|url=https://phd.mupuf.org/publication/2014/10/09/security-in-wayland-based-desktop-environments/|accessdate=18 April 2016}}</ref>\n<ref name=\"FOSDEM2016 wl\">{{cite web|title=The Enlightenment of Wayland|url=https://fosdem.org/2016/schedule/event/enlightenment_of_wayland/|website=FOSDEM.org|accessdate=8 March 2016}}</ref>\n\n<ref name=\"hellowl\">{{cite web|title=The Hello Wayland Tutorial|url=https://hdante.wordpress.com/2014/07/08/the-hello-wayland-tutorial/|accessdate=25 July 2014}}</ref>\n<ref name=\"QtWayland\">{{cite web|title=QtWayland|url=https://wiki.qt.io/QtWayland|website=Qt Wiki|accessdate=9 March 2016}}</ref>\n<ref name=\"GTK Wayland support\">{{cite web|title=Full Wayland support in GTK|url=https://wiki.gnome.org/Initiatives/Wayland/GTK%2B|website=GNOME wiki|accessdate=10 March 2016}}</ref>\n<ref name=\"mutter wayland\">{{cite web|url=https://download.gnome.org/sources/mutter-wayland/|title=Index of /sources/mutter-wayland|website=download.gnome.org}}</ref>\n<ref name=\"maynard\">{{cite web|url=https://blog.barisione.org/2014-04/maynard/|title=Maynard announcement|date=16 April 2014|accessdate=16 April 2014}}</ref>\n<ref name=\"libinput\">{{cite web|title=libinput|url=https://www.freedesktop.org/wiki/Software/libinput/|publisher=Freedesktop.org|accessdate=21 May 2014}}</ref>\n<ref name=\"autoref0004\">{{cite web|url=https://rajeeshknambiar.wordpress.com/2015/02/22/libinput-support-added-to-touchpad-kcm/|title=Libinput support added to Touchpad KCM|date=22 February 2015}}</ref>\n<ref name=\"auto\">{{cite web|url=http://linuxg.net/the-first-jolla-smartphone-runs-with-wayland/|title=The First Jolla Smartphone Runs With Wayland|publisher=LinuxG.net|date=14 July 2013|accessdate=8 October 2013}}</ref>\n<ref name=\"auto1\">{{cite tweet|user=VDVsx|author=VDVsx|number=356029626759385088|date=13 July 2013|title=#sailfishos main components diagram. #Qt5 #Wayland #JollaHQ #Akademy}}</ref>\n<ref name=\"auto2\">{{cite tweet|user=JollaHQ|author=Jolla|number=356034168351756290|date=13 July 2013|title=@faenil @PeppeLaKappa @VDVsx our first Jolla will ship with wayland, yes}}</ref>\n<ref name=\"efl wayland\">{{cite web|url=http://www.chaosreigns.com/wiki/Wayland_State#The_state_of_Wayland.2C_2013-01-26|accessdate=6 March 2013|title=Wayland \u2013 Enlightenment|url-status=dead|archiveurl=https://web.archive.org/web/20130329104629/http://www.chaosreigns.com/wiki/Wayland_State#The_state_of_Wayland.2C_2013-01-26|archivedate=29 March 2013|df=dmy-all}}</ref>\n<ref name=\"gtk+ wayland\">{{cite web|url=https://wiki.gnome.org/Projects/GTK%2B/Roadmap|title=GTK Roadmap|accessdate=8 March 2016}}</ref>\n<ref name=\"sdl2 wayland\">{{cite web|last=Lantinga|first=Sam|title=SDL 2.0.2 RELEASED!|url=https://forums.libsdl.org/viewtopic.php?t=10088|date=8 March 2014|publisher=SDL Project|accessdate=18 March 2014}}</ref>\n<ref name=\"glfw wayland\">{{cite web|last=Berglund|first=Camilla|title=Implementation for Wayland \u00b7 Issue #106 \u00b7 glfw/glfw \u00b7 GitHub|url=https://github.com/glfw/glfw/issues/106#issuecomment-39872275|date=8 April 2014|accessdate=14 August 2014}}</ref>\n<ref name=\"GNOME wl\">{{cite web|title=GNOME Initiatives - Wayland|url=https://wiki.gnome.org/Initiatives/Wayland|website=GNOME Wiki|accessdate=8 March 2016}}</ref>\n<ref name=\"KDE wl\">{{cite web|title=KWin/Wayland|url=https://community.kde.org/KWin/Wayland|website=KDE Community Wiki|accessdate=8 March 2016}}</ref>\n<ref name=\"enlightenment wl\">{{cite web|title=Enlightenment - Wayland|url=https://www.enlightenment.org/about-wayland|website=Enlightenment.org|accessdate=8 March 2016}}</ref>\n<ref name=\"e20 wl\">{{cite web|title=Enlightenment DR 0.20.0 Release|url=https://phab.enlightenment.org/phame/post/view/167/enlightenment_dr_0.20.0_release/|website=Enlightenment.org|accessdate=8 March 2016}}</ref>\n<ref name=\"GNOME release plan\">{{cite web|title=ReleasePlanning/FeaturesPlans|url=https://wiki.gnome.org/ReleasePlanning/FeaturePlans|publisher=GNOME Project|accessdate=31 May 2015}}</ref>\n<ref name=\"vizzzion\">{{cite web|url=http://vizzzion.org/blog/2014/07/plasmas-road-to-wayland/|title=Plasma\u2019s Road to Wayland|date=25 July 2014}}</ref>\n<ref name=\"autoref0005\">{{cite web|url=http://www.realvnc.com/products/vnc/wayland/|title=VNC\u00ae Wayland Developer Preview|date=8 July 2014|url-status=dead|archiveurl=https://web.archive.org/web/20140714205900/http://www.realvnc.com/products/vnc/wayland/|archivedate=14 July 2014|df=dmy-all}}</ref>\n<ref name=\"autoref0007\">{{cite web|url=http://mikhas.posterous.com/maliit-status-update|title=Maliit Status Update|publisher=Posterous|date=2 April 2013|archiveurl=https://web.archive.org/web/20130517213318/http://mikhas.posterous.com/maliit-status-update|archivedate=17 May 2013|url-status=dead|accessdate=14 October 2013}}</ref>\n<ref name=\"autoref0008\">{{cite web|url=https://www.murrayc.com/permalink/2013/04/02/more-maliit-keyboard-improvements-qtquick2/|title=More Maliit Keyboard Improvements: QtQuick2|publisher=Murray's Blog|date=2 April 2013|accessdate=14 October 2013}}</ref>\n<ref name=\"Maliit\">{{cite web|url=https://wiki.maliit.org/Wayland_Input_Method_System_Proposal|archive-url=https://web.archive.org/web/20130611231511/https://wiki.maliit.org/Wayland_Input_Method_System_Proposal|url-status=dead|archive-date=11 June 2013|title=Maliit under Wayland|accessdate=14 September 2013}}</ref>\n<ref name=\"kmscon wl\">{{cite web|url=https://www.freedesktop.org/wiki/Software/kmscon/wlterm/|title=wlterm|publisher=Freedesktop.org|date=|accessdate=8 July 2014}}</ref>\n<ref name=\"eclipse wl\">{{cite web|url=http://blog.vogella.com/2014/08/18/eclipse-now-runs-on-wayland/|title=Eclipse now runs on Wayland|date=18 August 2014}}</ref>\n<ref name=\"Collabora vulkan\">{{cite web|last1=Stone|first1=Daniel|title=Vulkan 1.0 specification released with day-one support for Wayland|url=https://www.collabora.com/about-us/blog/2016/02/16/vulkan-1.0-specification-released-with-day-one-support-for-wayland/|date=16 February 2016}}</ref>\n<ref name=\"genivi\">{{cite web|url=http://projects.genivi.org/ivi-layer-management/node/17|archive-url=https://web.archive.org/web/20140201161624/http://projects.genivi.org/ivi-layer-management/node/17|url-status=dead|archive-date=1 February 2014|title=Wayland Backend DRM &#124; IVI Layer Management|publisher=GENIVI Alliance|accessdate=15 July 2013}}</ref>\n<ref name=\"Collabora RPi\">{{cite web|url=http://www.collabora.com/services/case-studies/raspberrypi/|title=Raspberry Pi Case Study|publisher=Collabora|date=|accessdate=9 August 2013}}</ref>\n<ref name=\"RPi wayland\">{{cite web|url=http://www.raspberrypi.org/archives/4053|title=Wayland preview|publisher=Raspberry Pi|date=|accessdate=9 August 2013}}</ref>\n<ref name=\"tizen 2.0\">{{cite web|url=https://wiki.tizen.org/w/index.php?title=IVI/IVI_Setup&oldid=1037|title=IVI/IVI Setup|publisher=Tizen Wiki|date=|accessdate=8 April 2013}}</ref>\n<ref name=\"wayland part1\">{{cite web|last=Munk|first=Carsten|url=https://mer-project.blogspot.com/2013/04/wayland-utilizing-android-gpu-drivers.html|title=Wayland utilizing Android GPU drivers on glibc based systems, Part 1|publisher=Mer Project|date=11 April 2013|accessdate=3 July 2013}}</ref>\n<ref name=\"wayland part2\">{{cite web|last=Munk|first=Carsten|url=https://mer-project.blogspot.com/2013/05/wayland-utilizing-android-gpu-drivers.html|title=Wayland utilizing Android GPU drivers on glibc based systems, Part 2|publisher=Mer Project|date=8 June 2013|accessdate=3 July 2013}}</ref>\n<ref name=\"autoref0010\">{{cite web|url=https://news.softpedia.com/news/wayland-1-10-display-server-officially-released-wayland-1-11-arrives-in-may-2016-500558.shtml|title=Wayland 1.10 Display Server Officially Released, Wayland 1.11 Arrives in May 2016|last=Nestor|first=Marius|date=18 February 2016|work=[[Softpedia]]}}</ref>\n<ref name=\"X.Org Security\">{{cite web|url=https://www.x.org/wiki/Development/Documentation/Security/|title=X.Org Security|work=X.Org Foundation|accessdate=2 July 2017|quote=The X server has long included an extension, SECURITY, which provides support for a simple trusted/untrusted connection model.}}</ref>\n<ref name=\"X11 Security extension\">{{cite web|url=https://www.x.org/releases/current/doc/xextproto/security.html|title=Security Extension Specification|last=Wiggins|first=David P.|work=X Consortium Standard|date=15 November 1996|accessdate=2 July 2017}}</ref>\n<ref name=\"XACE\">{{cite web|url=https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/Xserver/XACE-Spec.html|title=X Access Control Extension Specification|last=Walsh|first=Eamon F.|date=2009|accessdate=2 July 2017}}</ref>\n<ref name=\"GNOME Remote Desktop\">{{cite web|url=https://ctrl.blog/entry/wayland-gnome-remote-desktop|title=Remote desktop capabilities set to make a comeback in GNOME on Wayland|website=Ctrl.blog|author= Daniel Aleksandersen|accessdate=29 August 2017}}</ref>\n\n<!-- slides -->\n\n<ref name=\"Barnes slides\">{{cite web|last1=Barnes|first1=Jesse|title=Introduction to Wayland|url=https://www.tizen.org/sites/default/files/lfcs2012_barnes.pdf|publisher=Intel Open Source Technology Center|accessdate=18 April 2016|quote=Does not include a rendering API \u2013 Clients use what they want and send buffer handles to the server}}</ref>\n<ref name=\"Wayland Compositor\">{{cite web|title=Wayland/X Compositor Architecture By Example: Enlightenment DR19|url=http://events.linuxfoundation.org/sites/events/files/slides/presentation_0.pdf|accessdate=18 April 2016}}</ref>\n<ref name=\"libinputfosdem15\">{{cite web|last1=de Goede|first1=Hans|title=Replacing xorg input - Drivers with libinput|url=https://archive.fosdem.org/2015/schedule/event/libinput/attachments/slides/591/export/events/attachments/libinput/slides/591/libinput_xorg.pdf|date=1 February 2015|accessdate=18 April 2016}}</ref>\n\n<!-- media (video/audio/...) -->\n\n<ref name=\"Stone 2013 LCA\">{{cite speech|title=The real story behind Wayland and X|first=Daniel|last=Stone|event=linux.conf.au 2013|location=Canberra|date=28 January 2013|url=https://mirror.linux.org.au/pub/linux.conf.au/2013/mp4/The_real_story_behind_Wayland_and_X.mp4|accessdate=13 April 2016}}</ref>\n\n<!-- mailing lists -->\n\n<ref name=\"License\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024226.html|title=[ANNOUNCE] wayland 1.8.93|first=Bryce|last=Harrington|date=15 September 2015|mailinglist=[[freedesktop.org]]}}</ref>\n<ref name=\"H\u00f8gsberg remotewl\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2010-November/000097.html|title=Network transparency argument|last=H\u00f8gsberg|first=Kristian|date=9 November 2010|quote=Wayland isn't a remote rendering API like X, but that doesn't exclude network transparency. Clients render into a shared buffer and then have to tell the compositor (...) what they changed. The compositor can then send the new pixels in that region out over the network. The Wayland protocol is already violently asynchronous, so it should be able to handle a bit of network lag gracefully. Remote fullscreen video viewing or gaming isn't going to work well, [but] I don't know any other display system that handles that well and transparently.}}</ref>\n<ref name=\"Jackson remotewl\">{{cite web|url=https://lists.fedoraproject.org/pipermail/devel/2010-November/145306.html|title=&#91;Re:&#93; Ubuntu moving towards Wayland|last=Jackson|first=Adam|date=9 November 2010}}</ref>\n<ref name=\"xorg 1.16\">{{cite web|url=https://lists.x.org/archives/xorg-announce/2014-July/002457.html|title=ANNOUNCE: xorg-server 1.16.0|publisher=[[freedesktop.org]]|date=17 July 2014}}</ref>\n<ref name=\"H\u00f8gsberg wayland GL\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2010-December/000330.html|title=Blender3D & cursor clamping.|date=9 December 2010|last=H\u00f8gsberg|first=Kristian}}</ref>\n<ref name=\"RealVNC remote\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2013-October/011536.html|title=[RFC weston] remote access interface module|publisher=[[freedesktop.org]]|date=18 October 2013}}</ref>\n<ref name=\"libinput stable API\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/020131.html|title=libinput: the road to 1.0|first=Peter|last=Hutterer|date=22 February 2015}}</ref>\n<ref name=\"libinput fedora 22\">{{cite web|url=https://lists.fedoraproject.org/pipermail/devel/2015-February/208204.html|title=Libinput now enabled as default xorg driver for F-22 workstation installs|first=Hans de|last=Goede|date=23 February 2015}}</ref>\n<ref name=\"libinput announce\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2013-November/011930.html|title=[RFC] Common input device library|last=\u00c5dahl|first=Jonas|publisher=Wayland mailing list|date=12 November 2013}}</ref>\n<ref name=\"clutter 1.6\">{{cite mailing list|mailing-list=clutter-announce|last=Bassi|first=Emmanuele|title=ANNOUNCE: Clutter 1.6.0 (stable)|date=31 January 2011|url=https://mail.gnome.org/archives/gnome-announce-list/2011-January/msg00072.html}}</ref>\n<ref name=\"clutter 1.16\">{{cite mailing list|mailing-list=clutter-announce|last=Bassi|first=Emmanuele|title=ANNOUNCE: Clutter 1.16.0 (stable)|url=https://mail.gnome.org/archives/clutter-list/2013-September/msg00011.html|date=24 September 2013}}</ref>\n<ref name=\"autoref0006\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2014-July/015949.html|title=RealVNC Wayland developer preview email|publisher=[[freedesktop.org]]|date=9 July 2014}}</ref>\n<ref name=\"tizen 3.0\">{{cite mailing list|mailing-list=IVI|last=VanCutsem|first=Geoffroy|title=[IVI] Tizen IVI 3.0-M1 released|url=https://lists.tizen.org/pipermail/ivi/2013-July/000563.html|date=10 July 2013}}</ref>\n<ref name=\"wayland freedesktop\">{{cite web|url=https://groups.google.com/forum/#!topic/wayland-display-server/sfvLwLaHwsE|title=Moving to freedesktop.org|last=H\u00f8gsberg|first=Kristian|date=29 October 2010|accessdate=31 July 2013}}</ref>\n<ref name=\"original license\">{{cite mailing list|mailing-list=wayland-display-server|last=H\u00f8gsberg|first=Kristian|title=Wayland is now under MIT license|date=3 December 2008|url=https://groups.google.com/forum/#!topic/wayland-display-server/daWzNkr5erE}}</ref>\n<ref name=\"license clarification\">{{cite mailing list|mailing-list=wayland-devel|last=H\u00f8gsberg|first=Kristian|title=Wayland license clarification|date=22 November 2010|url=https://lists.freedesktop.org/archives/wayland-devel/2010-November/000249.html}}</ref>\n<ref name=\"license change GPL\">{{cite mailing list|mailing-list=wayland-devel|last=H\u00f8gsberg|first=Kristian|title=License update|date=19 September 2011|url=https://lists.freedesktop.org/archives/wayland-devel/2011-September/001386.html}}</ref>\n<ref name=\"wayland 0.85\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=[ANNOUNCE] Wayland and Weston 0.85.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2012-February/002072.html|website=wayland-devel mailing list|date=9 February 2012}}</ref>\n<ref name=\"wayland 0.95\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 0.95.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2012-July/004542.html|website=wayland-devel mailing list|date=24 July 2012}}</ref>\n<ref name=\"wayland 1.0\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.0|url=https://lists.freedesktop.org/archives/wayland-devel/2012-October/005967.html|website=wayland-devel mailing list|date=22 October 2012}}</ref>\n<ref name=\"wayland 1.1\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=1.1 Released|url=https://lists.freedesktop.org/archives/wayland-devel/2013-April/008631.html|website=wayland-devel mailing list|date=15 April 2013}}</ref>\n<ref name=\"wayland 1.2\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.2.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2013-July/010278.html|website=wayland-devel mailing list|date=12 July 2013}}</ref>\n<ref name=\"wayland 1.3\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.3 releases are out|url=httpslists.freedesktop.org/archives/wayland-devel/2013-October/011419.html|website=wayland-devel mailing list|date=11 October 2013}}</ref>\n<ref name=\"wayland 1.4\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.4 is out|url=https://lists.freedesktop.org/archives/wayland-devel/2014-January/012903.html|website=wayland-devel mailing list|date=24 January 2014}}</ref>\n<ref name=\"wayland 1.5\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.5.0 is released|url=https://lists.freedesktop.org/archives/wayland-devel/2014-May/014955.html|website=wayland-devel mailing list|date=20 May 2014}}</ref>\n<ref name=\"wayland 1.6\">{{cite web|last1=Paalanen|first1=Pekka|title=Wayland and Weston 1.6.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2014-September/017396.html|website=wayland-devel mailing list|date=19 September 2014}}</ref>\n<ref name=\"wayland 1.7\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] wayland 1.7.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/019976.html|website=wayland-devel mailing list|date=14 February 2015}}</ref>\n<ref name=\"weston 1.7\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] weston 1.7.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/019977.html|website=wayland-devel mailing list|date=14 February 2015}}</ref>\n<ref name=\"wayland 1.8\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] wayland 1.8.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-June/022415.html|website=wayland-devel mailing list|date=2 June 2015}}</ref>\n<ref name=\"weston 1.8\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] weston 1.8.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-June/022416.html|website=wayland-devel mailing list|date=2 June 2015}}</ref>\n<ref name=\"wayland 1.9\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024302.html|title=[ANNOUNCE] wayland 1.9.0|first=Bryce|last=Harrington|date=21 September 2015|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.9\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024303.html|title=[ANNOUNCE] weston 1.9.0|first=Bryce|last=Harrington|date=21 September 2015|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.10\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-February/027038.html|title=[ANNOUNCE] wayland 1.10.0|first=Bryce|last=Harrington|date=17 February 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.10\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-February/027039.html|title=[ANNOUNCE] weston 1.10.0|first=Bryce|last=Harrington|date=17 February 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.11\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-June/029163.html|title=[ANNOUNCE] wayland 1.11.0|first=Bryce|last=Harrington|date=1 June 2016|accessdate=1 June 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.11\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-June/029164.html|title=[ANNOUNCE] weston 1.11.0|first=Bryce|last=Harrington|date=1 June 2016|accessdate=1 June 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.12\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-September/031121.html|title=[ANNOUNCE] wayland 1.12.0|first=Bryce|last=Harrington|date=21 September 2016|accessdate=21 September 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.12\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-September/031123.html|title=[ANNOUNCE] weston 1.12.0|first=Bryce|last=Harrington|date=21 September 2016|accessdate=21 September 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.13\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-February/033193.html|title=[ANNOUNCE] wayland 1.13.0|first=Bryce|last=Harrington|date=21 February 2017|accessdate=30 April 2017|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 2.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-February/033231.html|title=[ANNOUNCE] weston 2.0.0|first=Bryce|last=Harrington|date=25 February 2017|accessdate=30 April 2017|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.14\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-August/034748.html|title=[ANNOUNCE] wayland 1.14.0|first=Bryce|last=Harrington|date=8 August 2017|accessdate=25 March 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 3.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-August/034749.html|title=[ANNOUNCE] weston 3.0.0|first=Bryce|last=Harrington|date=8 August 2017|accessdate=25 March 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.15\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-April/037767.html|title=[ANNOUNCE] wayland 1.15.0|first=Derek|last=Foreman|date=9 April 2018|accessdate=15 April 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 4.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-April/037768.html|title=[ANNOUNCE] weston 4.0.0|first=Derek|last=Foreman|date=9 April 2018|accessdate=15 April 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.16\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-August/039358.html|title=[ANNOUNCE] wayland 1.16.0|first=Derek|last=Foreman|date=24 August 2018|accessdate=30 November 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 5.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-August/039359.html|title=[ANNOUNCE] weston 5.0.0|first=Derek|last=Foreman|date=24 August 2018|accessdate=30 November 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.17\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2019-March/040335.html |title=[ANNOUNCE] wayland 1.17.0|website=Wayland|date=28 March 2019 |first=Derek |last=Foreman |accessdate= 17 June 2019}}</ref>\n<ref name=\"weston 6.0\">{{cite mailing list |url=https://lists.freedesktop.org/archives/wayland-devel/2019-March/040356.html |title=[ANNOUNCE] weston 6.0.0|website=Wayland|date=21 March 2019 |first=Derek |last=Foreman |accessdate= 17 June 2019}}</ref>\n<ref name=\"wayland 1.18\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041207.html|title=[ANNOUNCE] wayland 1.18|website=Wayland|date=11 February 2020|first=Simon|last=Sur|accessdate=12 February 2020}}</ref>\n<ref name=\"weston 7.0\">{{cite mailing list |url=https://lists.freedesktop.org/archives/wayland-devel/2019-August/040812.html |title=[ANNOUNCE] weston 7.0.0|website=Wayland|date=23 August 2019 |first=Simon |last=Ser |accessdate= 22 October 2019}}</ref>\n<ref name=\"wayland 1.16.93\">{{cite mailing list |url= https://lists.freedesktop.org/archives/wayland-devel/2019-March/040291.html |title = [ANNOUNCE] wayland 1.16.93 |website=Wayland|date=14 March 2019 |first=Derek |last=Foreman |accessdate= 3 January 2020}}</ref>\n<ref name=\"weston 6.0.91\">{{cite mailing list |url= https://lists.freedesktop.org/archives/wayland-devel/2019-July/040732.html |title = [ANNOUNCE] weston 6.0.91|website=Wayland|date=19 July 2019 |first=Simon |last=Ser |accessdate= 3 January 2020}}</ref>\n<ref name=\"weston 8.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-January/041147.html|title=[ANNOUNCE] weston 8.0.0|website=Wayland|date=24 January 2020|first=Simon|last=Ser|accessdate=12 February 2020}}</ref>\n<ref name=\"wayland 1.19\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041267.html|title=[ANNOUNCE] wayland-protocols 1.19|website=Wayland|date=29 February 2020|first=Jonas|last=\u00c5dahl|accessdate=26 March 2020}}</ref>\n<ref name=\"wayland 1.20\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041269.html|title=[ANNOUNCE] wayland-protocols 1.20|website=Wayland|date=29 February 2020|first=Jonas|last=\u00c5dahl|accessdate=26 March 2020}}</ref>\n<!-- source code/commits -->\n\n<ref name=\"xdg-shell\">{{cite web|url=https://cgit.freedesktop.org/wayland/weston/commit/?id=3c4dc74cebe1de6f71ec9eeb9794eaaff4327e95|title=xdg_shell: Adding a new shell protocol|work=[[freedesktop.org]]|date=3 December 2013|accessdate=14 June 2014}}</ref>\n<ref name=\"freeglut wayland\">{{cite web|url=https://github.com/dcnieho/FreeGLUT/commit/9b30564b6d9c9f106c7d079d6cf9207363a49111|title=FreeGLUT: Implement initial Wayland support|website=GitHub}}</ref>\n\n<!-- other -->\n\n}}\n\n==External links==\n* {{Official website|https://wayland.freedesktop.org/}}\n* {{Openhub|wayland|Wayland}}\n* {{cite web\n | url   = https://video.fosdem.org/2012/maintracks/k.1.105/Wayland.webm\n | title = Wayland at FOSDEM 2012\n | last  = H\u00f8gsberg\n | first = Kristian}}\n* {{cite web\n | url       = https://lwn.net/Articles/415589/\n | title     = The way to Wayland: Preparing for life After X\n | last      = Brockmeier\n | first     = Joe 'Zonker'\n | publisher = [[LWN.net]]\n | date      = 17 November 2010}}\n* {{cite web\n | url       = http://www.h-online.com/open/features/Wayland-Beyond-X-1432046.html\n | title     = Wayland \u2013 Beyond X\n | last      = Hillesley\n | first     = Richard\n | publisher = [[The H]]\n | date      = 13 February 2012}}\n* {{cite web\n | url       = https://www.phoronix.com/scan.php?page=article&item=x_wayland_situation\n | title     = The Wayland Situation: Facts About X vs. Wayland\n | last      = Griffith\n | first     = Eric\n | publisher = Phoronix\n | date      = 7 June 2013}}\n* [https://www.phoronix.com/scan.php?page=news_item&px=Wayland-DragonFlyBSD-Port Wayland on DragonflyBSD]\n\n{{freedesktop.org}}\n{{Desktop environments and window managers for X11 and Wayland}}\n\n[[Category:Wayland| ]]\n[[Category:Free software programmed in C]]\n[[Category:Software using the MIT license]]\n[[Category:Collabora]]\n", "text_old": "{{format references|date=December 2019}}\n{{Use dmy dates|date=November 2014}}\n\n{{Infobox software\n| name                   = Wayland\n| logo                   = Wayland Logo.svg\n| logo size              = 100px\n| screenshot             = Maynard desktop.png\n| caption                = Screenshot of [[#Maynard|Maynard]], a [[Plug-in (computing)|plug-in]] for [[#Weston|Weston]], the [[reference implementation]] of Wayland\n| author                 = Kristian H\u00f8gsberg\n| developer              = [[freedesktop.org]] et al.\n| released               = {{Start date and age|2008|09|30|df=yes}}<ref>{{cite web\n | url         = https://cgit.freedesktop.org/wayland/wayland/commit/?id=97f1ebe8d5c2e166fabf757182c289fed266a45a\n | title       = Initial commit\n | first       = Kristian\n | last        = H\u00f8gsberg\n | date        = 30 September 2008\n | access-date = 3 January 2020}}</ref>\n| latest release version = Wayland: 1.20,<ref name=\"wayland 1.20\" /> Weston: 8.0<ref name=\"weston 8.0\" />\n| latest release date    = {{Start date and age|2020|02|29|df=yes}}\n| latest preview version = Wayland: 1.16.93,<ref name=\"wayland 1.16.93\" /> Weston: 6.0.91<ref name=\"weston 6.0.91\" />\n| latest preview date    = {{Start date and age|2019|08|02|df=yes}}\n| programming language   = [[C (programming language)|C]]\n| operating system       = official: [[Linux]]<br />unofficial: [[FreeBSD]], [[DragonFly BSD]]\n| platform               =\n| genre                  = {{unbulleted list|[[Windowing system]]|[[Display server]]}}\n| license                = [[MIT License]]{{r|License}}{{r|wllicense}}{{r|Larabel 2015 license}}\n| website                = {{URL|https://wayland.freedesktop.org/}}\n}}\n\n'''Wayland''' is a [[communication protocol]] that specifies the communication between a [[display server]] and its clients, as well as a [[C (programming language)|C]] library implementation of that protocol.{{r|Wayland homepage}} A display server using the Wayland protocol is called a ''[[#Wayland compositors|Wayland compositor]]'', because it additionally performs the task of a [[compositing window manager]].\n\nWayland is developed by a group of volunteers initially led by Kristian H\u00f8gsberg as a [[free software|free]] and [[Open-source software|open-source]] community-driven project with the aim of replacing the [[X Window System]] with a modern, secure, simpler [[windowing system]] in [[Linux]] and other [[Unix-like]] operating systems.{{r|Wayland homepage}} The project's source code is published under the terms of the [[MIT License]], a [[permissive free software licence]].{{r|Wayland FAQ}}{{r|License}}\n\nAs part of its efforts, the Wayland project also develops a [[reference implementation]] of a Wayland compositor called ''[[#Weston|Weston]]''.{{r|Wayland homepage}}\n\n==Overview==\n[[File:Wayland display server protocol.svg|thumb|right|upright=1.6|{{ordered list\n| The [[evdev]] module of the [[Linux kernel]] gets an event and sends it to the [[Wayland compositor]].\n| The Wayland compositor looks through its [[scenegraph]] to determine which window should receive the event. The scenegraph corresponds to what is on screen and the Wayland compositor understands the transformations that it may have applied to the elements in the scenegraph. Thus, the Wayland compositor can pick the right window and transform the screen coordinates to window local coordinates, by applying the inverse transformations. The types of transformation that can be applied to a window is only restricted to what the compositor can do, as long as it can compute the inverse transformation for the input events.\n| As in the X case, when the client receives the event, it updates the UI in response. But in the Wayland case, the rendering happens by the client via [[EGL (API)|EGL]], and the client just sends a request to the compositor to indicate the region that was updated.\n| The Wayland compositor collects damage requests from its clients and then re-composites the screen. The compositor can then directly issue an [[ioctl]] to schedule a pageflip with [[KMS (Linux kernel)|KMS]].}}]]\n\nStarting around 2010, Linux desktop graphics has moved from having \"a pile of [[Rendering (computer graphics)|rendering]] interfaces... all talking to the [[display server|X server]], which is at the center of the universe\" towards putting the Linux kernel and its components (i.e. [[Direct Rendering Infrastructure|Direct Rendering Infrastructure (DRI)]], [[Direct Rendering Manager|Direct Rendering Manager (DRM)]]) \"in the middle\", with \"window systems like X and Wayland ... off in the corner\". This will be \"a much-simplified graphics system offering more flexibility and better performance\".{{r|Corbet 2010}}\n\nKristian H\u00f8gsberg could have added an [[Xdmx|extension to X]] as many recent projects have done, but preferred to \"[push] X out of the hotpath between clients and the hardware\" for reasons explained in the project's FAQ:{{r|Wayland FAQ}}\n\n{{quote|What\u2019s different now is that a lot of infrastructure has moved from the [[display server|X server]] into the kernel (memory management, command scheduling, [[mode-setting|mode setting]]) or libraries ([[cairo (graphics)|cairo]], pixman, [[freetype]], [[fontconfig]], [[pango]], etc.), and there is very little left that has to happen in a central server process. ... [An X server has] a tremendous amount of functionality that you must support to claim to speak the X protocol, yet nobody will ever use this. ... This includes code tables, glyph rasterization and caching, [[X logical font description|XLFDs]] (seriously, XLFDs!), and the entire core rendering API that lets you draw stippled lines, polygons, wide arcs and many more state-of-the-1980s style graphics primitives. For many things we've been able to keep the X.org server modern by adding extension such as [[XRandR]], [[XRender]] and [[composite (graphics)|COMPOSITE]] ... With Wayland we can move the X server and all its legacy technology to an optional code path. Getting to a point where the X server is a compatibility option instead of the core rendering system will take a while, but we'll never get there if [we] don\u2019t plan for it.}}\n\nWayland consists of a protocol and a reference implementation named [[#Weston|Weston]]. The project is also developing versions of [[GTK]] and [[Qt (software)|Qt]] that render to Wayland instead of to X. Most applications are expected to gain support for Wayland through one of these libraries without modification to the application.\n\nInitial versions of Wayland have not provided [[network transparency]], though H\u00f8gsberg noted in 2010 that network transparency is possible.{{r|H\u00f8gsberg remotewl}}\nIt was attempted as a [[Google Summer of Code]] project in 2011, but was not successful.{{r|Larabel 2011 remote}}\nAdam Jackson has envisioned providing remote access to a Wayland application by either \"pixel-scraping\" (like [[Virtual Network Computing|VNC]]) or getting it to send a \"rendering command stream\" across the network (as in [[Remote Desktop Protocol|RDP]], [[SPICE (protocol)|SPICE]] or [[X Window System|X11]]).{{r|Jackson remotewl}} As of early 2013, H\u00f8gsberg is experimenting with network transparency using a proxy Wayland server which sends compressed images to the real compositor.{{r|Stone 2013 LCA}}{{r|Willis 2013}} In August 2017, GNOME saw the first such pixel-scraping VNC server implementation under Wayland.{{r|GNOME Remote Desktop}}\n\n==Software architecture==\n\n===Protocol architecture===\n[[File:Wayland protocol architecture.svg|thumb|right|upright=1.6|In the Wayland protocol architecture, a client and a compositor communicate through the Wayland protocol using the reference implementation libraries.]]\n\nWayland protocol follows a [[client\u2013server model]] in which clients are the graphical applications requesting the display of pixel buffers on the screen, and the server (compositor) is the service provider controlling the display of these buffers.\n\nThe Wayland reference implementation has been designed as a two-layer protocol:{{r|hellowl}}\n* A low-level layer or ''wire protocol'' that handles the [[inter-process communication]] between the two involved [[Process (computing)|processes]]{{mdashb}}client and compositor{{mdashb}}and the [[Marshalling (computer science)|marshalling]] of the data that they interchange. This layer is message-based and usually implemented using the kernel IPC services, specifically [[Unix domain sockets]] in the case of [[Linux]] and [[Unix-like]] operating systems.{{r|Wayland doc|page=9}}\n* A high-level layer built upon it, that handles the information that client and compositor need to exchange to implement the basic features of a [[window system]]. This layer is implemented as \"an asynchronous object-oriented protocol\".{{r|Wayland doc|page=9}}\n\nWhile the low-level layer was written manually in [[C (programming language)|C]], the high-level layer is automatically generated from a description of the elements of the protocol stored in [[XML]] format.{{r|wlprotoxml}} Every time the protocol description of this XML file changes, the C source code that implements such protocol can be regenerated to include the new changes, allowing a very flexible, extensible and error-proof protocol.\n\nThe reference implementation of Wayland protocol is split in two [[Library (computing)|libraries]]: a library to be used by Wayland clients called <code>libwayland-client</code> and a library to be used by Wayland compositors called <code>libwayland-server</code>.{{r|Wayland doc|page=57}}\n\n===Protocol overview===\nThe Wayland protocol is described as an \"asynchronous [[object-oriented]] protocol\".{{r|Wayland doc|page=9}} ''Object-oriented'' means that the services offered by the compositor are presented as a series of ''objects'' living on the same compositor. Each object implements an ''interface'' which has a name, a number of methods (called ''requests'') as well as several associated ''events''. Every request and event has zero or more arguments, each one with a name and a [[data type]]. The protocol is ''asynchronous'' in the sense that requests do not have to wait for synchronized replies or [[Acknowledgement (data networks)|ACKs]], avoiding [[round-trip delay time]] and achieving improved performance.\n\nThe Wayland clients can make a request (a method invocation) on some object if the object's interface supports that request. The client must also supply the required data for the arguments of such request. This is the way the clients request services from the compositor. The compositor in turn sends information back to the client by causing the object to emit events (probably with arguments too). These events can be emitted by the compositor as a response to a certain request, or asynchronously, subject to the occurrence of internal events (such as one from an input device) or state changes. The error conditions are also signaled as events by the compositor.{{r|Wayland doc|page=9}}\n\nFor a client to be able to make a request to an object, it first needs to tell the server the ID number it will use to identify that object.{{r|Wayland doc|page=9}} There are two types of objects in the compositor: global objects and non-global objects. Global objects are advertised by the compositor to the clients when they are created (and also when they are destroyed), while non-global objects are usually created by other objects that already exist as part of their functionality.{{r|Paalanen 2014}}\n\nThe interfaces and their requests and events are the core elements that define the Wayland protocol. Each version of the protocol includes a set of interfaces, along with their requests and events, which are expected to be in any Wayland compositor. Optionally, a Wayland compositor may define and implement its own interfaces that support new requests and events, thereby extending functionality beyond the core protocol.{{r|Wayland doc|page=10}} To facilitate changes to the protocol, each interface contains a \"version number\" attribute in addition to its name; this attribute allows for distinguishing variants of the same interface. Each Wayland compositor exposes not only what interfaces are available, but also the supported versions of those interfaces.{{r|Wayland doc|page=12}}\n\n====Wayland core interfaces====\nThe interfaces of the current version of Wayland protocol are defined in the file <tt>protocol/wayland.xml</tt> of the Wayland source code.{{r|wlprotoxml}} This is an [[XML]] file that lists the existing interfaces in the current version, along with their requests, events and other attributes. This set of interfaces is the minimum required to be implemented by any Wayland compositor.\n\nSome of the most basic interfaces of the Wayland protocol are:{{r|Wayland doc|pages=10-12}}\n* ''wl_display''{{snd}} the core global object, a special object to encapsulate the Wayland protocol itself\n* ''wl_registry''{{snd}} the global registry object, in which the compositor registers all the global objects that it wants to be available to all clients\n* ''wl_compositor''{{snd}} an object that represents the compositor, and is in charge of combining the different surfaces into one output\n* ''wl_surface''{{snd}} an object representing a rectangular area on the screen, defined by a location, size and pixel content\n* ''wl_buffer''{{snd}} an object that, when attached to a ''wl_surface'' object, provides its displayable content\n* ''wl_output''{{snd}} an object representing the displayable area of a screen\n* ''wl_pointer'', ''wl_keyboard'', ''wl_touch''{{snd}} objects representing different input devices like [[Pointer (graphical user interfaces)|pointers]] or [[Computer keyboard|keyboards]]\n* ''wl_seat''{{snd}} an object representing a seat (a set of input/output devices) in [[multiseat configuration]]s\n\nA typical Wayland client session starts by opening a connection to the compositor using the ''wl_display'' object. This is a special local object that represents the connection and does not live within the server. By using its interface the client can request the ''wl_registry'' global object from the compositor, where all the global object names live, and bind those that the client is interested in. Usually the client binds at least a ''wl_compositor'' object from where it will request one or more ''wl_surface'' objects to show the application output on the display.{{r|Paalanen 2014}}\n\n====Wayland extension interfaces====\nA Wayland compositor can define and export its own additional interfaces.{{r|Wayland doc|page=10}} This feature is used to extend the protocol beyond the basic functionality provided by the core interfaces, and has become the standard way to implement Wayland protocol extensions. Certain compositors can choose to add custom interfaces to provide specialized or unique features. The Wayland reference compositor, Weston, used them to implement new experimental interfaces as a testbed for new concepts and ideas, some of which later became part of the core protocol (such as ''wl_subsurface'' interface added in Wayland 1.4{{r|wayland 1.4}}).\n\n===Extension protocols to the core protocol===\n\n====XDG-Shell protocol====\nXDG-Shell protocol (see [[freedesktop.org]] for XDG) is an extended way to manage surfaces under Wayland compositors (not only Weston). The traditional way to manipulate (maximize, minimize, fullscreen, etc.) surfaces is to use the wl_shell_*() functions, which are part of the core Wayland protocol and live in <tt>libwayland-client</tt>. An implementation of the xdg-shell protocol, on the contrary, is supposed to be provided by the Wayland compositor. So you will find the <tt>xdg-shell-client-protocol.h</tt> header in the Weston source tree. Each Wayland compositor is supposed to provide its own implementation.\n\n{{As of|2014|6}}, XDG-Shell protocol was not versioned and still prone to changes.\n\nxdg_shell is a protocol aimed to substitute wl_shell in the long term, but will not be part of the Wayland core protocol. It starts as a non-stable API, aimed to be used as a development place at first, and once features are defined as required by several desktop shells, it can be finally made stable. It provides mainly two new interfaces: xdg_surface and xdg_popup. The xdg_surface interface implements a desktop-style window that can be moved, resized, maximized, etc.; it provides a request for creating child/parent relationship. The xdg_popup interface implements a desktop-style popup/menu; an xdg_popup is always transient for another surface, and also has implicit grab.{{r|xdg-shell}}\n\n====IVI-Shell protocol====\nIVI-Shell is an extension to the Wayland core protocol, targeting [[in-vehicle infotainment]] (IVI) devices.<ref>{{cite web|url=https://github.com/GENIVI/wayland-ivi-extension|title=GENIVI/wayland-ivi-extension|publisher=}}</ref>\n\n===Rendering model===\n[[File:The Linux Graphics Stack and glamor.svg|thumb|right|upright=1.6|[[Wayland compositor]] and its clients use [[EGL (API)|EGL]] to draw directly into the [[framebuffer]]; [[X.Org Server]] with [[XWayland]] and [[Glamor (software)|Glamor]].]]\n\nThe Wayland protocol does not include a rendering API.{{r|Wayland doc|page=7}}{{r|Wayland FAQ}}{{r|Vervloesem 2012}}{{r|Barnes slides|p=2}} Instead, Wayland follows a ''direct rendering'' model, in which the client must render the window contents to a buffer shareable with the compositor.{{r|Wayland doc|page=7}} For that purpose, the client can choose to do all the rendering by itself, use a rendering library like [[Cairo (graphics)|Cairo]] or [[OpenGL]], or rely on the rendering engine of high-level widget libraries with Wayland support, such as [[Qt (software)|Qt]] or [[GTK]]. The client can also optionally use other specialized libraries to perform specific tasks, such as [[Freetype]] for [[Font rasterization|font rendering]].\n\nThe resulting buffer with the rendered window contents are stored in a ''wl_buffer'' object. The internal type of this object is implementation dependent. The only requirement is that the content data must be shareable between the client and the compositor. If the client uses a software (CPU) renderer and the result is stored in the [[Main memory|system memory]], then client and compositor can use [[shared memory]] to implement the buffer communication without extra copies. The Wayland protocol already natively provides this kind of shared memory buffer through the ''wl_shm'' and ''wl_shm_pool'' interfaces.{{r|Wayland doc|page=11, 20-21}} The drawback of this method is that the compositor may need to do additional work (usually to copy the shared data to the GPU) to display it, which leads to slower graphics performance.\n\nThe most typical case is for the client to render directly into a [[video memory]] buffer using a hardware (GPU) accelerated API such as [[OpenGL]], [[OpenGL ES]] or [[Vulkan (API)|Vulkan]]. Client and compositor can share this GPU-space buffer using a special handler to reference it.{{r|Paalanen 2012}} This method allows the compositor to avoid additional copies of data to the GPU, resulting in faster graphics performance than using shm buffers, and is therefore the preferred one. The compositor can further optimize the composition of the final scene to be shown on the display by using the same hardware acceleration API as the client.\n\nWhen rendering is completed in a shared buffer, the Wayland client should instruct the compositor to present the rendered contents of the buffer on the display. For this purpose, the client binds the buffer object that stores the rendered contents to the surface object, and sends a \"commit\" request to the surface, transferring the effective control of the buffer to the compositor.{{r|hellowl}} Then the client waits for the compositor to release the buffer (signaled by an event) if it wants to reuse the buffer to render another frame, or it can use another buffer to render the new frame, and, when the rendering is finished, bind this new buffer to the surface and commit its contents.{{r|Wayland doc|page=7}} The procedure used for rendering, including the number of buffers involved and their management, is entirely under the client control.{{r|Wayland doc|page=7}}\n\n==Comparison with other window systems==\n{{See also|Mir (software)#Software architecture|label 1=Mir software architecture|Mir (software)#Controversy|label 2=Controversy around Mir}}\n\n===Differences between Wayland and X===\nThere are several differences between Wayland and X in regards to performance, code maintainability, and security:{{r|Griffith 2013}}\n\n; Architecture : The [[Compositing window manager|composition manager]] is a separate, additional feature in X, while Wayland merges display server and compositor as a single function.{{r|Wayland architecture}}{{r|Vervloesem 2012}} Also, it incorporates some of the tasks of the [[window manager]], which in X is a separate client-side process.{{r|Edge 2012}}\n\n; Compositing : Compositing is optional in X, but mandatory in Wayland. Compositing in X is \"active\"; that is, the compositor must fetch all pixel data, which introduces latency. In Wayland, compositing is \"passive\", which means the compositor receives pixel data directly from clients.{{r|Wayland Compositor|pages=8-11}}\n\n; Rendering : The X server itself is able to perform rendering, although it can also be instructed to display a rendered window sent by a client. In contrast, Wayland does not expose any API for rendering, but delegates to clients such tasks (including the rendering of fonts, widgets, etc.).{{r|Wayland architecture}}{{r|Vervloesem 2012}} Window decorations can be rendered on the client side (e.g., by a graphics toolkit) or on the server side (by the compositor).{{r|Graesslin 2013 decorations}}\n\n; Security : Wayland isolates the input and output of every window, achieving confidentiality, integrity and availability in both cases; the original X design lacks these important security features,{{r|Kerrisk 2012}}{{r|Peres 2014}}{{r|Graesslin 2015 security}} although some extensions have been developed trying to mitigate it.{{r|X.Org Security}}{{r|X11 Security extension}}{{r|XACE}} Also, with the vast majority of the code running in the client, less code needs to run with ''root'' privileges, improving security,{{r|Kerrisk 2012}} although multiple popular Linux distributions now allow X to be run without root privileges.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=Debian-Non-Root-X|title=Debian Moves To Non-Root X.Org Server By Default - Phoronix|website=www.phoronix.com}}</ref><ref>{{cite web|url=https://wiki.gentoo.org/wiki/Non_root_Xorg|title=Non root Xorg - Gentoo Wiki|website=wiki.gentoo.org}}</ref><ref>{{cite web|url=https://wiki.ubuntu.com/X/Rootless|title=X/Rootless - Ubuntu Wiki|website=wiki.ubuntu.com}}</ref><ref>{{cite web|url=https://bugzilla.redhat.com/show_bug.cgi?id=1078902|title=1078902 \u2013 Xorg without root rights|website=bugzilla.redhat.com}}</ref>\n\n; Inter-process communication : The X server provides a basic communication method between X clients, later extended by [[ICCCM]] conventions. This X client-to-client communication is used by window managers and also to implement [[X session manager|X sessions]], [[X Window selection|selections and drag-and-drop]], and other features. The Wayland core protocol does not support communication between wayland clients at all, and the corresponding functionality (if needed) should be implemented by the [[desktop environments]] (like KDE or GNOME), or by a third party (for example, by using native [[Inter-process communication|IPC]] of the underlying operating system).\n\n; Networking : The X Window System is an [[X Window System protocols and architecture|architecture]] that was designed at its core to run over a network. Wayland does not offer network transparency by itself;{{r|Wayland FAQ}} however, a compositor can implement any [[List of remote desktop protocols|remote desktop protocol]] to achieve remote display. In addition, there is research into Wayland image streaming and compression that would provide remote frame buffer access similar to that of [[VNC]].{{r|Willis 2013}}\n\n===Compatibility with X===\n[[File:XWayland.png|thumb|right|upright=1.6|A screenshot showing xwayland]]\n\n[[XWayland]] is an [[X Window System|X Server]] running as a Wayland client, and thus is capable of displaying native X11 client applications in a Wayland compositor environment.{{r|xwayland}} This is similar to the way [[XQuartz]] runs X applications in [[macOS]]\u2019s native windowing system. The goal of XWayland is to facilitate the transition from X Window System to Wayland environments, providing a way to run unported applications in the meantime. XWayland was mainlined into [[X.Org Server]] version 1.16.{{r|xorg 1.16}}\n\nWidget toolkits such as [[Qt (software)|Qt]]5 and [[GTK]]3 can switch their graphical back-end at run time,{{r|H\u00f8gsberg 2011 GTK}} allowing users to choose at [[load time]] whether they want to run the application over X or over Wayland. Qt 5 provides the {{code|-platform}} command-line option{{r|QtWayland}} to that effect, whereas GTK 3 lets users select the desired [[GDK]] back-end by setting the {{code|GDK_BACKEND}} [[Environment variable|Unix environment variable]].{{r|H\u00f8gsberg 2011 GTK}}{{r|GTK Wayland support}}\n\n==Wayland compositors==\n[[File:Window (windowing system).svg|thumb|right|upright=1.6|Typical elements of a [[window (computing)|window]]. Neither Wayland nor X11 specifies what software is responsible for rendering the [[window decoration]]. Weston requires that they are drawn by the client, but [[KWin]] will implement server-side decoration.{{r|Graesslin 2013 decorations}}]]\n\n{{Main|List of display servers#Wayland|l1=List of Wayland compositors}}\n\n[[Display server]]s that implement the Wayland display server protocol are also called ''Wayland compositors'' because they additionally perform the task of a [[compositing window manager]].\n\n* [[#Weston|Weston]]{{snd}} the [[reference implementation]] of a Wayland compositor; Weston implements [[Client-Side_Decoration|client side decorations]]\n* Lipstick{{snd}} mobile [[graphical shell]] framework which implements Wayland compositor; it is used in [[Sailfish OS]], [[Nemo Mobile]] and [[AsteroidOS]]{{r|Edge 2013 jolla}}\n* [[Enlightenment (window manager)|Enlightenment]] has full Wayland support since version 0.20{{r|Larabel 2015 e20}}\n* [[KWin]] has nearly complete Wayland support as of 2018{{citation needed|date=September 2018}}\n* [[Mutter (software)|Mutter]] maintains a separate branch for the integration of Wayland for GNOME 3.9 (in September 2013){{r|mutter wayland}}\n* [[Clutter (software)|Clayland]] \u2013 a simple example Wayland compositor using Clutter\n* [[Westeros (software)|Westeros]] \u2013 a Wayland compositor library that allows applications to create their own Wayland displays, which allows nesting and embedding of third party applications<ref>{{cite web|url=https://github.com/rdkcmf/westeros|accessdate=19 September 2016|title=Westeros Github Mirror}}</ref>\n* [[wlroots]] \u2013 a modular Wayland implementation that functions as a base for other compositors, most notably [[Sway (window manager)|Sway]]<ref>{{cite web|url=https://github.com/swaywm/wlroots|title=swaywm/wlroots|website=GitHub|language=en|access-date=2018-10-28}}</ref><ref>{{cite web|url=https://github.com/swaywm/sway|title=swaywm/sway|website=GitHub|language=en|access-date=2018-10-28}}</ref>\n* [[Sway (window manager)|Sway]] \u2013 a tiling Wayland compositor and a drop-in replacement for the i3 window manager for X11<ref>{{cite web|url=https://swaywm.org/|title=Sway|website=swaywm.org|access-date=2018-12-20}}</ref>\n\n==={{Anchor|WESTON|MAYNARD}}Weston===\n[[File:PostmarketOS and Weston compositor running on Motorola Moto G.jpg|thumb|Weston running on [[postmarketOS]]]]\n\nWeston is the reference implementation of a Wayland compositor<ref>{{cite web|url=https://cgit.freedesktop.org/wayland/weston/plain/README.md?h=6.0 |title=README |website=cgit.freedesktop.org}}</ref> also developed by the Wayland project. It is written in [[C (programming language)|C]] and published under the [[MIT License]]. Weston has official support for only the [[Linux]] operating system due to Weston's dependence on certain features of the [[Linux kernel]], such as [[KMS driver|kernel mode-setting]], [[Graphics Execution Manager]] (GEM), and [[udev]], which have not been implemented in other Unix-like operating systems.{{r|wayland README}} When running on Linux, handling of the input hardware relies on [[evdev]], while the handling of buffers relies on [[Generic Buffer Management]] (GBM). However, in 2013 a prototype port of Weston to [[FreeBSD]] was announced.{{r|Larabel 2013 freebsd}}\n\nWeston supports [[High-bandwidth Digital Content Protection]] (HDCP).<ref>{{cite web|url=https://gitlab.freedesktop.org/wayland/weston/merge_requests/48/diffs?commit_id=05dc6b86431fe040f91ca7b4cf122fa9dc4dd8dd|title=Adding Content protection support in drm-backend (!48) \u00b7 Merge Requests \u00b7 wayland / weston|website=GitLab|language=en|access-date=2019-10-27}}</ref>\n\nWeston relies on GEM to share application buffers between the compositor and applications. It contains a plug-in system of \"shells\" for common desktop features like docks and panels.{{r|Willis 2013}} Clients are responsible for the drawing of their window borders and their decorations. For rendering, Weston can use [[OpenGL ES]]{{r|Paalanen 2012 EGL}} or the pixman library to do [[software rendering]].{{r|Larabel 2013 pixman}} The full OpenGL implementation is not used, because on most current systems, installing the full OpenGL libraries would also install [[GLX]] and other [[X Window System]] support libraries as dependencies.{{r|H\u00f8gsberg wayland GL}}\n\nA remote access interface for Weston was proposed in October 2013 by a [[RealVNC]] employee.{{r|RealVNC remote}}\n\n====Maynard====\n''Maynard'' is a [[graphical shell]] and has been written as a plug-in for Weston, just as the [[GNOME Shell]] has been written as a plug-in to [[Mutter (software)|Mutter]].{{r|maynard}}\n\n===libinput===\n[[File:Libinput for Wayland compositors.svg|thumb|right|upright=1.6|libinput was created to consolidate the input stack across multiple Wayland compositors.]]\n\nThe Weston code for handling input devices (keyboards, pointers, touch screens, etc.) was split into its own separate library, called ''libinput'', for which support was first merged in Weston&nbsp;1.5.{{r|wayland 1.5}}{{r|libinput announce}}\n\nLibinput handles input devices for multiple Wayland compositors and also provides a generic [[X.Org Server]] input driver. It aims to provide one implementation for multiple Wayland compositors with a common way to handle input events while minimizing the amount of custom input code compositors need to include. libinput provides device detection{{clarify|reason=both input and output devices?|date=December 2016}} (via [[udev]]), device handling, input device event processing and abstraction.{{r|libinput}}{{r|XDC2014 libinput}}\n\nVersion 1.0 of libinput followed version 0.21, and included support for tablets, button sets and touchpad gestures. This version will maintain stable API/ABI.{{r|libinput stable API}}\n\nAs GNOME/GTK and [[KDE Frameworks 5]]{{r|autoref0004}} have mainlined the required changes, Fedora&nbsp;22 will replace X.Org's evdev and Synaptics drivers with libinput.{{r|libinput fedora 22}}\n\nWith version 1.16, the [[X.Org Server]] obtained support for the [[libinput]] library in form of a wrapper called <tt>xf86-input-libinput</tt>.{{r|Hutterer 2014}}{{r|libinputfosdem15}}\n\n===Wayland Security Module===\nWayland Security Module is a proposition that resembles the [[Linux Security Module]] interface found in the [[Linux kernel]].{{r|XDC2014 wayland security}}\n\nSome applications (especially the ones related to [[accessibility]]) require privileged capabilities that should work across different Wayland compositors. Currently,{{When|date=October 2014}} applications under Wayland are generally unable to perform any sensitive tasks such as taking screenshots or injecting input events. Wayland developers are actively looking for feasible ways to handle privileged clients securely and then designing privileged interfaces for them.\n\nWayland Security Module is a way to delegate security decisions within the compositor to a centralized security decision engine.{{r|XDC2014 wayland security}}\n\n==Adoption==\nThe Wayland protocol is designed to be simple so that additional protocols and interfaces need to be defined and implemented to achieve a holistic windowing system. As of July 2014 these additional interfaces were being worked on. So, while the toolkits already fully support Wayland, the developers of the [[graphical shell]]s are cooperating with the Wayland developers creating the necessary additional interfaces.\n\n===Desktop Linux distributions===\n{{Outdated section|date=March 2020}}\nIn general, out-of-the-box support for a full desktop running Wayland in major Linux distributions is still in early stages.{{When?|date=April 2019}} Most Linux distributions that ship version 3.20 or newer of the Gnome desktop environment support manually installing a Wayland session, and in case of Gnome 3.22 or newer might default to Wayland. Notable early adopters that provide Wayland out of the box are:\n* [[Fedora Linux|Fedora]] starting with version 25 uses Wayland for the default GNOME 3.22 desktop session, with [[X.Org Server|X.Org]] as a fallback if the graphics driver cannot support Wayland.\n* RebeccaBlackOS is a [[live USB]] Debian-based<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=RBOS-2016-02-08|title=Wayland Live OS Is Now Based On Debian Testing, Working KDE Wayland Support |publisher=Phoronix}}</ref> Linux distribution that allows a convenient way to try out a real Wayland desktop without having to make any modifications to the main operating system of the computer.<ref>{{cite web|url=https://sourceforge.net/projects/rebeccablackos/|title=RebeccaBlackOS|publisher=Sourceforge}}</ref> It has been used since as early as 2012 to showcase Wayland.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=MTA3Njk|title=Trying Out Wayland With Rebecca Black |publisher=Phoronix}}</ref><ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=MTUzNTU|title=New Wayland Live CD Has A Lot Of Features |publisher=Phoronix}}</ref>\n* [[Ubuntu (operating system)|Ubuntu]] ships Wayland as default in Ubuntu 17.10 (Artful Aardvark).<ref>{{cite web|url=https://wiki.ubuntu.com/ArtfulAardvark/ReleaseNotes#Ubuntu_Desktop|title=ReleaseNotes for Ubuntu 17.10|publisher=Canonical}}</ref> Ubuntu reverted to X.Org for Ubuntu 18.04 LTS, as Wayland still has issues with screen sharing and remote desktop applications, and does not recover as well from window manager crashes.<ref>{{cite web|url=https://www.neowin.net/news/ubuntu-1804-will-revert-to-long-in-the-tooth-xorg|title=Ubuntu 18.04 will revert to long-in-the-tooth Xorg|publisher=}}</ref><ref>{{cite web |url=https://insights.ubuntu.com/2018/01/26/bionic-beaver-18-04-lts-to-use-xorg-by-default/| title=Bionic Beaver 18.04 LTS to use Xorg by default |publisher=Canonical}}</ref>\n* [[Red Hat Enterprise Linux]] ships Wayland as the default session in version 8.<ref>{{cite web|url=https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.0_release_notes/new-features|title=Chapter 4. New features|website=Red Hat Customer Portal|language=en|access-date=2019-05-08}}</ref>\n* [[Debian]] ships Wayland as the default session for GNOME since version 10.<ref>{{cite web|url=https://wiki.debian.org/NewInBuster|title=NewInBuster - Debian Wiki|website=wiki.debian.org|access-date=2019-07-15}}</ref>\n* [[Slackware Linux]] included Wayland on Feb 20th, 2020<ref>{{cite web|url=http://www.slackware.com/changelog/current.php?cpu=x86_64|title=Slackware ChangeLogs|publisher=Slackware Linux|access-date=2020-02-26}}</ref> for the development version, -current, which will eventually become version 15.0.\n\n===Toolkit support===\nToolkits supporting Wayland include the following:\n* [[Clutter (software)|Clutter]] has complete Wayland support.{{r|clutter 1.6}}{{r|Bradford 2011}}{{r|clutter 1.16}}\n* [[Enlightenment Foundation Libraries|EFL]] has complete Wayland support, except for selection.{{r|efl wayland}}\n* [[GTK]] 3.20 has complete Wayland support.{{r|gtk+ wayland}}\n* [[Qt (framework)|Qt]] 5 has complete Wayland support, and can be used to write both Wayland compositors and Wayland clients.\n* [[Simple DirectMedia Layer|SDL]] support for Wayland debuted with the 2.0.2 release{{r|sdl2 wayland}} and was enabled by default since version 2.0.4.{{r|Larabel 2016 SDL2}}\n* [[GLFW]] 3.2 has Wayland support.{{r|glfw wayland}}\n* [[FreeGLUT]] has initial Wayland support.{{r|freeglut wayland}}\n\n===Desktop environments===\nDesktop environments in process of being ported from X to Wayland include [[GNOME]],{{r|GNOME wl}} [[KDE Plasma 5]]{{r|KDE wl}} and [[Enlightenment (software)|Enlightenment]].{{r|enlightenment wl}}\n\nIn November 2015, Enlightenment e20 was announced with full Wayland support.{{r|e20 wl}}{{r|Larabel 2015 e20}}{{r|FOSDEM2016 wl}} GNOME 3.20 was the first version to have a full Wayland session.{{r|GNOME release plan}} GNOME 3.22 now defaults to Wayland.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=article&item=gnome-322-features&num=1|title=A Look At The Exciting Features/Improvements Of GNOME 3.22 |publisher=Phoronix}}</ref> GNOME 3.24 will ship the NVidia patches developed for Fedora 25.<ref>{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=GNOME-Mutter-Mainline-EGLStream|title=GNOME Lands Mainline NVIDIA Wayland Support Using EGLStreams |publisher=Phoronix}}</ref>\n\nWayland support for KDE Plasma was delayed until the release of Plasma 5,{{r|vizzzion}} though previously [[KWin]] 4.11 got an experimental Wayland support.{{r|Larabel 2013 kwin}} The version 5.4 of Plasma was the first with a Wayland session.{{r|Graesslin 2015}}\n\n===Other software===\nOther software supporting Wayland includes the following:\n* [[Intelligent Input Bus]] is working on Wayland support, it could be ready for Fedora 22.{{r|Schaller 2014}}\n* [[RealVNC]] published a Wayland developer preview in July 2014.{{r|RealVNC remote}}{{r|autoref0005}}{{r|autoref0006}}\n* [[Maliit]] is an [[input method]] framework that runs under Wayland.{{r|autoref0007}}{{r|autoref0008}}{{r|Maliit}}\n* [[kmscon]] supports Wayland with wlterm.{{r|kmscon wl}}\n* [[Mesa (computer graphics)|Mesa]] has Wayland support integrated.{{r|Hillesley 2012 p3}}\n* [[Eclipse (software)|Eclipse]] was made to run on Wayland during a [[Google Summer of Code|GSoC]]-Project in 2014.{{r|eclipse wl}}\n* The [[Vulkan WSI]] (Window System Interface) is a set of API calls serve a similar purpose as EGL does for OpenGL ES or GLX for OpenGL. Vulkan WSI includes support for Wayland from day one: VK_USE_PLATFORM_WAYLAND_KHR. Vulkan clients can run on unmodified Wayland servers, including Weston, GENIVI LayerManager, Mutter / GNOME Shell, Enlightenment, and more. The WSI allows applications to discover the different GPUs on the system, and display the results of GPU rendering to a window system.{{r|Collabora vulkan}}\n* [[SPURV (compatibility layer)|SPURV]], a compatibility layer for Android applications to run on GNU/Linux distributions using Wayland\n\n===Mobile and embedded hardware===\nMobile and embedded hardware supporting Wayland includes the following:\n* [[GENIVI Alliance]]: The GENIVI automotive industry consortium for [[in-vehicle infotainment]] (IVI) supports Wayland.{{r|genivi}}\n* [[Raspberry Pi]]: The [[Raspberry Pi Foundation]] in collaboration with [[Collabora]] released [[Maynard (software)|Maynard]] and work on improving performance and memory consumption, but do not expect to be able to replace X11 as the default display server until later.{{r|Collabora RPi}}{{r|RPi wayland}}\n* [[Jolla]]: Smartphones from Jolla use Wayland. It is also used as standard when Linux [[Sailfish OS]] is used with hardware from other vendors or when it is installed into Android devices by users.{{r|auto}}{{r|auto1}}{{r|auto2}}\n* [[Tizen]]: Tizen up to 2.x supports Wayland in [[in-vehicle infotainment]] (IVI) setups{{r|tizen 2.0}} and from 3.0 onward defaults to Wayland.{{r|tizen 3.0}}<ref>{{cite web\n | url        = https://arstechnica.com/gadgets/2017/05/the-samsung-z4-is-tizens-new-flagship-smartphone/\n | title      = The Samsung Z4 is Tizen\u2019s new flagship smartphone\n | last       = Amadeo\n | first      = Ron\n | work       = [[Ars Technica]]\n | accessdate = 13 May 2017}}</ref>\n\n==History==\n[[File:Linux graphics drivers DRI Wayland.svg|thumb|right|upright=1.6|'''Wayland''' uses [[Direct Rendering Manager|direct rendering]] over [[EGL (API)|EGL]].]]\n\nKristian H\u00f8gsberg, a [[Linux]] graphics and [[X.Org Server|X.Org]] [[Software developer|developer]] who previously worked on [[AIGLX]] and [[Direct Rendering Infrastructure|DRI2]], started Wayland as a spare-time project in 2008 while working for [[Red Hat]].{{r|H\u00f8gsberg 2008}}{{r|FOSDEM2012 interview}}{{r|Hillesley 2012}}{{r|LPC2009}} His stated goal was a system in which \"every frame is perfect, by which I mean that applications will be able to control the rendering enough that we'll never see tearing, lag, redrawing or flicker.\" H\u00f8gsberg was driving through the town of [[Wayland, Massachusetts]] when the underlying concepts \"crystallized\", hence the name.{{r|Hillesley 2012}}{{r|Jenkins 2011}}\n\nIn October 2010, Wayland became a [[freedesktop.org]] project.{{r|Larabel 2010 freedesktop}}{{r|wayland freedesktop}} As part of the migration the prior [[Google Groups|Google Group]] was replaced by the ''wayland-devel'' mailing list as the project's central point of discussion and development.\n\nThe Wayland client and server libraries were initially released under the [[MIT License]],{{r|original license}} while the reference compositor Weston and some example clients used the [[GNU General Public License version 2]].{{r|license clarification}} Later all the GPL code [[Software relicensing|was relicensed]] under the MIT license \"to make it easier to move code between the reference implementation and the actual libraries\".{{r|license change GPL}} In 2015 it was discovered that the license text used by Wayland was a slightly different and older version of the MIT license, and the license text was updated to the current version used by the [[X.Org Server|X.Org project]] (known as [[Expat License|MIT Expat License]]).{{r|License}}\n\nWayland works with all [[Mesa (computer graphics)|Mesa-compatible]] drivers with [[DRI2]] support{{r|Hillesley 2012 p3}} as well as [[Android (operating system)|Android]] drivers via the [[Hybris (software)|Hybris project]].{{r|wayland part1}}{{r|wayland part2}}{{r|Larabel 2013 Jolla}}\n\nThe developers of Wayland are largely current [[X.Org Server]] developers.{{r|Stone 2013 LCA}}\n\n===Releases===\n{| class=\"wikitable sortable collapsible text-align:center\"\n|+ Major Wayland and Weston releases{{r|wayland releases}}\n|-\n! rowspan=\"2\" | Version\n! rowspan=\"2\" | Date\n! colspan=\"2\" | Main features\n|-\n! Wayland\n! Weston\n|-\n| {{Version|o|0.85|sortKey=0.85}}\n| {{dts|format=dmy|2012|02|09}}{{r|wayland 0.85}}\n| colspan=\"2\" style=\"text-align: center;\" | First release.\n|-\n| {{Version|o|0.95|sortKey=0.95}}\n| {{dts|format=dmy|2012|07|24}}{{r|wayland 0.95}}\n| Began API stabilization.\n|\n|-\n| {{Version|o|1.0|sortKey=1.0}}\n| {{dts|format=dmy|2012|10|22}}{{r|wayland 1.0}}{{r|Scherschel wayland 1.0}}\n| Stable wayland-client API.\n|\n|-\n| {{Version|o|1.1|sortKey=1.1}}\n| {{dts|format=dmy|2013|04|15}}{{r|Larabel wayland 1.1}}{{r|wayland 1.1}}\n|\n| Software rendering.{{r|Larabel 2013 pixman}} FBDEV, RDP backends.\n|-\n| {{Version|o|1.2|sortKey=1.2}}\n| {{dts|format=dmy|2013|07|12}}{{r|Larabel wayland 1.2}}{{r|wayland 1.2}}\n| Stable wayland-server API.\n| Color management. Subsurfaces. [[Raspberry Pi]] backend.\n|-\n| {{Version|o|1.3|sortKey=1.3}}\n| {{dts|format=dmy|2013|10|11}}{{r|wayland 1.3}}\n| More pixel formats. Support for language bindings.\n| [[Android (operating system)|Android]] driver [[Hybris (software)#Features|support]] via [[libhybris]].\n|-\n| {{Version|o|1.4|sortKey=1.4}}\n| {{dts|format=dmy|2014|01|23}}{{r|wayland 1.4}}\n| New wl_subcompositor and wl_subsurface interfaces.\n| Multiple framebuffer formats. logind support for rootless Weston.\n|-\n| {{Version|o|1.5|sortKey=1.5}}\n| {{dts|format=dmy|2014|05|20}}{{r|wayland 1.5}}\n|\n| libinput. Fullscreen shell.\n|-\n| {{Version|o|1.6|sortKey=1.6}}\n| {{dts|format=dmy|2014|09|19}}{{r|wayland 1.6}}\n|\n| libinput by default.\n|-\n| {{Version|o|1.7|sortKey=1.7}}\n| {{dts|format=dmy|2015|02|14}}{{r|wayland 1.7}}{{r|weston 1.7}}\n|\n| Support for the Wayland presentation extension and for surface roles. [[In car entertainment|IVI]] shell protocol.\n|-\n| {{Version|o|1.8|sortKey=1.8}}\n| {{dts|format=dmy|2015|06|02}}{{r|wayland 1.8}}{{r|weston 1.8}}\n| Separated headers for core and generated protocol.\n| Repaint scheduling. Named outputs. Output transformations. Surface-shooting API.\n|-\n| {{Version|o|1.9|sortKey=1.9}}\n| {{dts|format=dmy|2015|09|21}}{{r|wayland 1.9}}{{r|weston 1.9}}\n| Updated license.\n| Updated license. New test framework. Triple-head DRM compositor. linux_dmabuf extension.\n|-\n| {{Version|o|1.10|sortKey=1.10}}\n| {{dts|format=dmy|2016|02|17}}{{r|wayland 1.10}}{{r|weston 1.10}}\n| Drag-and-drop functionality, grouped pointer events.{{r|autoref0010}}\n| Video 4 Linux 2, touch input, debugging improvements.{{r|Larabel wayland 1.10}}\n|-\n| {{Version|o|1.11|sortKey=1.11}}\n| {{dts|format=dmy|2016|06|01}}{{r|wayland 1.11}}{{r|weston 1.11}}\n| New backup loading routine, new setup logic.\n| Proxy wrappers, shared memory changes, Doxygen-generated HTML docs.\n|-\n| {{Version|o|1.12|sortKey=1.12}}\n| {{dts|format=dmy|2016|09|21}}{{r|wayland 1.12}}{{r|weston 1.12}}\n| Debugging support improved.\n| libweston and libweston-desktop. Pointer locking and confinement. Relative pointer support.\n|-\n| {{Version|o|1.13|sortKey=1.13}}\n| {{dts|format=dmy|2017|02|24}}{{r|wayland 1.13}}{{r|weston 2.0}}\n|\n| The ABI of Weston has been changed, thus the new version was named 2.0.0 rather than 1.13.0.\n|-\n| {{Version|o|1.14|sortKey=1.14}}\n| {{dts|format=dmy|2017|08|08}}{{r|wayland 1.14}}{{r|weston 3.0}}\n|\n| Weston 3.0.0 was released at the same time.\n|-\n| {{Version|o|1.15|sortKey=1.15}}\n| {{dts|format=dmy|2018|04|09}}{{r|wayland 1.15}}{{r|weston 4.0}}\n|\n| Weston 4.0.0 was released at the same time.\n|-\n| {{Version|o|1.16|sortKey=1.16}}\n| {{dts|format=dmy|2018|08|24}}{{r|wayland 1.16}}{{r|weston 5.0}}\n|\n| Weston 5.0.0 was released at the same time.\n|-\n| {{Version|o|1.17|sortKey=1.17}}\n| {{dts|format=dmy|2019|03|20}}{{r|wayland 1.17}}{{r|weston 6.0}}\n|\n| Weston 6.0.0 was released at the same time.\n|-\n| {{Version|o|1.18|sortKey=1.18}}\n| {{dts|format=dmy|2019|08|02}}{{r|wayland 1.18}}{{r|weston 7.0}}\n|\n| Weston 7.0.0 was released one month later.\n|-\n| {{Version|o|1.19|sortKey=1.19}}\n| {{dts|format=dmy|2020|02|29}}{{r|wayland 1.19}}{{r|weston 8.0}}\n|\n| Weston 8.0.0.\n|-\n| {{Version|c|1.20|sortKey=1.20}}\n| {{dts|format=dmy|2019|02|29}}{{r|wayland 1.20}}{{r|weston 8.0}}\n|\n|\n|-\n| colspan=4 | {{Version|l|show=11101}}\n|}\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Mir (software)]]\n* [[X Window System]]\n\n==References==\n{{Reflist|30em|refs=\n\n<!-- official documentation -->\n\n<ref name=\"wllicense\">{{cite web|url=https://cgit.freedesktop.org/wayland/wayland/tree/COPYING|title=wayland/wayland: root/COPYING|website=freedesktop.org|accessdate=14 June 2015}}</ref>\n<ref name=\"Wayland homepage\">{{cite web|title=Wayland|url=https://wayland.freedesktop.org/|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"Wayland FAQ\">{{cite web|title=Wayland FAQ|url=https://wayland.freedesktop.org/faq.html|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"Wayland architecture\">{{cite web|title=Wayland Architecture|url=https://wayland.freedesktop.org/architecture.html|website=Wayland project|accessdate=9 May 2016}}</ref>\n<ref name=\"xwayland\">{{cite web|title=X Clients under Wayland (XWayland)|url=https://wayland.freedesktop.org/xserver.html|publisher=Wayland project|accessdate=18 July 2014}}</ref>\n<ref name=\"wayland README\">{{cite web|url=https://cgit.freedesktop.org/wayland/wayland/plain/README|title=README file from the Wayland source code repository|work=[[freedesktop.org]]}}</ref>\n<ref name=\"wayland releases\">{{cite web|url=https://wayland.freedesktop.org/releases.html|title=Wayland|publisher=Wayland.freedesktop.org|date=|accessdate=15 July 2013}}</ref>\n<ref name=\"wlprotoxml\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=protocol/wayland.xml|url=https://cgit.freedesktop.org/wayland/wayland/tree/protocol/wayland.xml|website=FreeDesktop.org|accessdate=25 July 2014}}</ref>\n\n<ref name=\"Wayland doc\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Wayland Documentation 1.3|url=https://wayland.freedesktop.org/docs/pdf/Documentation-1.3-Wayland-en-US.pdf|accessdate=16 March 2016}}</ref>\n\n<!-- articles -->\n\n<ref name=\"Bradford 2011\">{{cite web|last1=Bradford|first1=Rob|title=Clutter & Cogl Wayland update|url=http://www.robster.org.uk/2011/12/16/clutter-cogl-wayland-update/|date=16 December 2011|accessdate=9 March 2016|quote=The Clutter client side support is basically complete}}</ref>\n<ref name=\"Corbet 2010\">{{cite web|last1=Corbet|first1=Jonathan|title=LPC: Life after X|url=https://lwn.net/Articles/413335/|website=LWN.net|date=5 November 2010|accessdate=17 April 2016}}</ref>\n<ref name=\"Edge 2012\">{{cite web|last1=Edge|first1=Jake|title=LFCS 2012: X and Wayland|url=https://lwn.net/Articles/491509/|website=LWN.net|date=11 April 2012|accessdate=17 April 2016}}</ref>\n<ref name=\"Edge 2013 jolla\">{{cite web|last1=Edge|first1=Jake|title=Jolla: Sailfish OS, Qt, and open source|url=https://lwn.net/Articles/561463/|website=LWN.net|date=31 July 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2013 decorations\">{{cite web|last1=Graesslin|first1=Martin|title=Client Side Window Decorations and Wayland|url=https://blog.martin-graesslin.com/blog/2013/02/client-side-window-decorations-and-wayland/|date=7 February 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2015\">{{cite web|last1=Graesslin|first1=Martin|title=Four years later|url=https://blog.martin-graesslin.com/blog/2015/06/four-years-later/|date=29 June 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Graesslin 2015 security\">{{cite web|last1=Graesslin|first1=Martin|title=Looking at the security of Plasma/Wayland|url=https://blog.martin-graesslin.com/blog/2015/11/looking-at-the-security-of-plasmawayland/|date=23 November 2015|accessdate=18 April 2016}}</ref>\n<ref name=\"Griffith 2013\">{{cite web|last1=Griffith|first1=Eric|title=The Wayland Situation: Facts About X vs. Wayland|url=https://www.phoronix.com/scan.php?page=article&item=x_wayland_situation|website=Phoronix.com|date=7 June 2013|accessdate=17 April 2016|page=2}}</ref>\n<ref name=\"Hillesley 2012\">{{cite web|last1=Hillesley|first1=Richard|title=Wayland - Beyond X|url=http://www.h-online.com/open/features/Wayland-Beyond-X-1432046.html|website=The H Open|publisher=Heise Media UK|date=13 February 2012|accessdate=8 March 2016}}</ref>\n<ref name=\"Hillesley 2012 p3\">Hillesley, p. 3.</ref>\n<ref name=\"H\u00f8gsberg 2008\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Premature publicity is better than no publicity|url=https://hoegsberg.blogspot.com/2008/11/premature-publicity-is-better-than-no.html|date=3 November 2008|accessdate=6 April 2016}}</ref>\n<ref name=\"H\u00f8gsberg 2011 GTK\">{{cite web|last1=H\u00f8gsberg|first1=Kristian|title=Multiple backends for GTK|url=https://hoegsberg.blogspot.com/2011/01/multiple-backends-for-gtk.html|date=3 January 2011|accessdate=10 March 2016}}</ref>\n<ref name=\"Hutterer 2014\">{{cite web|last1=Hutterer|first1=Peter|title=libinput - a common input stack for Wayland compositors and X.Org drivers|url=https://who-t.blogspot.com/2014/09/libinput-common-input-stack-for-wayland.html|date=24 September 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Jenkins 2011\">{{cite web|last1=Jenkins|first1=Evan|title=The Linux graphics stack from X to Wayland|url=https://arstechnica.com/information-technology/2011/03/the-linux-graphics-stack-from-x-to-wayland/|website=Ars Technica|date=22 March 2011|accessdate=17 April 2016}}</ref>\n<ref name=\"Kerrisk 2012\">{{cite web|last1=Kerrisk|first1=Michael|title=XDC2012: Graphics stack security|url=https://lwn.net/Articles/517375/|website=LWN.net|date=25 September 2012|accessdate=13 April 2016}}</ref>\n<ref name=\"Larabel 2010 freedesktop\">{{cite web|last1=Larabel|first1=Michael|title=Wayland Becomes A FreeDesktop.org Project|url=https://www.phoronix.com/scan.php?page=news_item&px=ODczNQ|website=Phoronix.com|date=29 October 2010|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2011 remote\">{{cite web|last1=Larabel|first1=Michael|title=Remote Wayland Server Project: Does It Work Yet?|url=https://www.phoronix.com/scan.php?page=news_item&px=OTgxMQ|website=Phoronix.com|date=18 August 2011|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 pixman\">{{cite web|last1=Larabel|first1=Michael|title=A Software-Based Pixman Renderer For Wayland's Weston|url=https://www.phoronix.com/scan.php?page=news_item&px=MTI2Nzg|website=Phoronix.com|date=6 January 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 freebsd\">{{cite web|last1=Larabel|first1=Michael|title=Wayland Begins Porting Process To FreeBSD|url=https://www.phoronix.com/scan.php?page=news_item&px=MTMwMzE|website=Phoronix.com|date=16 February 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 Jolla\">{{cite web|last1=Larabel|first1=Michael|title=Jolla Brings Wayland Atop Android GPU Drivers|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM0OTE|website=Phoronix.com|date=11 April 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.1\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.1 Officially Released With Weston 1.1|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM1Mjk|website=Phoronix.com|date=16 April 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2013 kwin\">{{cite web|last1=Larabel|first1=Michael|title=KDE 4.11 Beta Released, Works On Wayland|url=https://www.phoronix.com/scan.php?page=news_item&px=MTM4OTE|website=Phoronix.com|date=14 June 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.2\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.2.0 Released, Joined By Weston Compositor|url=https://www.phoronix.com/scan.php?page=news_item&px=MTQwOTg|website=Phoronix.com|date=13 July 2013|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2015 license\">{{cite web|last1=Larabel|first1=Michael|title=Wayland's MIT License To Be Updated/Corrected|url=https://www.phoronix.com/scan.php?page=news_item&px=Wayland-License-MIT-Update|website=Phoronix.com|date=10 June 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2015 e20\">{{cite web|last1=Larabel|first1=Michael|title=Enlightenment 0.20 Arrives With Full Wayland Support & Better FreeBSD Support|url=https://www.phoronix.com/scan.php?page=news_item&px=Enlightenment-0.20-Released|website=Phoronix.com|date=30 November 2015|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel 2016 SDL2\">{{cite web|last1=Larabel|first1=Michael|title=SDL 2.0.4 Was Quietly Released Last Week With Wayland & Mir By Default|url=https://www.phoronix.com/scan.php?page=news_item&px=SDL-2.0.4-Released|website=Phoronix.com|date=9 January 2016|accessdate=17 April 2016}}</ref>\n<ref name=\"Larabel wayland 1.10\">{{cite web|last1=Larabel|first1=Michael|title=Wayland 1.10 Officially Released|url=https://www.phoronix.com/scan.php?page=news_item&px=Wayland-1.10-Released|website=Phoronix.com|date=16 February 2016|accessdate=17 April 2016}}</ref>\n<ref name=\"Paalanen 2012 EGL\">{{cite web|last1=Paalanen|first1=Pekka|title=What does EGL do in the Wayland stack|url=https://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html|date=10 March 2012|accessdate=19 May 2016}}</ref>\n<ref name=\"Paalanen 2012\">{{cite web|last1=Paalanen|first1=Pekka|title=On supporting Wayland GL clients and proprietary embedded platforms|url=https://ppaalanen.blogspot.com/2012/11/on-supporting-wayland-gl-clients-and.html|date=21 November 2012|accessdate=6 April 2016|quote=Buffer sharing works by creating a handle for a buffer, and passing that handle to another process which then uses the handle to make the GPU access again the same buffer.}}</ref>\n<ref name=\"Paalanen 2014\">{{cite web|last1=Paalanen|first1=Pekka|title=Wayland protocol design: object lifespan|url=https://ppaalanen.blogspot.com/2014/07/wayland-protocol-design-object-lifespan.html|date=25 July 2014|accessdate=6 April 2016}}</ref>\n<ref name=\"Peres 2014\">{{cite web|last1=Peres|first1=Martin|title=Wayland Compositors - Why and How to Handle Privileged Clients!|url=https://mupuf.org/blog/2014/02/19/wayland-compositors-why-and-how-to-handle/|date=21 February 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Schaller 2014\">{{cite web|last1=Schaller|first1=Christian|title=Wayland in Fedora Update|url=https://blogs.gnome.org/uraeus/2014/07/03/wayland-in-fedora-update/|website=blogs.gnome.org|date=3 July 2014|accessdate=17 April 2016}}</ref>\n<ref name=\"Scherschel wayland 1.0\">{{cite web|last1=Scherschel|first1=Fabian|title=Wayland's 1.0 milestone fixes graphics protocol|url=http://www.h-online.com/open/news/item/Wayland-s-1-0-milestone-fixes-graphics-protocol-1734638.html|website=The H Open|publisher=Heise Media UK|date=23 October 2012|accessdate=17 April 2016}}</ref>\n<ref name=\"Vervloesem 2012\">{{cite web|last1=Vervloesem|first1=Koen|title=FOSDEM: The Wayland display server|url=https://lwn.net/Articles/481490/|website=LWN.net|date=15 February 2012|accessdate=9 May 2016}}</ref>\n<ref name=\"Willis 2013\">{{cite web|last1=Willis|first1=Nathan|title=LCA: The ways of Wayland|url=https://lwn.net/Articles/536862/|website=LWN.net|accessdate=19 May 2016|date=13 February 2013}}</ref>\n\n<ref name=\"LPC2009\">{{cite web|url=https://linuxplumbersconf.org/ocw/users/73|title=Wayland \u2013 A New Display Server for Linux|last=H\u00f8gsberg|first=Kristian|publisher=Linux Plumbers Conference, 2009}}</ref>\n<ref name=\"FOSDEM2012 interview\">{{cite web|title=Interview: Kristian H\u00f8gsberg|url=https://archive.fosdem.org/2012/interview/kristian-hogsberg.html|website=FOSDEM Archive|accessdate=8 March 2016|date=29 January 2012}}</ref>\n<ref name=\"XDC2014 libinput\">{{cite speech|title=Consolidating the input stacks with libinput|first=Peter|last=Hutterer|event=The X.Org Developer Conference 2014|location=Bordeaux|date=8 October 2014|url=https://www.x.org/wiki/Events/XDC2014/XDC2014HuttererLibInput/|accessdate=14 January 2020}}</ref>\n<ref name=\"XDC2014 wayland security\">{{cite speech|title=Security in Wayland-based Desktop Environments: Privileged Clients, Authorization, Authentication and Sandboxing!|first1=Steve|last1=Dodier-Lazaro|first2=Martin|last2=Peres|event=The X.Org Developer Conference 2014|location=Bordeaux|date=9 October 2014|url=https://phd.mupuf.org/publication/2014/10/09/security-in-wayland-based-desktop-environments/|accessdate=18 April 2016}}</ref>\n<ref name=\"FOSDEM2016 wl\">{{cite web|title=The Enlightenment of Wayland|url=https://fosdem.org/2016/schedule/event/enlightenment_of_wayland/|website=FOSDEM.org|accessdate=8 March 2016}}</ref>\n\n<ref name=\"hellowl\">{{cite web|title=The Hello Wayland Tutorial|url=https://hdante.wordpress.com/2014/07/08/the-hello-wayland-tutorial/|accessdate=25 July 2014}}</ref>\n<ref name=\"QtWayland\">{{cite web|title=QtWayland|url=https://wiki.qt.io/QtWayland|website=Qt Wiki|accessdate=9 March 2016}}</ref>\n<ref name=\"GTK Wayland support\">{{cite web|title=Full Wayland support in GTK|url=https://wiki.gnome.org/Initiatives/Wayland/GTK%2B|website=GNOME wiki|accessdate=10 March 2016}}</ref>\n<ref name=\"mutter wayland\">{{cite web|url=https://download.gnome.org/sources/mutter-wayland/|title=Index of /sources/mutter-wayland|website=download.gnome.org}}</ref>\n<ref name=\"maynard\">{{cite web|url=https://blog.barisione.org/2014-04/maynard/|title=Maynard announcement|date=16 April 2014|accessdate=16 April 2014}}</ref>\n<ref name=\"libinput\">{{cite web|title=libinput|url=https://www.freedesktop.org/wiki/Software/libinput/|publisher=Freedesktop.org|accessdate=21 May 2014}}</ref>\n<ref name=\"autoref0004\">{{cite web|url=https://rajeeshknambiar.wordpress.com/2015/02/22/libinput-support-added-to-touchpad-kcm/|title=Libinput support added to Touchpad KCM|date=22 February 2015}}</ref>\n<ref name=\"auto\">{{cite web|url=http://linuxg.net/the-first-jolla-smartphone-runs-with-wayland/|title=The First Jolla Smartphone Runs With Wayland|publisher=LinuxG.net|date=14 July 2013|accessdate=8 October 2013}}</ref>\n<ref name=\"auto1\">{{cite tweet|user=VDVsx|author=VDVsx|number=356029626759385088|date=13 July 2013|title=#sailfishos main components diagram. #Qt5 #Wayland #JollaHQ #Akademy}}</ref>\n<ref name=\"auto2\">{{cite tweet|user=JollaHQ|author=Jolla|number=356034168351756290|date=13 July 2013|title=@faenil @PeppeLaKappa @VDVsx our first Jolla will ship with wayland, yes}}</ref>\n<ref name=\"efl wayland\">{{cite web|url=http://www.chaosreigns.com/wiki/Wayland_State#The_state_of_Wayland.2C_2013-01-26|accessdate=6 March 2013|title=Wayland \u2013 Enlightenment|url-status=dead|archiveurl=https://web.archive.org/web/20130329104629/http://www.chaosreigns.com/wiki/Wayland_State#The_state_of_Wayland.2C_2013-01-26|archivedate=29 March 2013|df=dmy-all}}</ref>\n<ref name=\"gtk+ wayland\">{{cite web|url=https://wiki.gnome.org/Projects/GTK%2B/Roadmap|title=GTK Roadmap|accessdate=8 March 2016}}</ref>\n<ref name=\"sdl2 wayland\">{{cite web|last=Lantinga|first=Sam|title=SDL 2.0.2 RELEASED!|url=https://forums.libsdl.org/viewtopic.php?t=10088|date=8 March 2014|publisher=SDL Project|accessdate=18 March 2014}}</ref>\n<ref name=\"glfw wayland\">{{cite web|last=Berglund|first=Camilla|title=Implementation for Wayland \u00b7 Issue #106 \u00b7 glfw/glfw \u00b7 GitHub|url=https://github.com/glfw/glfw/issues/106#issuecomment-39872275|date=8 April 2014|accessdate=14 August 2014}}</ref>\n<ref name=\"GNOME wl\">{{cite web|title=GNOME Initiatives - Wayland|url=https://wiki.gnome.org/Initiatives/Wayland|website=GNOME Wiki|accessdate=8 March 2016}}</ref>\n<ref name=\"KDE wl\">{{cite web|title=KWin/Wayland|url=https://community.kde.org/KWin/Wayland|website=KDE Community Wiki|accessdate=8 March 2016}}</ref>\n<ref name=\"enlightenment wl\">{{cite web|title=Enlightenment - Wayland|url=https://www.enlightenment.org/about-wayland|website=Enlightenment.org|accessdate=8 March 2016}}</ref>\n<ref name=\"e20 wl\">{{cite web|title=Enlightenment DR 0.20.0 Release|url=https://phab.enlightenment.org/phame/post/view/167/enlightenment_dr_0.20.0_release/|website=Enlightenment.org|accessdate=8 March 2016}}</ref>\n<ref name=\"GNOME release plan\">{{cite web|title=ReleasePlanning/FeaturesPlans|url=https://wiki.gnome.org/ReleasePlanning/FeaturePlans|publisher=GNOME Project|accessdate=31 May 2015}}</ref>\n<ref name=\"vizzzion\">{{cite web|url=http://vizzzion.org/blog/2014/07/plasmas-road-to-wayland/|title=Plasma\u2019s Road to Wayland|date=25 July 2014}}</ref>\n<ref name=\"autoref0005\">{{cite web|url=http://www.realvnc.com/products/vnc/wayland/|title=VNC\u00ae Wayland Developer Preview|date=8 July 2014|url-status=dead|archiveurl=https://web.archive.org/web/20140714205900/http://www.realvnc.com/products/vnc/wayland/|archivedate=14 July 2014|df=dmy-all}}</ref>\n<ref name=\"autoref0007\">{{cite web|url=http://mikhas.posterous.com/maliit-status-update|title=Maliit Status Update|publisher=Posterous|date=2 April 2013|archiveurl=https://web.archive.org/web/20130517213318/http://mikhas.posterous.com/maliit-status-update|archivedate=17 May 2013|url-status=dead|accessdate=14 October 2013}}</ref>\n<ref name=\"autoref0008\">{{cite web|url=https://www.murrayc.com/permalink/2013/04/02/more-maliit-keyboard-improvements-qtquick2/|title=More Maliit Keyboard Improvements: QtQuick2|publisher=Murray's Blog|date=2 April 2013|accessdate=14 October 2013}}</ref>\n<ref name=\"Maliit\">{{cite web|url=https://wiki.maliit.org/Wayland_Input_Method_System_Proposal|archive-url=https://web.archive.org/web/20130611231511/https://wiki.maliit.org/Wayland_Input_Method_System_Proposal|url-status=dead|archive-date=11 June 2013|title=Maliit under Wayland|accessdate=14 September 2013}}</ref>\n<ref name=\"kmscon wl\">{{cite web|url=https://www.freedesktop.org/wiki/Software/kmscon/wlterm/|title=wlterm|publisher=Freedesktop.org|date=|accessdate=8 July 2014}}</ref>\n<ref name=\"eclipse wl\">{{cite web|url=http://blog.vogella.com/2014/08/18/eclipse-now-runs-on-wayland/|title=Eclipse now runs on Wayland|date=18 August 2014}}</ref>\n<ref name=\"Collabora vulkan\">{{cite web|last1=Stone|first1=Daniel|title=Vulkan 1.0 specification released with day-one support for Wayland|url=https://www.collabora.com/about-us/blog/2016/02/16/vulkan-1.0-specification-released-with-day-one-support-for-wayland/|date=16 February 2016}}</ref>\n<ref name=\"genivi\">{{cite web|url=http://projects.genivi.org/ivi-layer-management/node/17|archive-url=https://web.archive.org/web/20140201161624/http://projects.genivi.org/ivi-layer-management/node/17|url-status=dead|archive-date=1 February 2014|title=Wayland Backend DRM &#124; IVI Layer Management|publisher=GENIVI Alliance|accessdate=15 July 2013}}</ref>\n<ref name=\"Collabora RPi\">{{cite web|url=http://www.collabora.com/services/case-studies/raspberrypi/|title=Raspberry Pi Case Study|publisher=Collabora|date=|accessdate=9 August 2013}}</ref>\n<ref name=\"RPi wayland\">{{cite web|url=http://www.raspberrypi.org/archives/4053|title=Wayland preview|publisher=Raspberry Pi|date=|accessdate=9 August 2013}}</ref>\n<ref name=\"tizen 2.0\">{{cite web|url=https://wiki.tizen.org/w/index.php?title=IVI/IVI_Setup&oldid=1037|title=IVI/IVI Setup|publisher=Tizen Wiki|date=|accessdate=8 April 2013}}</ref>\n<ref name=\"wayland part1\">{{cite web|last=Munk|first=Carsten|url=https://mer-project.blogspot.com/2013/04/wayland-utilizing-android-gpu-drivers.html|title=Wayland utilizing Android GPU drivers on glibc based systems, Part 1|publisher=Mer Project|date=11 April 2013|accessdate=3 July 2013}}</ref>\n<ref name=\"wayland part2\">{{cite web|last=Munk|first=Carsten|url=https://mer-project.blogspot.com/2013/05/wayland-utilizing-android-gpu-drivers.html|title=Wayland utilizing Android GPU drivers on glibc based systems, Part 2|publisher=Mer Project|date=8 June 2013|accessdate=3 July 2013}}</ref>\n<ref name=\"autoref0010\">{{cite web|url=https://news.softpedia.com/news/wayland-1-10-display-server-officially-released-wayland-1-11-arrives-in-may-2016-500558.shtml|title=Wayland 1.10 Display Server Officially Released, Wayland 1.11 Arrives in May 2016|last=Nestor|first=Marius|date=18 February 2016|work=[[Softpedia]]}}</ref>\n<ref name=\"X.Org Security\">{{cite web|url=https://www.x.org/wiki/Development/Documentation/Security/|title=X.Org Security|work=X.Org Foundation|accessdate=2 July 2017|quote=The X server has long included an extension, SECURITY, which provides support for a simple trusted/untrusted connection model.}}</ref>\n<ref name=\"X11 Security extension\">{{cite web|url=https://www.x.org/releases/current/doc/xextproto/security.html|title=Security Extension Specification|last=Wiggins|first=David P.|work=X Consortium Standard|date=15 November 1996|accessdate=2 July 2017}}</ref>\n<ref name=\"XACE\">{{cite web|url=https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/Xserver/XACE-Spec.html|title=X Access Control Extension Specification|last=Walsh|first=Eamon F.|date=2009|accessdate=2 July 2017}}</ref>\n<ref name=\"GNOME Remote Desktop\">{{cite web|url=https://ctrl.blog/entry/wayland-gnome-remote-desktop|title=Remote desktop capabilities set to make a comeback in GNOME on Wayland|website=Ctrl.blog|author= Daniel Aleksandersen|accessdate=29 August 2017}}</ref>\n\n<!-- slides -->\n\n<ref name=\"Barnes slides\">{{cite web|last1=Barnes|first1=Jesse|title=Introduction to Wayland|url=https://www.tizen.org/sites/default/files/lfcs2012_barnes.pdf|publisher=Intel Open Source Technology Center|accessdate=18 April 2016|quote=Does not include a rendering API \u2013 Clients use what they want and send buffer handles to the server}}</ref>\n<ref name=\"Wayland Compositor\">{{cite web|title=Wayland/X Compositor Architecture By Example: Enlightenment DR19|url=http://events.linuxfoundation.org/sites/events/files/slides/presentation_0.pdf|accessdate=18 April 2016}}</ref>\n<ref name=\"libinputfosdem15\">{{cite web|last1=de Goede|first1=Hans|title=Replacing xorg input - Drivers with libinput|url=https://archive.fosdem.org/2015/schedule/event/libinput/attachments/slides/591/export/events/attachments/libinput/slides/591/libinput_xorg.pdf|date=1 February 2015|accessdate=18 April 2016}}</ref>\n\n<!-- media (video/audio/...) -->\n\n<ref name=\"Stone 2013 LCA\">{{cite speech|title=The real story behind Wayland and X|first=Daniel|last=Stone|event=linux.conf.au 2013|location=Canberra|date=28 January 2013|url=https://mirror.linux.org.au/pub/linux.conf.au/2013/mp4/The_real_story_behind_Wayland_and_X.mp4|accessdate=13 April 2016}}</ref>\n\n<!-- mailing lists -->\n\n<ref name=\"License\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024226.html|title=[ANNOUNCE] wayland 1.8.93|first=Bryce|last=Harrington|date=15 September 2015|mailinglist=[[freedesktop.org]]}}</ref>\n<ref name=\"H\u00f8gsberg remotewl\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2010-November/000097.html|title=Network transparency argument|last=H\u00f8gsberg|first=Kristian|date=9 November 2010|quote=Wayland isn't a remote rendering API like X, but that doesn't exclude network transparency. Clients render into a shared buffer and then have to tell the compositor (...) what they changed. The compositor can then send the new pixels in that region out over the network. The Wayland protocol is already violently asynchronous, so it should be able to handle a bit of network lag gracefully. Remote fullscreen video viewing or gaming isn't going to work well, [but] I don't know any other display system that handles that well and transparently.}}</ref>\n<ref name=\"Jackson remotewl\">{{cite web|url=https://lists.fedoraproject.org/pipermail/devel/2010-November/145306.html|title=&#91;Re:&#93; Ubuntu moving towards Wayland|last=Jackson|first=Adam|date=9 November 2010}}</ref>\n<ref name=\"xorg 1.16\">{{cite web|url=https://lists.x.org/archives/xorg-announce/2014-July/002457.html|title=ANNOUNCE: xorg-server 1.16.0|publisher=[[freedesktop.org]]|date=17 July 2014}}</ref>\n<ref name=\"H\u00f8gsberg wayland GL\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2010-December/000330.html|title=Blender3D & cursor clamping.|date=9 December 2010|last=H\u00f8gsberg|first=Kristian}}</ref>\n<ref name=\"RealVNC remote\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2013-October/011536.html|title=[RFC weston] remote access interface module|publisher=[[freedesktop.org]]|date=18 October 2013}}</ref>\n<ref name=\"libinput stable API\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/020131.html|title=libinput: the road to 1.0|first=Peter|last=Hutterer|date=22 February 2015}}</ref>\n<ref name=\"libinput fedora 22\">{{cite web|url=https://lists.fedoraproject.org/pipermail/devel/2015-February/208204.html|title=Libinput now enabled as default xorg driver for F-22 workstation installs|first=Hans de|last=Goede|date=23 February 2015}}</ref>\n<ref name=\"libinput announce\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2013-November/011930.html|title=[RFC] Common input device library|last=\u00c5dahl|first=Jonas|publisher=Wayland mailing list|date=12 November 2013}}</ref>\n<ref name=\"clutter 1.6\">{{cite mailing list|mailing-list=clutter-announce|last=Bassi|first=Emmanuele|title=ANNOUNCE: Clutter 1.6.0 (stable)|date=31 January 2011|url=https://mail.gnome.org/archives/gnome-announce-list/2011-January/msg00072.html}}</ref>\n<ref name=\"clutter 1.16\">{{cite mailing list|mailing-list=clutter-announce|last=Bassi|first=Emmanuele|title=ANNOUNCE: Clutter 1.16.0 (stable)|url=https://mail.gnome.org/archives/clutter-list/2013-September/msg00011.html|date=24 September 2013}}</ref>\n<ref name=\"autoref0006\">{{cite web|url=https://lists.freedesktop.org/archives/wayland-devel/2014-July/015949.html|title=RealVNC Wayland developer preview email|publisher=[[freedesktop.org]]|date=9 July 2014}}</ref>\n<ref name=\"tizen 3.0\">{{cite mailing list|mailing-list=IVI|last=VanCutsem|first=Geoffroy|title=[IVI] Tizen IVI 3.0-M1 released|url=https://lists.tizen.org/pipermail/ivi/2013-July/000563.html|date=10 July 2013}}</ref>\n<ref name=\"wayland freedesktop\">{{cite web|url=https://groups.google.com/forum/#!topic/wayland-display-server/sfvLwLaHwsE|title=Moving to freedesktop.org|last=H\u00f8gsberg|first=Kristian|date=29 October 2010|accessdate=31 July 2013}}</ref>\n<ref name=\"original license\">{{cite mailing list|mailing-list=wayland-display-server|last=H\u00f8gsberg|first=Kristian|title=Wayland is now under MIT license|date=3 December 2008|url=https://groups.google.com/forum/#!topic/wayland-display-server/daWzNkr5erE}}</ref>\n<ref name=\"license clarification\">{{cite mailing list|mailing-list=wayland-devel|last=H\u00f8gsberg|first=Kristian|title=Wayland license clarification|date=22 November 2010|url=https://lists.freedesktop.org/archives/wayland-devel/2010-November/000249.html}}</ref>\n<ref name=\"license change GPL\">{{cite mailing list|mailing-list=wayland-devel|last=H\u00f8gsberg|first=Kristian|title=License update|date=19 September 2011|url=https://lists.freedesktop.org/archives/wayland-devel/2011-September/001386.html}}</ref>\n<ref name=\"wayland 0.85\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=[ANNOUNCE] Wayland and Weston 0.85.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2012-February/002072.html|website=wayland-devel mailing list|date=9 February 2012}}</ref>\n<ref name=\"wayland 0.95\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 0.95.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2012-July/004542.html|website=wayland-devel mailing list|date=24 July 2012}}</ref>\n<ref name=\"wayland 1.0\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.0|url=https://lists.freedesktop.org/archives/wayland-devel/2012-October/005967.html|website=wayland-devel mailing list|date=22 October 2012}}</ref>\n<ref name=\"wayland 1.1\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=1.1 Released|url=https://lists.freedesktop.org/archives/wayland-devel/2013-April/008631.html|website=wayland-devel mailing list|date=15 April 2013}}</ref>\n<ref name=\"wayland 1.2\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.2.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2013-July/010278.html|website=wayland-devel mailing list|date=12 July 2013}}</ref>\n<ref name=\"wayland 1.3\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.3 releases are out|url=httpslists.freedesktop.org/archives/wayland-devel/2013-October/011419.html|website=wayland-devel mailing list|date=11 October 2013}}</ref>\n<ref name=\"wayland 1.4\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.4 is out|url=https://lists.freedesktop.org/archives/wayland-devel/2014-January/012903.html|website=wayland-devel mailing list|date=24 January 2014}}</ref>\n<ref name=\"wayland 1.5\">{{cite web|last=H\u00f8gsberg|first=Kristian|title=Wayland and Weston 1.5.0 is released|url=https://lists.freedesktop.org/archives/wayland-devel/2014-May/014955.html|website=wayland-devel mailing list|date=20 May 2014}}</ref>\n<ref name=\"wayland 1.6\">{{cite web|last1=Paalanen|first1=Pekka|title=Wayland and Weston 1.6.0 released|url=https://lists.freedesktop.org/archives/wayland-devel/2014-September/017396.html|website=wayland-devel mailing list|date=19 September 2014}}</ref>\n<ref name=\"wayland 1.7\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] wayland 1.7.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/019976.html|website=wayland-devel mailing list|date=14 February 2015}}</ref>\n<ref name=\"weston 1.7\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] weston 1.7.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-February/019977.html|website=wayland-devel mailing list|date=14 February 2015}}</ref>\n<ref name=\"wayland 1.8\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] wayland 1.8.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-June/022415.html|website=wayland-devel mailing list|date=2 June 2015}}</ref>\n<ref name=\"weston 1.8\">{{cite web|last1=Harrington|first1=Bryce|title=[ANNOUNCE] weston 1.8.0|url=https://lists.freedesktop.org/archives/wayland-devel/2015-June/022416.html|website=wayland-devel mailing list|date=2 June 2015}}</ref>\n<ref name=\"wayland 1.9\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024302.html|title=[ANNOUNCE] wayland 1.9.0|first=Bryce|last=Harrington|date=21 September 2015|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.9\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2015-September/024303.html|title=[ANNOUNCE] weston 1.9.0|first=Bryce|last=Harrington|date=21 September 2015|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.10\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-February/027038.html|title=[ANNOUNCE] wayland 1.10.0|first=Bryce|last=Harrington|date=17 February 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.10\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-February/027039.html|title=[ANNOUNCE] weston 1.10.0|first=Bryce|last=Harrington|date=17 February 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.11\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-June/029163.html|title=[ANNOUNCE] wayland 1.11.0|first=Bryce|last=Harrington|date=1 June 2016|accessdate=1 June 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.11\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-June/029164.html|title=[ANNOUNCE] weston 1.11.0|first=Bryce|last=Harrington|date=1 June 2016|accessdate=1 June 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.12\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-September/031121.html|title=[ANNOUNCE] wayland 1.12.0|first=Bryce|last=Harrington|date=21 September 2016|accessdate=21 September 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 1.12\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2016-September/031123.html|title=[ANNOUNCE] weston 1.12.0|first=Bryce|last=Harrington|date=21 September 2016|accessdate=21 September 2016|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.13\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-February/033193.html|title=[ANNOUNCE] wayland 1.13.0|first=Bryce|last=Harrington|date=21 February 2017|accessdate=30 April 2017|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 2.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-February/033231.html|title=[ANNOUNCE] weston 2.0.0|first=Bryce|last=Harrington|date=25 February 2017|accessdate=30 April 2017|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.14\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-August/034748.html|title=[ANNOUNCE] wayland 1.14.0|first=Bryce|last=Harrington|date=8 August 2017|accessdate=25 March 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 3.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2017-August/034749.html|title=[ANNOUNCE] weston 3.0.0|first=Bryce|last=Harrington|date=8 August 2017|accessdate=25 March 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.15\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-April/037767.html|title=[ANNOUNCE] wayland 1.15.0|first=Derek|last=Foreman|date=9 April 2018|accessdate=15 April 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 4.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-April/037768.html|title=[ANNOUNCE] weston 4.0.0|first=Derek|last=Foreman|date=9 April 2018|accessdate=15 April 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.16\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-August/039358.html|title=[ANNOUNCE] wayland 1.16.0|first=Derek|last=Foreman|date=24 August 2018|accessdate=30 November 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"weston 5.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2018-August/039359.html|title=[ANNOUNCE] weston 5.0.0|first=Derek|last=Foreman|date=24 August 2018|accessdate=30 November 2018|mailinglist=wayland-devel}}</ref>\n<ref name=\"wayland 1.17\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2019-March/040335.html |title=[ANNOUNCE] wayland 1.17.0|website=Wayland|date=28 March 2019 |first=Derek |last=Foreman |accessdate= 17 June 2019}}</ref>\n<ref name=\"weston 6.0\">{{cite mailing list |url=https://lists.freedesktop.org/archives/wayland-devel/2019-March/040356.html |title=[ANNOUNCE] weston 6.0.0|website=Wayland|date=21 March 2019 |first=Derek |last=Foreman |accessdate= 17 June 2019}}</ref>\n<ref name=\"wayland 1.18\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041207.html|title=[ANNOUNCE] wayland 1.18|website=Wayland|date=11 February 2020|first=Simon|last=Sur|accessdate=12 February 2020}}</ref>\n<ref name=\"weston 7.0\">{{cite mailing list |url=https://lists.freedesktop.org/archives/wayland-devel/2019-August/040812.html |title=[ANNOUNCE] weston 7.0.0|website=Wayland|date=23 August 2019 |first=Simon |last=Ser |accessdate= 22 October 2019}}</ref>\n<ref name=\"wayland 1.16.93\">{{cite mailing list |url= https://lists.freedesktop.org/archives/wayland-devel/2019-March/040291.html |title = [ANNOUNCE] wayland 1.16.93 |website=Wayland|date=14 March 2019 |first=Derek |last=Foreman |accessdate= 3 January 2020}}</ref>\n<ref name=\"weston 6.0.91\">{{cite mailing list |url= https://lists.freedesktop.org/archives/wayland-devel/2019-July/040732.html |title = [ANNOUNCE] weston 6.0.91|website=Wayland|date=19 July 2019 |first=Simon |last=Ser |accessdate= 3 January 2020}}</ref>\n<ref name=\"weston 8.0\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-January/041147.html|title=[ANNOUNCE] weston 8.0.0|website=Wayland|date=24 January 2020|first=Simon|last=Ser|accessdate=12 February 2020}}</ref>\n<ref name=\"wayland 1.19\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041267.html|title=[ANNOUNCE] wayland-protocols 1.19|website=Wayland|date=29 February 2020|first=Jonas|last=\u00c5dahl|accessdate=26 March 2020}}</ref>\n<ref name=\"wayland 1.20\">{{cite mailing list|url=https://lists.freedesktop.org/archives/wayland-devel/2020-February/041269.html|title=[ANNOUNCE] wayland-protocols 1.20|website=Wayland|date=29 February 2020|first=Jonas|last=\u00c5dahl|accessdate=26 March 2020}}</ref>\n<!-- source code/commits -->\n\n<ref name=\"xdg-shell\">{{cite web|url=https://cgit.freedesktop.org/wayland/weston/commit/?id=3c4dc74cebe1de6f71ec9eeb9794eaaff4327e95|title=xdg_shell: Adding a new shell protocol|work=[[freedesktop.org]]|date=3 December 2013|accessdate=14 June 2014}}</ref>\n<ref name=\"freeglut wayland\">{{cite web|url=https://github.com/dcnieho/FreeGLUT/commit/9b30564b6d9c9f106c7d079d6cf9207363a49111|title=FreeGLUT: Implement initial Wayland support|website=GitHub}}</ref>\n\n<!-- other -->\n\n}}\n\n==External links==\n* {{Official website|https://wayland.freedesktop.org/}}\n* {{Openhub|wayland|Wayland}}\n* {{cite web\n | url   = https://video.fosdem.org/2012/maintracks/k.1.105/Wayland.webm\n | title = Wayland at FOSDEM 2012\n | last  = H\u00f8gsberg\n | first = Kristian}}\n* {{cite web\n | url       = https://lwn.net/Articles/415589/\n | title     = The way to Wayland: Preparing for life After X\n | last      = Brockmeier\n | first     = Joe 'Zonker'\n | publisher = [[LWN.net]]\n | date      = 17 November 2010}}\n* {{cite web\n | url       = http://www.h-online.com/open/features/Wayland-Beyond-X-1432046.html\n | title     = Wayland \u2013 Beyond X\n | last      = Hillesley\n | first     = Richard\n | publisher = [[The H]]\n | date      = 13 February 2012}}\n* {{cite web\n | url       = https://www.phoronix.com/scan.php?page=article&item=x_wayland_situation\n | title     = The Wayland Situation: Facts About X vs. Wayland\n | last      = Griffith\n | first     = Eric\n | publisher = Phoronix\n | date      = 7 June 2013}}\n* [https://www.phoronix.com/scan.php?page=news_item&px=Wayland-DragonFlyBSD-Port Wayland on DragonflyBSD]\n\n{{freedesktop.org}}\n{{Desktop environments and window managers for X11 and Wayland}}\n\n[[Category:Wayland| ]]\n[[Category:Free software programmed in C]]\n[[Category:Software using the MIT license]]\n[[Category:Collabora]]\n", "name_user": "Eternaltyro", "label": "safe", "comment": "Change year", "url_page": "//en.wikipedia.org/wiki/Wayland_(display_server_protocol)"}
