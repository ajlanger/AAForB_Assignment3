{"title_page": "C Sharp (programming language)", "text_new": "{{short description|Multi-paradigm (object-oriented) programming language}}\n{{Use mdy dates|date=October 2012}}\n{{Use British English Oxford spelling|date=December 2011}}\n{{Correct title|title=C# (programming language)|reason=#}} \n<!-- Per Ecma, \"C#\" (i.e. not \"C\u266f\") is the standard spelling of the name of the language. See \"Language name\" section and talk page. -->\n{{Infobox programming language\n| name = C#\n| logo = [[File:C Sharp logo.svg|150px]]\n| paradigm = [[Structured programming|Structured]], [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]], [[Event-driven programming|event-driven]], [[The Task-based Asynchronous Pattern|task-driven]], [[Functional programming|functional]], [[Generic programming|generic]], [[Reflective programming|reflective]], [[Concurrent computing|concurrent]]\n| family = [[C (programming language)|C]]\n| year = {{start date and age|2000}}<ref>{{Cite web | url=https://www.infoq.com/minibooks/emag-c-sharp-preview |title = InfoQ eMag: A Preview of C# 7}}</ref>\n| designer = [[Microsoft]]\n| developer = Microsoft\n| latest release version = 8.0<ref>{{Cite web | url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8 |title = What's new in C# 8}}</ref>\n| latest release date = {{start date and age|2019|09|23}}\n| typing = [[Static typing|static]], [[Dynamic typing|dynamic]],<ref name=\"dynamic\" /> [[Type system#Strong and weak typing|strong]], [[Type system#Safely and unsafely typed systems|safe]], [[Nominative type system|nominative]], [[Type inference|partially inferred]]\n| implementations = [[Microsoft Visual C Sharp|Visual C#]], [[.NET Framework]], [[Mono (software)|Mono]], [[.NET Core]], [[DotGNU|DotGNU (discontinued)]], [[Universal Windows Platform]]\n| dialects = [[C\u03c9]], [[Spec Sharp|Spec#]], [[Polyphonic C Sharp|Polyphonic C#]], [http://ecsharp.net Enhanced C#]\n| influenced_by = [[C++]],<ref name=\"influenced by CPP\" /> [[C\u03c9]], [[Eiffel (programming language)|Eiffel]], [[F Sharp (programming language)|F#]],{{efn|for async}} [[Haskell (programming language)|Haskell]], [[Icon (programming language)|Icon]], [[J Sharp|J#]], [[Visual J++|J++]], [[Java (programming language)|Java]],<ref name=\"influenced by CPP\" /> [[ML (programming language)|ML]], [[Modula-3]], [[Object Pascal]],<ref name=\"influenced by op\" /> [[Rust (programming language)|Rust]], [[Visual Basic|VB]]\n| influenced = [[Chapel (programming language)|Chapel]],<ref name=\"chplspec\">{{cite web|title=Chapel spec (Acknowlegements)|url=http://chapel.cray.com/spec/spec-0.98.pdf|date=2015-10-01|accessdate=2016-01-14|publisher=Cray Inc}}</ref> [[Clojure]],<ref>{{cite web |url=http://www.codequarterly.com/2011/rich-hickey|archive-url=https://web.archive.org/web/20170111184835/http://www.codequarterly.com/2011/rich-hickey|url-status=dead|archive-date=2017-01-11|title=Rich Hickey Q&A by Michael Fogus|access-date=2017-01-11}}</ref> [[Crystal (programming language)|Crystal]],<ref name=\"rel_0.18.0\">\n  {{cite web\n  | url   = http://crystal-lang.org/2016/06/14/crystal-0.18.0-released.html#comment-2732771703\n  | title = Crystal 0.18.0 released!\n  | last  = Borenszweig\n  | first = Ary\n  | quote = It's heavily inspired by Ruby, and other languages (like C#, Go and Python).\n  }}\n</ref> [[D (programming language)|D]], [[J Sharp|J#]], [[Dart (programming language)|Dart]],<ref>{{cite web|title=Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013|url=https://www.youtube.com/watch?v=huawCRlo9H4&t=30m10s|accessdate=22 December 2013}}</ref> [[F Sharp (programming language)|F#]], [[Hack (programming language)|Hack]], [[Java (programming language)|Java]],<ref>Java 5.0 added several new language features (the [[foreach loop|enhanced for loop]], [[Object type (object-oriented programming)#Autoboxing|autoboxing]], [[variadic function|varargs]] and [[Java annotation|annotations]]), after they were introduced in the similar (and competing) C# language [http://www.barrycornelius.com/papers/java5/] [http://www.levenez.com/lang/]</ref><ref name=\"influenced\" /> [[Kotlin (programming language)|Kotlin]], [[Nemerle]], [[Oxygene (programming language)|Oxygene]], Ring,<ref name=\"Ring programming language and other languages\">{{cite web |url=http://ring-lang.sourceforge.net/doc1.6/introduction.html#ring-and-other-languages |title=Ring programming language and other languages  |author=Ring Team |date=5 December 2017 |work=ring-lang.net |publisher=[[ring-lang]]}}</ref> [[Rust (programming language)|Rust]], [[Swift (programming language)|Swift]],<ref name=\"lattner2014\">{{cite web|url=http://nondot.org/sabre/|title=Chris Lattner's Homepage|last=Lattner|first=Chris|date=2014-06-03|accessdate=2014-06-03|publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, CLU, and far too many others to list.}}</ref> [[Vala (programming language)|Vala]], [[TypeScript]]\n| platform = [[Common Language Infrastructure]]\n| license = [[Roslyn (compiler)|Roslyn]] compiler: [[Apache License|Apache License 2.0]]<ref name=\"auto\">{{Cite web|url=https://github.com/dotnet/roslyn|title=The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn|date=November 13, 2019|via=GitHub}}</ref><br/>\n[[.NET Core|.NET Core CLR]]: [[MIT License|MIT/X11]]<ref>{{Cite web|url=https://github.com/dotnet/coreclr|title=CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr|date=November 13, 2019|via=GitHub}}</ref>\n\n[[Mono (software)|Mono]] compiler: dual [[GPLv3]] and MIT/X11<br/>\n[[DotGNU]]: dual [[GPL]] and [[LGPL]]\n| file_ext = <code>.cs</code>\n| website = {{URL|http://csharp.net}}\n| wikibooks = C Sharp Programming\n| versions = See [[#Versions|\u00a7 Versions]]\n}}\n\n'''C#''' (pronounced ''see sharp'', like the musical note [[C\u266f (musical note)|C\u266f]], but written with the [[number sign]]){{efn|By convention, a [[number sign]] is used for the second character in normal text; in artistic representations, sometimes a true [[\u266f|sharp sign]] is used: C\u266f. However the ECMA 334 standard states: ''\"The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023).\"''}} is a general-purpose, [[multi-paradigm programming language]] encompassing [[strong typing]], [[lexically scoped]], [[Imperative programming|imperative]], [[Declarative programming|declarative]]<!--e.g. attributes-->, [[Functional programming|functional]], [[Generic programming|generic]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class]]-based), and [[Component-based software engineering|component-oriented]] programming disciplines.<ref name=\"ECMA-334\" /> It was developed around 2000 by [[Microsoft]] as part of its [[.NET Framework|.NET]] initiative, and later approved as an [[international standard]] by [[Ecma International|Ecma]] (ECMA-334) and [[International Organization for Standardization|ISO]] (ISO/IEC 23270:2018). [[Mono (software)|Mono]] is the name of the free and open-source project to develop a compiler and runtime for the language. C# is one of the programming languages designed for the [[Common Language Infrastructure]] (CLI).\n\nC# was designed by [[Anders Hejlsberg]], and its development team is currently led by [[Mads Torgersen]]. The most recent version is 8.0, which was released in 2019 alongside [[Visual Studio 2019]] version 16.3.<ref name=\"new_features_in_8\">{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes?view=vs-2019#16.3.0|title=Visual Studio 2019 version 16.3 Release Notes|last=|first=|date=|website=Microsoft Docs}}</ref>\n\n==Design goals==\nThe Ecma standard lists these design goals for C#:<ref name=\"ECMA-334\">{{cite book\n |url= https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf\n |title= C# Language Specification\n |publisher= [[Ecma International]]\n |edition= 4th\n |date=June 2006\n |accessdate= January 26, 2012\n}}</ref>\n\n* The language is intended to be a simple, modern, general-purpose, [[object-oriented programming]] language.\n* The language, and implementations thereof, should provide support for software engineering principles such as [[strong type]] checking, array [[bounds checking]], detection of attempts to use [[uninitialized variable]]s, and automatic [[Garbage collection (computer science)|garbage collection]]. Software robustness, durability, and programmer productivity are important.\n* The language is intended for use in developing [[software components]] suitable for deployment in distributed environments.\n* Portability is very important for source code and programmers, especially those already familiar with [[C (programming language)|C]] and [[C++]].\n* Support for [[internationalization and localization|internationalization]] is very important.\n* C# is intended to be suitable for writing applications for both hosted and [[embedded system]]s, ranging from the very large that use sophisticated [[operating system]]s, down to the very small having dedicated functions.\n* Although C# applications are intended to be economical with regard to memory and [[processing power]] requirements, the language was not intended to compete directly on performance and size with C or assembly language\n\n==History==\nDuring the development of the .NET Framework, the [[Base Class Library|class libraries]] were originally written using a [[managed code]] compiler system called ''\"Simple Managed C\"'' (SMC).<ref>{{cite web\n |url= http://blogs.msdn.com/jasonz/archive/2007/11/23/couple-of-historical-facts.aspx\n |title= Couple of Historical Facts\n |first= Jason\n |last= Zander\n |date= November 24, 2008\n |accessdate= February 23, 2009\n}}</ref><ref>{{cite web\n |url= http://aspadvice.com/blogs/rbirkby/archive/2006/11/28/What-language-was-ASP.Net-originally-written-in_3F00_.aspx\n |archive-url= https://web.archive.org/web/20160624010356/http://aspadvice.com/blogs/rbirkby/archive/2006/11/28/What-language-was-ASP.Net-originally-written-in_3F00_.aspx\n |archive-date= June 24, 2016\n |title= What language was ASP.Net originally written in?\n |date= November 28, 2006\n |first= Scott\n |last= Guthrie\n |authorlink= Scott Guthrie\n |accessdate= February 21, 2008\n}}</ref> In January 1999, [[Anders Hejlsberg]] formed a team to build a new language at the time called Cool, which stood for \"[[C-like]] Object Oriented Language\".<ref name=\"computerworld2008\">{{cite magazine\n |url= http://www.computerworld.com.au/article/261958/-z_programming_languages_c\n |title= The A-Z of Programming Languages: C#\n |first= Naomi\n |last= Hamilton\n |magazine= [[Computerworld]]\n |date= October 1, 2008\n |accessdate= October 1, 2008\n}}</ref> Microsoft had considered keeping the name \"Cool\" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 [[Professional Developers Conference]], the language had been renamed C#, and the class libraries and [[ASP.NET]] runtime had been ported to C#.\n\nHejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of [[Turbo Pascal]], [[Embarcadero Delphi]] (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and [[Visual J++]]. In interviews and technical papers he has stated that flaws<ref>{{Cite web|url=http://nilsnaegele.com/techreview/Reviews/Details/1|title=Details|website=nilsnaegele.com|access-date=2019-04-07}}</ref> in most major programming languages (e.g. [[C++]], [[Java (programming language)|Java]], [[Embarcadero Delphi|Delphi]], and [[Smalltalk]]) drove the fundamentals of the [[Common Language Runtime]] (CLR), which, in turn, drove the design of the C# language itself.\n\n[[James Gosling]], who created the [[Java (programming language)|Java]] programming language in 1994, and [[Bill Joy]], a co-founder of [[Sun Microsystems]], the originator of Java, called C# an \"imitation\" of Java; Gosling further said that \"[C# is] sort of Java with reliability, productivity and security deleted.\"<ref name=\"gosling\">{{cite web\n |url=http://news.cnet.com/2100-1082-817522.html\n |title=Why Microsoft's C# isn't\n |author=Wylie Wong\n |publisher=CNET: CBS Interactive\n |year=2002\n |accessdate=May 28, 2014\n}}</ref><ref>{{cite web | url = http://news.cnet.com/2010-1071-831385.html | title = Microsoft's blind spot|author=Bill Joy | publisher = cnet.com| date = February 7, 2002| accessdate  = January 12, 2010| author-link = Bill Joy}}</ref> Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that \"Java and C# are almost identical programming languages. Boring repetition that lacks innovation,\"<ref name=\"kreft-langer\">{{cite web\n |url=http://www.artima.com/weblogs/viewpost.jsp?thread=6543\n |title=After Java and C# - what is next?\n |author=Klaus Kreft and Angelika Langer\n |year=2003\n |accessdate=June 18, 2013\n}}</ref> \"Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs,\" and  \"C# borrowed a lot from Java - and vice versa. Now that C# supports [[Boxing (Computer Science)|boxing]] and unboxing, we'll have a very similar feature in Java.\"<ref>{{cite web\n |accessdate= January 12, 2010\n |date= July 3, 2003\n |publisher= artima.com\n |title= After Java and C# - what is next?|author= Klaus Kreft and Angelika Langer\n |url= http://www.artima.com/weblogs/viewpost.jsp?thread=6543\n}}</ref>\nIn July 2000, Hejlsberg said that C# is \"not a Java clone\" and is \"much closer to C++\" in its design.<ref name=\"JohnOsborn\">{{Cite journal\n |last= Osborn\n |first= John\n |date= August 1, 2000\n |url= http://windowsdevcenter.com/pub/a/oreilly/windows/news/hejlsberg_0800.html\n |title= Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg\n |publisher= O'Reilly Media\n |accessdate= November 14, 2009\n }}</ref>\n\nSince the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of [[Generic programming|generics]] to both languages, with vastly different implementations. C# makes use of [[Reification (computer science)|reification]] to provide \"first-class\" generic objects that can be used like any other class, with [[code generation (compiler)|code generation]] performed at class-load time.<ref>{{cite web\n | url = http://msdn.microsoft.com/en-us/library/512aeb7t.aspx\n | title = Generics (C# Programming Guide)\n | publisher = Microsoft| accessdate  = March 21, 2011}}</ref>\nFurthermore, C# has added several major features to accommodate functional-style programming, culminating in the [[Language Integrated Query|LINQ]] extensions released with C# 3.0 and its supporting framework of [[lambda expressions]], [[extension method]]s, and [[anonymous type]]s.<ref>{{cite web\n | url = http://msdn.microsoft.com/en-us/library/bb308959.aspx\n | title = LINQ: .NET Language-Integrated Query|author=Don Box and Anders Hejlsberg\n | publisher = Microsoft\n | date = February 2007\n | accessdate  = March 21, 2011}}</ref>  These features enable C# programmers to use functional programming techniques, such as [[Closure (computer science)|closures]], when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of [[boilerplate code]] that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.<ref>{{cite web\n | url = http://blog.abodit.com/2010/04/why-functional-programming-is-better-linq-c-sharp-than-procedural-code/\n | title = Why functional programming and LINQ is often better than procedural code\n | last = Mercer\n | first = Ian\n | publisher = abodit.com\n | date = April 15, 2010\n | accessdate  = March 21, 2011}}</ref>\n\nC# used to have a [[mascot]] called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004.<ref>{{cite web|url=http://blogs.msdn.com/b/danielfe/archive/2004/01/29/64429.aspx |title=Andy Retires |work=Dan Fernandez's Blog |publisher=Blogs.msdn.com |date=January 29, 2004 |accessdate=October 4, 2012}}</ref>\n\nC# was originally submitted to the ISO subcommittee JTC 1/SC 22 for review,<ref>{{cite web|url=http://www.iso.org/iso/iso_technical_committee.html?commid=45202 |title=Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces |publisher=ISO |date= |accessdate=October 4, 2012}}</ref> under ISO/IEC 23270:2003,<ref>{{cite web|url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=36768 |title=ISO/IEC 23270:2003 - Information technology - C# Language Specification |publisher=Iso.org |date=August 23, 2006 |accessdate=October 4, 2012}}</ref> was withdrawn and was then approved under ISO/IEC 23270:2006.<ref>{{cite web|url=http://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?csnumber=42926 |title=ISO/IEC 23270:2006 - Information technology - Programming languages - C# |publisher=Iso.org |date=January 26, 2012 |accessdate=October 4, 2012}}</ref>\n\n===Name===\nMicrosoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation.<ref>{{cite web|last1=Mariani|first1=Rico|title=My History of Visual Studio (Part 1) \u2013 Rico Mariani's Performance Tidbits|url=https://blogs.msdn.microsoft.com/ricom/2009/10/05/my-history-of-visual-studio-part-1/|website=Rico Mariani's Performance Tidbits}}</ref> That project was not completed but the name lives on.\n\n[[File:Treblecsharp5.svg|thumb|100px|right|[[C\u266f (musical note)|C-sharp musical note]]]]\nThe name \"C sharp\" was inspired by the musical notation where a [[Sharp (music)|sharp]] indicates that the written note should be made a [[semitone]] higher in [[Pitch (music)|pitch]].<ref>{{cite web\n |url= http://www.jameskovacs.com/blog/CNETHistoryLesson.aspx\n |title= C#/.NET History Lesson\n |first= James\n |last= Kovacs\n |date= September 7, 2007\n |accessdate= June 18, 2009\n}}</ref>\nThis is similar to the language name of [[C++]], where \"++\" indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a [[Typographic ligature|ligature]] of four \"+\" symbols (in a two-by-two grid), further implying that the language is an increment of C++.<ref>{{cite magazine\n|url=http://www.computerworld.com.au/article/261958/a-z_programming_languages_c_/?pp=2\n|title=The A-Z of Programming Languages: C#\n|first= Anders\n|last= Hejlsberg\n|magazine= [[Computerworld]]\n|date= October 1, 2008\n}}</ref>\n\nDue to technical limitations of display (standard fonts, browsers, etc.) and the fact that the sharp symbol ({{unichar|266F|MUSIC SHARP SIGN|html=|nlink=Sharp (music)}}) is not present on most [[keyboard layout]]s, the [[number sign]] ({{unichar|0023|NUMBER SIGN|html=}}) was chosen to approximate the sharp symbol in the written name of the programming language.<ref name=\"MS CSharp FAQ\">{{cite web\n |url=http://msdn.microsoft.com/vcsharp/previous/2002/FAQ/default.aspx \n |title=Microsoft C# FAQ \n |publisher=[[Microsoft]] \n |accessdate=March 25, 2008 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20060214002638/http://msdn.microsoft.com/vcsharp/previous/2002/FAQ/default.aspx \n |archivedate=February 14, 2006 \n |df=mdy \n}}</ref>\nThis convention is reflected in the ECMA-334 C# Language Specification.<ref name=\"ECMA-334\"/>\n\nThe \"sharp\" suffix has been used by a number of other .NET languages that are variants of existing languages, including [[J Sharp|J#]] (a .NET language also designed by Microsoft that is derived from Java 1.1), [[A Sharp (.NET)|A#]] (from [[Ada (programming language)|Ada]]), and the [[functional programming]] language [[F Sharp (programming language)|F#]].<ref name=\"MS FSharp FAQ\">{{cite web\n |url=http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/faq.aspx \n |title=F# FAQ \n |publisher=Microsoft Research \n |accessdate=June 18, 2009 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20090218222543/http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/faq.aspx \n |archivedate=February 18, 2009 \n |df=mdy \n}}</ref> The original implementation of [[EiffelStudio|Eiffel for .NET]] was called Eiffel#,<ref>{{cite web\n |url= http://msdn.microsoft.com/en-us/library/ms973898.aspx\n |title= Full Eiffel on the .NET Framework\n |date=June 2002\n |first1= Raphael\n |last1= Simon\n |first2= Emmanuel\n |last2= Stapf\n |first3= Bertrand\n |last3= Meyer\n |publisher= [[Microsoft]]\n |accessdate= June 18, 2009\n}}</ref> a name retired since the full [[Eiffel (programming language)|Eiffel]] language is now supported. The suffix has also been used for [[Library (computing)|libraries]], such as [[Gtk Sharp|Gtk#]] (a .NET [[Wrapper pattern|wrapper]] for [[GTK+]] and other [[GNOME]] libraries) and [[Cocoa Sharp|Cocoa#]] (a wrapper for [[Cocoa (API)|Cocoa]]).\n\n===Versions===\n{| class=\"wikitable\" style=\"margin:0 auto 0 auto;\"\n|-\n! rowspan=\"2\" | Version\n! colspan=\"3\" | Language specification\n! rowspan=\"2\" | Date\n! rowspan=\"2\" | [[.NET Framework|.NET Version]]\n! rowspan=\"2\" | [[Visual Studio]]\n|-\n! [[Ecma International|Ecma]]\n! [[ISO/IEC]]\n! [[Microsoft]]\n|-\n| Version C# 1.0\n| rowspan=\"2\"|[http://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-334,%202nd%20edition,%20December%202002.pdf December 2002]\n| rowspan=\"2\"|[http://www.techstreet.com/cgi-bin/pdf/free/378672/ISO+IEC+23270-2003.pdf April 2003]\n| [http://download.microsoft.com/download/a/9/e/a9e229b9-fee5-4c3e-8476-917dee385062/CSharp%20Language%20Specification%20v1.0.doc January 2002]\n| January 2002\n| [[.NET Framework version history#.NET Framework 1.0|.NET Framework 1.0]]\n| [[Visual Studio .NET|Visual Studio .NET 2002]]\n|-\n| Version C# 1.1<br/>C# 1.2\n| [http://download.microsoft.com/download/5/e/5/5e58be0a-b02b-41ac-a4a3-7a22286214ff/csharp%20language%20specification%20v1.2.doc October 2003]\n| April 2003\n| [[.NET Framework 1.1]]\n| [[Visual Studio .NET 2003]]\n|-\n| [[C Sharp 2.0|Version C# 2.0]]\n| [https://web.archive.org/web/20121202194727/http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf June 2006]\n| [http://standards.iso.org/ittf/PubliclyAvailableStandards/c042926_ISO_IEC_23270_2006(E).zip September 2006]\n| [http://download.microsoft.com/download/9/8/f/98fdf0c7-2bbd-40d3-9fd1-5a4159fa8044/csharp%202.0%20specification_sept_2005.doc September 2005]{{efn|The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.}}\n| November 2005\n| [[.NET Framework 2.0]]<br/>[[.NET Framework 3.0]]\n| [[Visual Studio 2005]]<br/>[[Visual Studio 2008]]\n|-\n| [[C Sharp 3.0|Version C# 3.0]]\n| colspan=\"2\" rowspan=\"2\" {{no|None}}\n| [http://download.microsoft.com/download/3/8/8/388e7205-bc10-4226-b2a8-75351c669b09/CSharp%20Language%20Specification.doc August 2007]\n| November 2007\n| .NET Framework 2.0 (Except LINQ)<ref name=\"danielmoth1\">{{cite web|url=http://www.danielmoth.com/Blog/using-c-30-from-net-20.aspx |title=Using C# 3.0 from .NET 2.0 |publisher=Danielmoth.com |date=May 13, 2007 |accessdate=October 4, 2012}}</ref><br/>\n.NET Framework 3.0 (Except LINQ)<ref name=\"danielmoth1\"/><br/>\n[[.NET Framework 3.5]]\n| [[Visual Studio 2008]]\n|-\n| [[C Sharp 4.0|Version C# 4.0]]\n| April 2010\n| April 2010\n| [[.NET Framework 4.0|.NET Framework 4]]\n| [[Visual Studio 2010]]\n|-\n| Version C# 5.0\n| [https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf December 2017]\n| [https://standards.iso.org/ittf/PubliclyAvailableStandards/c075178_ISO_IEC_23270_2018.zip December 2018]\n| [https://www.microsoft.com/en-us/download/details.aspx?id=7029 June 2013]\n| August 2012\n| [[.NET Framework 4.5]]\n| [[Visual Studio 2012]]<br/>[[Visual Studio 2013]]\n|-\n| Version C# 6.0\n| colspan=\"2\" rowspan=\"6\" {{no|None}}\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/ Draft]\n| July 2015\n| [[.NET Framework 4.6]]<br/>.NET Core 1.0<br/>.NET Core 1.1\n| [[Visual Studio 2015]]\n|-\n| Version C# 7.0\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/ Specification proposal]\n| March 2017\n| [[.NET Framework 4.7]]\n| [[Visual Studio 2017]] version 15.0\n|-\n| Version C# 7.1\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.1/ Specification proposal]\n| August 2017\n| .NET Core 2.0\n| [[Visual Studio 2017]] version 15.3<ref>{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes-v15.3|title=Visual Studio 2017 15.3 Release Notes|website=docs.microsoft.com}}</ref>\n|-\n| Version C# 7.2\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.2/ Specification proposal]\n| November 2017\n| \n| [[Visual Studio 2017]] version 15.5<ref name=\"visualstudio.com\">{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes|title=Visual Studio 2017 15.9 Release Notes|website=docs.microsoft.com}}</ref>\n|-\n| Version C# 7.3\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.3/ Specification proposal]\n| May 2018\n| .NET Core 2.1<br/>.NET Core 2.2<br/>[[.NET Framework 4.8]]\n| [[Visual Studio 2017]] version 15.7<ref name=\"visualstudio.com\"/>\n|-\n| Version C# 8\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ Specification proposal]\n| September 2019\n| .NET Core 3.0\n| [[Visual Studio 2019]] version 16.3<ref name=\"visualstudio.com\"/>\n|}\n\n===New features===\n;C# 2.0\n{{colbegin}}\n* Generics<ref name=\"csv2_msdn\">{{cite web|title=What's new in the C# 2.0 Language and Compiler|url=http://msdn.microsoft.com/en-us/library/7cz8t42e(v=vs.80).aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Partial types<ref name=\"csv2_msdn\" />\n* [[Anonymous method]]s<ref name=\"csv2_msdn\" />\n* Iterators<ref name=\"csv2_msdn\" />\n* Nullable value types<ref name=\"csv2_msdn\" />\n* Getter/setter separate accessibility<ref name=\"csv2_msdn\" />\n* Method group conversions (delegates)<ref name=\"csv2_msdn\" />\n* Co- and Contra-variance for delegates<ref name=\"csv2_msdn\" />\n* Static classes<ref name=\"csv2_msdn\" />\n* Delegate inference<ref name=\"csv2_msdn\" />\n* [[Null coalescing operator]]<ref name=\"csv2_msdn\" />\n{{colend}}\n\n;C# 3.0\n{{colbegin}}\n* Implicitly typed local variables<ref name=\"csv3_msdn\">{{cite web|last1=Hejlsberg|first1=Anders|last2=Torgersen|first2=Mads|title=Overview of C# 3.0|url=http://msdn.microsoft.com/en-us/library/bb308966.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Object and collection initializers<ref name=\"csv3_msdn\" />\n* Auto-Implemented properties<ref name=\"csv3_msdn\" />\n* Anonymous types<ref name=\"csv3_msdn\" />\n* [[Extension method]]s<ref name=\"csv3_msdn\" />\n* Query expressions<ref name=\"csv3_msdn\" />\n* [[Anonymous function|Lambda expressions]]<ref name=\"csv3_msdn\" />\n* Expression trees<ref name=\"csv3_msdn\" />\n* Partial methods<ref name=csv3_partmeths>{{cite web|last1=Ghosh|first1=Wriju|title=C# 3.0 : Partial * Garbage Collection Methods|url=http://blogs.msdn.com/b/wriju/archive/2007/12/13/c-3-0-partial-methods.aspx|website=MSDN Blogs|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n{{colend}}\n\n;C# 4.0\n{{colbegin}}\n* Dynamic binding<ref name=\"csv4_msdn\">{{cite web|last1=Burrows|first1=Chris|title=C# 4.0 - New C# Features in the .NET Framework 4|url=http://msdn.microsoft.com/en-us/magazine/ff796223.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Named and optional arguments<ref name=\"csv4_msdn\" />\n* Generic co- and contravariance<ref name=\"csv4_msdn\" />\n* Embedded interop types (\"NoPIA\")<ref name=\"csv4_msdn\" />\n{{colend}}\n\n;C# 5.0<ref>{{cite web|last=Hejlsberg|first=Anders|title=Future directions for C# and Visual Basic|url=http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-816T|work=C# lead architect|publisher=Microsoft|accessdate=September 21, 2011}}</ref>\n{{colbegin}}\n* [[Async/await|Asynchronous methods]]<ref name=\"csv5_msdn\">{{cite web|title=An Introduction to New Features in C# 5.0|url=http://blogs.msdn.com/b/mvpawardprogram/archive/2012/03/26/introduction-of-new-features-in-c-5-0.aspx|website=MSDN Blogs|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Caller info attributes<ref name=\"csv5_msdn\" />\n{{colend}}\n\n;C# 6.0\n{{colbegin}}\n* Compiler-as-a-service ([[Microsoft Roslyn|Roslyn]])\n* Import of static type members into namespace<ref name=\"roslyn_6\">{{cite web|title=Language feature implementation status|url=https://github.com/dotnet/roslyn/wiki/Languages-features-in-C%23-6-and-VB-14|website=github|publisher=Microsoft|accessdate=13 February 2015}}</ref>\n* Exception filters<ref name=\"roslyn_6\" />\n* Await in catch/finally blocks<ref name=\"roslyn_6\" />\n* Auto property initializers<ref name=\"roslyn_6\" />\n* Default values for getter-only properties<ref name=\"roslyn_6\" />\n* Expression-bodied members<ref name=\"roslyn_6\" />\n* Null propagator ([[Safe navigation operator|null-conditional operator]], succinct null checking)<ref name=\"roslyn_6\" />\n* String interpolation<ref name=\"roslyn_6\" />\n* nameof operator<ref name=\"roslyn_6\" />\n* Dictionary initializer<ref name=\"roslyn_6\" />\n{{colend}}\n\n;C# 7.0<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7|title=What's new in C# 7|last=|first=|date=2016-12-21|website=Microsoft Docs|access-date=}}</ref><ref name=\"new_features_in_7\">{{Cite web|title = New Features in C# 7.0|url = https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/|website = .NET Blog|access-date = 2017-06-09}}</ref>\n{{colbegin}}\n* Inline out variable declaration\n* [[Pattern matching]]\n* Tuple types and tuple literals\n* Deconstruction\n* [[Local function]]s\n* Digit separators\n* Binary literals\n* Ref returns and locals\n* Generalized async return types\n* Expression bodied constructors and finalizers\n* Expression bodied getters and setters\n* Throw can also be used as expression\n{{colend}}\n\n;C# 7.1<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1|title=What's new in C# 7.1|last=|first=|date=|website=Microsoft Docs|access-date=2017-10-09}}</ref>\n{{colbegin}}\n* Async main\n* Default literal expressions\n* Inferred tuple element names\n{{colend}}\n\n;C# 7.2<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2|title=What's new in C# 7.2|last=|first=|date=|website=Microsoft Docs|access-date=2017-11-26}}</ref>\n{{colbegin}}\n* Reference semantics with value types\n* Non-trailing named arguments\n* Leading underscores in numeric literals\n* private protected access modifier\n{{colend}}\n\n;C# 7.3<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3|title=What's new in C# 7.3|last=|first=|date=|website=Microsoft Docs|access-date=2018-06-23}}</ref>\n{{colbegin}}\n* Accessing fixed fields without pinning\n* Reassigning ref local variables\n* Using initializers on stackalloc arrays\n* Using fixed statements with any type that supports a pattern\n* Using additional generic constraints\n{{colend}}\n\n;C# 8.0<ref name=\"C#8\">{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8|title=What's new in C# 8.0|last=|first=|date=|website=Microsoft Docs}}</ref>\n{{colbegin}}\n* {{code|readonly struct}} members\n* Default interface members\n* {{code|switch}} expressions\n* Property, Tuple, and positional patterns\n* {{code|using}} declarations\n* {{code|static}} local functions\n* Disposable {{code|ref struct}}\n* Nullable reference types\n* Indices and Ranges\n* Null-coalescing assignment\n* Async Streams\n{{colend}}\n\n==Syntax==\n{{Main|C Sharp syntax}}\n{{See also|Syntax (programming languages)}}\nThe core syntax of C# language is similar to that of other C-style languages such as C, C++ and Java. In particular:\n\n* Semicolons are used to denote the end of a statement.\n* [[Curly brackets]] are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into [[namespaces]].\n* Variables are assigned using an [[equals sign]], but compared using [[==|two consecutive equals signs]].\n* [[Square brackets]] are used with [[Array data structure|arrays]], both to declare them and to get a value at a given index in one of them.\n\n==Distinguishing features==\n{{See also|Comparison of C Sharp and Java}}\nSome notable features of C# that distinguish it from C, C++, and Java where noted, are:\n\n===Portability===\nBy design, C# is the programming language that most directly reflects the underlying [[Common Language Infrastructure]]&nbsp;(CLI).<ref>{{cite book|title=Visual Studio 2010 and .NET 4 Six-in-One|year=2010|publisher=Wrox Press|isbn=978-0470499481}}</ref>  Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate [[Common Intermediate Language]] (CIL), or generate any other specific format. Theoretically, a C# compiler could generate machine code like traditional compilers of C++ or [[Fortran]].\n\n===Typing===\nC# supports strongly typed implicit variable declarations with the keyword <code>var</code>, and implicitly typed arrays with the keyword <code>new[]</code> followed by a collection initializer.\n\nC# supports a strict [[Boolean data type]], <code>bool</code>. Statements that take conditions, such as <code>while</code> and <code>if</code>, require an expression of a type that implements the <code>true</code> operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as <code>if (a)</code> require only that <code>a</code> is convertible to bool, allowing <code>a</code> to be an int, or a pointer. C# disallows this \"integer meaning true or false\" approach, on the grounds that forcing programmers to use expressions that return exactly <code>bool</code> can prevent certain types of programming mistakes such as <code>if (a = b)</code> (use of assignment <code>=</code> instead of equality <code>==</code>).\n\nC# is more [[Type safety|type safe]] than C++. The only [[implicit conversion]]s by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during [[Just-in-time compilation|JIT]], and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ [[copy constructor]]s and conversion operators, which are both implicit by default.\n\nC# has explicit support for [[Covariance and contravariance (computer science)|covariance and contravariance]] in generic types, unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods.\n\n[[enumerated type|Enumeration]] members are placed in their own [[Scope (programming)|scope]].\n\nThe C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions.\n\nLocal variables cannot [[Variable shadowing|shadow]] variables of the enclosing block, unlike C and C++.\n<!--NOTE TO EDITORS: Classes do NOT *NEED* to go in a Namespace. Check the spec or try it out yourself before stating otherwise.-->\n\n===Metaprogramming===\n[[Metaprogramming]] via C# attributes is part of the language. Many of these attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.\n\n===Methods and functions===\nA method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a class property. As in other syntactically similar languages, such as C++ and [[ANSI C]], the signature of a method is a declaration comprising in order: any optional scope modifier keywords (such as <code>private</code>), the explicit specification of its return type (such as <code>int</code>, or the keyword <code>void</code> if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Certain specific kinds of methods, such as those that simply get or set a class property by return value or assignment, do not require a full signature, but in the general case, the definition of a class includes the full signature declaration of its methods.\n\nLike C++, and unlike Java, C# programmers must use the scope modifier keyword <code>virtual</code> to allow methods to be overridden by subclasses.<ref>{{cite web|title=virtual (C# Reference)|url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual|website=docs.microsoft.com|language=en-us}}</ref>\n\n''Extension methods'' in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to add methods to an object that they feel should exist on that object and its derivatives.\n\nThe type <code>dynamic</code> allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.\n\nC# has support for strongly-typed function pointers via the keyword <code>delegate</code>. Like the Qt framework's pseudo-C++ ''signal'' and ''slot'', C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so.\n\nC# offers Java-like <code>synchronized</code> method calls, via the attribute <code>[MethodImpl(MethodImplOptions.Synchronized)]</code>, and has support for [[Mutual exclusion|mutually-exclusive locks]] via the keyword <code>lock</code>.\n\n===Property===\nC# provides [[property (programming)|properties]] as [[syntactic sugar]] for a common pattern in which a pair of methods, [[Mutator method|accessor (getter) and mutator (setter)]] encapsulate operations on a single [[Attribute (computing)|attribute]] of a class. No redundant method signatures{{Definition needed|The term signature/signatures are used in several places, and without any definition or explanation it is difficult to understand the concepts explained unless you have prior detailed knowledge of how C# define the concept \"Signature\"|date=May 2019}} for the getter/setter implementations need be written, and the property may be accessed using attribute syntax rather than more verbose method calls.\n\n===Namespace===\nA C# <code>namespace</code> provides the same level of code isolation as a Java <code>package</code> or a C++ {{C++|namespace}}, with very similar rules and features to a <code>package</code>. Namespaces can be imported with the \"using\" syntax.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive|title=using directive - C# Reference|last=|first=|date=|website=Microsoft Docs|language=en-us|access-date=2019-04-14}}</ref>\n\n===Memory access===\nIn C#, memory address pointers can only be used within blocks specifically marked as ''unsafe'', and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a \"live\" object or have the well-defined [[Nullable type|null]] value; it is impossible to obtain a reference to a \"dead\" object (one that has been garbage collected), or to a random block of memory. An unsafe pointer can point to an instance of an 'unmanaged' value type that does not contain any references to garbage-collected objects, array, string, or a block of stack-allocated memory. Code that is not marked as unsafe can still store and manipulate pointers through the <code>System.IntPtr</code> type, but it cannot dereference them.\n\nManaged memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of [[memory leak]]s by freeing the programmer of responsibility for releasing memory that is no longer needed.\n\n===Exception===\n[[Checked exceptions]] are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and versionability.<ref>{{cite web\n| url = http://www.artima.com/intv/handcuffs.html\n| title = The Trouble with Checked Exceptions\n| first1=Bill\n| last1=Venners\n| first2=Bruce\n| last2=Eckel\n| date = August 18, 2003\n| accessdate = March 30, 2010\n}}</ref>\n\n===Polymorphism===\nUnlike [[C++]], C# does not support [[multiple inheritance]], although a class can implement any number of [[Protocol (object-oriented programming)|interfaces]]. This was a design decision by the language's lead architect to avoid complication and simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same signature, i. e. two methods with the same name and taking parameters of the same type in the same order, C# allows implementing each method depending on which interface that method is being called through or, like Java, allows implementing the method once, and having that be the one invocation on a call through any of the class's interfaces.\n\nHowever, unlike [[Java (programming language)|Java]], C# supports [[operator overloading]]. Only the most commonly overloaded operators in C++ may be overloaded in C#.\n\n===Language Integrated Query (LINQ)===\nC# has the ability to utilize [[Language Integrated Query|LINQ]] through the .NET Framework. A developer can query any <code>IEnumerable&lt;T&gt;</code> object, XML documents, an ADO.NET dataset, and a SQL database.<ref>X. D. Zhang et al., \"Research of the Database Access Technology Under.NET Framework\", Applied Mechanics and Materials, Vols. 644-650, pp. 3077-3080, 2014</ref> Using LINQ in C# brings advantages like [[Intelligent code completion|Intellisense]] support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources.<ref>Otey, M. (2006, 02). LINQ to the future. SQL Server Magazine, 8, 17-21. Retrieved from https://search.proquest.com/docview/214859896</ref>  There are several different language structures that can be utilized with C# with LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.<ref>Sheldon, W. (2010, 11). New features in LINQ. SQL Server Magazine, 12, 37-40. Retrieved from https://search.proquest.com/docview/770609095</ref>\n\n===Functional programming===\nThough primarily an imperative language, C# 2.0 offered limited support for functional programming through [[first-class functions]] and closures in the form of anonymous delegates. C# 3.0 expanded support for functional programming with the introduction of a lightweight syntax for lambda expressions, extension methods (an affordance for modules), and a [[list comprehension]] syntax in the form of a \"query comprehension\" language. C# 7.0 adds features typically found in functional languages like tuples and pattern matching.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7|title=What's New in C# 7.0|last=|first=|date=|website=Microsoft Docs|language=en-us|access-date=2019-04-14}}</ref>\n\n==Common type system==\nC# has a ''unified type system''. This unified type system is called [[Common Type System]] (CTS).<ref name=\"insidecsharpp2ch4\">{{cite book| last = Archer| first = Tom| title = Inside C#| year = 2001| publisher = Microsoft Press|location=Redmond, Washington|isbn=0-7356-1288-9|chapter=Part 2, Chapter 4: The Type System}}</ref>\n\nA unified type system implies that all types, including primitives such as integers, are subclasses of the {{C sharp|System.Object}} class. For example, every type inherits a {{C sharp|ToString()}} method.\n\n===Categories of data types===\nCTS separates data types into two categories:<ref name=\"insidecsharpp2ch4\" />\n\n#  Reference types\n#  Value types\n\nInstances of value types do not have referential identity nor referential comparison semantics - equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from {{C sharp|System.ValueType}}, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as {{C sharp|int}} (a signed 32-bit integer), {{C sharp|float}} (a 32-bit IEEE floating-point number), {{C sharp|char}} (a 16-bit Unicode code unit), and {{C sharp|System.DateTime}} (identifies a specific point in time with nanosecond precision). Other examples are {{C sharp|enum}} (enumerations) and {{C sharp|struct}} (user defined structures).\n\nIn contrast, reference types have the notion of referential identity - each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for {{C sharp|System.String}}). In general, it is not always possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as {{C sharp|ICloneable}} or {{C sharp|IComparable}}). Examples of reference types are {{C sharp|object}} (the ultimate base class for all other C# classes), {{C sharp|System.String}} (a string of Unicode characters), and {{C sharp|System.Array}} (a base class for all C# arrays).\n\nBoth type categories are extensible with user-defined types.\n\n===Boxing and unboxing===\n''Boxing'' is the operation of converting a value-type object into a value of a corresponding reference type.<ref name=\"insidecsharpp2ch4\" /> Boxing in C# is implicit.\n\n''Unboxing'' is the operation of converting a value of a reference type (previously boxed) into a value of a value type.<ref name=\"insidecsharpp2ch4\" /> Unboxing in C# requires an explicit [[Type conversion|type cast]]. A boxed object of type T can only be unboxed to a T (or a nullable T).<ref>{{cite web|last=Lippert |first=Eric |url=http://blogs.msdn.com/b/ericlippert/archive/2009/03/19/representation-and-identity.aspx |title=Representation and Identity |work=Fabulous Adventures In Coding |publisher=Blogs.msdn.com |date=March 19, 2009 |accessdate=October 4, 2012}}</ref>\n\nExample:\n<syntaxhighlight lang=CSharp>\nint foo = 42;         // Value type.\nobject bar = foo;     // foo is boxed to bar.\nint foo2 = (int)bar;  // Unboxed back to value type.\n</syntaxhighlight>\n\n==Libraries==\nThe C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the [[Common Language Infrastructure]] (CLI), which is standardized as ECMA-335 ''Common Language Infrastructure (CLI)''.\n\nIn addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/standard/framework-libraries|title=Framework Libraries|website=docs.microsoft.com}}</ref>\n\n==Examples==\nThe following is a very simple C# program, a version of the classic \"[[Hello world]]\" example:\n\n<syntaxhighlight lang=\"csharp\">\nusing System;\n\nclass Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}\n</syntaxhighlight>\n\nThis code will display this text in the console window:\n\n Hello, world!\n\nEach line has a purpose:\n\n<syntaxhighlight lang=CSharp>\nusing System;\n</syntaxhighlight>\n\nThe above line imports all types in the <code>System</code> namespace. For example, the <code>Console</code> class used later in the source code is defined in the <code>System</code> namespace, meaning it can be used without supplying the full name of the type (which includes the namespace).\n\n<syntaxhighlight lang=CSharp>\nclass Program\n</syntaxhighlight>\n\nAbove is a [[Class (computer science)|class]] definition. Everything between the following pair of braces describes {{C sharp|Program}}.\n\n<syntaxhighlight lang=CSharp>\nstatic void Main()\n</syntaxhighlight>\n\nThis declares the class member method where the program begins execution. The .NET runtime calls the {{C sharp|Main}} method. (Note: {{C sharp|Main}} may also be called from elsewhere, like any other method, e.g. from another method of {{C sharp|Program}}.) The [[Method (computer programming)#Static methods|static keyword]] makes the method accessible without an instance of {{C sharp|Program}}. Each console application's {{C sharp|Main}} entry point must be declared {{C sharp|static}}. Otherwise, the program would require an instance, but any instance would require a program. To avoid that irresolvable [[circular dependency]], C# compilers processing [[console application]]s (like that above) report an error if there is no {{C sharp|static Main}} method. The {{C sharp|void}} keyword declares that {{C sharp|Main}} has no [[return value]].\n\n<syntaxhighlight lang=CSharp>\nConsole.WriteLine(\"Hello, world!\");\n</syntaxhighlight>\n\nThis line writes the output. {{C sharp|Console}} is a static class in the {{C sharp|System}} namespace. It provides an interface to the standard input, output, and error streams for console applications. The program calls the {{C sharp|Console}} method {{C sharp|WriteLine}}, which displays on the console a line with the argument, the string {{C sharp|\"Hello, world!\"}}.\n\nA [[GUI]] example:\n\n<syntaxhighlight lang=\"CSharp\">\nusing System;\nusing System.Windows.Forms;\n\nclass Program\n{\n    static void Main()\n    {\n        MessageBox.Show(\"Hello, World!\");\n        Console.WriteLine(\"Is almost the same argument!\");\n    }\n}\n</syntaxhighlight>\n\nThis example is similar to the previous example, except that it generates a [[dialog box]] that contains the message \"Hello, World!\" instead of writing it to the console.\n\nAnother useful library is the <code>System.Drawing</code> library, which is used to programmatically draw images. For example:<syntaxhighlight lang=\"c#\">\nusing System;\nusing System.Drawing;\n\npublic class Example\n{\n    public static Image img;\n\n    public static void Main()\n    {\n        img = Image.FromFile(\"Image.png\");\n    }\n}\n</syntaxhighlight>This will create an image that is identical to that stored in \"Image.png\".\n\n==Standardization and licensing==\nIn August 2001, Microsoft Corporation, Hewlett-Packard and Intel Corporation co-sponsored the submission of specifications for C# as well as the [[Common Language Infrastructure|Common Language Infrastructure (CLI)]] to the standards organization [[Ecma International]].\nIn December 2001, ECMA released ECMA-334 ''C# Language Specification''. C# became an [[International Organization for Standardization|ISO]] standard in 2003 (ISO/IEC 23270:2003 - ''Information technology \u2014 Programming languages \u2014 C#''). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002.\n\nIn June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and [[Generic programming|generics]] (somewhat similar to C++ [[template (programming)|templates]]).\n\nIn July 2005, ECMA submitted to ISO/IEC JTC 1, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6\u20139 months.\n\nThe C# language definition and the [[Common Language Infrastructure|CLI]] are standardized under [[International Organization for Standardization|ISO]] and [[Ecma]] standards that provide [[Reasonable and Non Discriminatory Licensing|reasonable and non-discriminatory licensing]] protection from patent claims.\n\nMicrosoft has agreed not to sue open source developers for violating patents in non-profit projects for the part of the framework that is covered by the OSP.<ref>{{cite web| url = https://msdn.microsoft.com/en-us/openspecifications/dn646765| title = Patent Pledge for Open Source Developers}}</ref> Microsoft has also agreed not to enforce patents relating to [[Novell]] products against Novell's paying customers<ref>{{cite web\n |url          = http://www.microsoft.com/interop/msnovellcollab/patent_agreement.mspx\n |title        = Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration\n |date         = November 2, 2006\n |publisher    = [[Microsoft]]\n |accessdate   = July 5, 2009\n |quote        = Microsoft, on behalf of itself and its Subsidiaries (collectively \"Microsoft\"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively \"Novell\") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue.\n |archive-url  = https://web.archive.org/web/20090517140252/http://www.microsoft.com/interop/msnovellcollab/patent_agreement.mspx\n |archive-date = May 17, 2009\n |url-status=dead\n |df           = mdy-all\n}}</ref> with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET ([[Mono (software)|The Mono Project]]).<ref>{{cite web\n | url = http://www.microsoft.com/interop/msnovellcollab/definitions2.aspx\n | title = Definitions\n | date = November 2, 2006\n | publisher = [[Microsoft]]\n | accessdate  = July 5, 2009\n}}</ref> However, Novell maintains that Mono does not infringe any Microsoft patents.<ref>{{cite web\n | url = http://www.novell.com/linux/microsoft/faq_opensource.html\n | title = Novell Answers Questions from the Community\n | first = Justin\n | last = Steinman\n | date = November 7, 2006\n | accessdate  = July 5, 2009\n | quote = We maintain that Mono does not infringe any Microsoft patents.\n}}</ref> Microsoft has also made a specific agreement not to enforce patent rights related to the [[Moonlight (runtime)|Moonlight browser plugin]], which depends on Mono, provided it is obtained through [[Novell]].<ref name=\"MsCovenant\">{{cite web\n |url          = http://www.microsoft.com/interop/msnovellcollab/moonlight.mspx\n |title        = Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration\n |publisher    = [[Microsoft]]\n |quote        = \"Downstream Recipient\" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... \"Moonlight Implementation\" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License.\n |date         = September 28, 2007\n |accessdate   = March 8, 2008\n |archive-url  = https://web.archive.org/web/20100923213336/http://www.microsoft.com/interop/msnovellcollab/moonlight.mspx\n |archive-date = September 23, 2010\n |url-status=dead\n |df           = mdy-all\n}}</ref>\n\n==Implementations==\nMicrosoft is leading the development of the [[Open-source software|open-source]] reference C# compiler and set of tools, previously codenamed \"[[Microsoft Roslyn|Roslyn]]\". The compiler, which is entirely written in [[managed code]] (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools.<ref name=\"auto\"/><ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/|title=C# Guide|website=docs.microsoft.com}}</ref>\n\nOther C# compilers (some of which include an implementation of the [[Common Language Infrastructure]] and .NET class libraries):\n* The [[Mono (software)|Mono]] project provides an open-source C# compiler, a complete open-source implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and a nearly complete implementation of the Microsoft proprietary .NET class libraries up to .NET 3.5. As of Mono 2.6, no plans exist to implement [[Windows Presentation Foundation|WPF]]; [[Windows Workflow Foundation|WF]] is planned for a later release; and there are only partial implementations of [[Language Integrated Query#LINQ to SQL|LINQ to SQL]] and [[Windows Communication Foundation|WCF]].<ref>{{cite web|url=http://www.mono-project.com/Compatibility |title=Compatibility - Mono |publisher=Mono-project.com |date=December 19, 2011 |accessdate=October 4, 2012}}</ref>\n* The [[DotGNU]] project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution).\n* Microsoft's [[Shared Source Common Language Infrastructure]], codenamed \"Rotor\", provides a [[shared source]] implementation of the CLR runtime and a C# compiler licensed for educational and research use only, and a subset of the required [[Common Language Infrastructure]] framework libraries in the ECMA specification (up to C# 2.0, and supported on Windows XP only).\n* [[Xamarin]] provides tools to develop cross-platform applications for common mobile and desktop operating systems, using C# as a codebase and compiling to native code.\n\nMono is a common choice for game engines due to its cross-platform nature. The [[Unity (game engine)|Unity game engine]] uses Mono C# as its primary scripting language. The [[Godot (game engine)|Godot game engine]] has implemented an optional Mono C# module thanks to a donation of $24,000 from Microsoft.<ref>{{cite news|title=Introducing C# in Godot |work=[[Godot (game engine)|Godot Engine]] |url=https://godotengine.org/article/introducing-csharp-godot |accessdate=October 26, 2018 |url-status=live |archiveurl=https://web.archive.org/web/20181026084022/https://godotengine.org/article/introducing-csharp-godot |archivedate=October 26, 2018 |df= |date=October 21, 2017|first1=Ignacio|last1=Etcheverry}}</ref>\n\n==See also==\n{{Col-begin}}\n{{Col-break}}\n;C# topics\n* [[C Sharp syntax|C# syntax]]\n* [[Comparison of C Sharp and Java|Comparison of C# and Java]]\n* [[Comparison of C Sharp and Visual Basic .NET|Comparison of C# and Visual Basic .NET]]\n* [[Standard Libraries (CLI)|.NET standard libraries]]\n\n{{Col-break}}\n{{Portal|Computer programming}}\n;IDEs\n* [[Microsoft Visual Studio]]\n* [[Microsoft Visual Studio Express]]\n* [[Visual Studio Code]]\n* [[MonoDevelop]]\n* [[Morfik]]\n* [[SharpDevelop]]\n* [[Turbo C Sharp|Turbo C#]]\n* [[JetBrains#Rider|Rider]]\n* [[Xamarin Studio]]\n{{col-end}}\n{{Clear}}\n\n==Notes==\n{{Notelist}}\n\n==References==\n{{Reflist|30em|refs=\n\n<ref name=\"dynamic\">{{cite web |url = http://code.msdn.microsoft.com/csharpfuture/Release/ProjectReleases.aspx?ReleaseId=1686 |title = New features in C# 4.0 |first = Mads |last = Torgersen |date = October 27, 2008 |publisher = [[Microsoft]] |accessdate  = October 28, 2008 }}</ref>\n\n<ref name=\"influenced by CPP\">{{cite journal |last = Naugler |first = David |date=May 2007 |title       = C# 2.0 for C++ and Java programmer: conference workshop |journal = Journal of Computing Sciences in Colleges |volume = 22 |issue = 5 |quote = Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.}}</ref>\n\n<ref name=\"influenced by op\">{{cite magazine |url = http://www.computerworld.com.au/article/261958/a-z_programming_languages_c_/?pp=7 |title = The A-Z of Programming Languages: C# |date = October 1, 2008 |magazine = [[Computerworld]] |first = Naomi |last = Hamilton |accessdate  = February 12, 2010 |quote = We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. ([[Anders Hejlsberg]]) }}</ref>\n\n<ref name=\"influenced\">{{cite web |url = http://www.barrycornelius.com/papers/java5/onefile/ |title = Java 5 catches up with C# |date = December 1, 2005 |publisher  = [[University of Oxford]] Computing Services |first = Barry |last = Cornelius |accessdate = June 18, 2014 |quote = In my opinion, it is C# that has caused these radical changes to the Java language. ([[Barry Cornelius]]) }}</ref>\n}}\n\n==Further reading==\n* {{cite book | title = C# Language Pocket Reference| url = https://archive.org/details/clanguagepocketr00pete| url-access = registration| first1=Peter | last1=Drayton | first2=Ben | last2=Albahari | first3=Ted | last3=Neward| year=2002| publisher = O'Reilly| isbn=0-596-00429-X}}\n* {{cite book| title=Programming Microsoft Windows with C#| last=Petzold| first=Charles| year=2002| publisher=Microsoft Press| isbn=0-7356-1370-2| url-access=registration| url=https://archive.org/details/isbn_9780735613706}}\n\n==External links==\n{{Wikibooks|C Sharp Programming}}\n* [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/ C# Language Specification]\n* [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index C# Programming Guide]\n* [https://standards.iso.org/ittf/PubliclyAvailableStandards/c075178_ISO_IEC_23270_2018.zip ISO C# Language Specification]\n* [https://github.com/dotnet/roslyn C# Compiler Platform (\"Roslyn\") source code]\n\n{{Common Language Infrastructure}}\n{{Microsoft FOSS}}\n{{Ecma International Standards}}\n{{ISO standards}}\n{{Programming languages}}\n{{List of International Electrotechnical Commission standards}}\n{{Authority control}}\n\n[[Category:American inventions]]\n[[Category:Programming languages]]\n[[Category:C Sharp programming language family| ]]\n[[Category:.NET programming languages]]\n[[Category:Class-based programming languages]]\n[[Category:Ecma standards]]\n[[Category:Functional languages]]\n[[Category:IEC standards]]\n[[Category:ISO standards]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:Programming languages created in 2000]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Statically typed programming languages]]\n[[Category:2000 software]]\n", "text_old": "{{short description|Multi-paradigm (object-oriented) programming language}}\n{{Use mdy dates|date=October 2012}}\n{{Use British English Oxford spelling|date=December 2011}}\n{{Correct title|title=C# (programming language)|reason=#}} \n<!-- Per Ecma, \"C#\" (i.e. not \"C\u266f\") is the standard spelling of the name of the language. See \"Language name\" section and talk page. -->\n{{Infobox programming language\n| name = C#\n| logo = [[File:C Sharp logo.svg|150px]]\n| paradigm = [[Structured programming|Structured]], [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]], [[Event-driven programming|event-driven]], [[The Task-based Asynchronous Pattern|task-driven]], [[Functional programming|functional]], [[Generic programming|generic]], [[Reflective programming|reflective]], [[Concurrent computing|concurrent]]\n| family = [[C (programming language)|C]]\n| year = {{start date and age|2000}}<ref>{{Cite web | url=https://www.infoq.com/minibooks/emag-c-sharp-preview |title = InfoQ eMag: A Preview of C# 7}}</ref>\n| designer = [[Microsoft]]\n| developer = Microsoft\n| latest release version = 8.0<ref>{{Cite web | url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8 |title = What's new in C# 8}}</ref>\n| latest release date = {{start date and age|2019|09|23}}\n| typing = [[Static typing|static]], [[Dynamic typing|dynamic]],<ref name=\"dynamic\" /> [[Type system#Strong and weak typing|strong]], [[Type system#Safely and unsafely typed systems|safe]], [[Nominative type system|nominative]], [[Type inference|partially inferred]]\n| implementations = [[Microsoft Visual C Sharp|Visual C#]], [[.NET Framework]], [[Mono (software)|Mono]], [[.NET Core]], [[DotGNU|DotGNU (discontinued)]], [[Universal Windows Platform]]\n| dialects = [[C\u03c9]], [[Spec Sharp|Spec#]], [[Polyphonic C Sharp|Polyphonic C#]], [http://ecsharp.net Enhanced C#]\n| influenced_by = [[C++]],<ref name=\"influenced by CPP\" /> [[C\u03c9]], [[Eiffel (programming language)|Eiffel]], [[F Sharp (programming language)|F#]],{{efn|for async}} [[Haskell (programming language)|Haskell]], [[Icon (programming language)|Icon]], [[J Sharp|J#]], [[Visual J++|J++]], [[Java (programming language)|Java]],<ref name=\"influenced by CPP\" /> [[ML (programming language)|ML]], [[Modula-3]], [[Object Pascal]],<ref name=\"influenced by op\" /> [[Rust (programming language)|Rust]], [[Visual Basic|VB]]\n| influenced = [[Chapel (programming language)|Chapel]],<ref name=\"chplspec\">{{cite web|title=Chapel spec (Acknowlegements)|url=http://chapel.cray.com/spec/spec-0.98.pdf|date=2015-10-01|accessdate=2016-01-14|publisher=Cray Inc}}</ref> [[Clojure]],<ref>{{cite web |url=http://www.codequarterly.com/2011/rich-hickey|archive-url=https://web.archive.org/web/20170111184835/http://www.codequarterly.com/2011/rich-hickey|url-status=dead|archive-date=2017-01-11|title=Rich Hickey Q&A by Michael Fogus|access-date=2017-01-11}}</ref> [[Crystal (programming language)|Crystal]],<ref name=\"rel_0.18.0\">\n  {{cite web\n  | url   = http://crystal-lang.org/2016/06/14/crystal-0.18.0-released.html#comment-2732771703\n  | title = Crystal 0.18.0 released!\n  | last  = Borenszweig\n  | first = Ary\n  | quote = It's heavily inspired by Ruby, and other languages (like C#, Go and Python).\n  }}\n</ref> [[D (programming language)|D]], [[J Sharp|J#]], [[Dart (programming language)|Dart]],<ref>{{cite web|title=Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013|url=https://www.youtube.com/watch?v=huawCRlo9H4&t=30m10s|accessdate=22 December 2013}}</ref> [[F Sharp (programming language)|F#]], [[Hack (programming language)|Hack]], [[Java (programming language)|Java]],<ref>Java 5.0 added several new language features (the [[foreach loop|enhanced for loop]], [[Object type (object-oriented programming)#Autoboxing|autoboxing]], [[variadic function|varargs]] and [[Java annotation|annotations]]), after they were introduced in the similar (and competing) C# language [http://www.barrycornelius.com/papers/java5/] [http://www.levenez.com/lang/]</ref><ref name=\"influenced\" /> [[Kotlin (programming language)|Kotlin]], [[Nemerle]], [[Oxygene (programming language)|Oxygene]], Ring,<ref name=\"Ring programming language and other languages\">{{cite web |url=http://ring-lang.sourceforge.net/doc1.6/introduction.html#ring-and-other-languages |title=Ring programming language and other languages  |author=Ring Team |date=5 December 2017 |work=ring-lang.net |publisher=[[ring-lang]]}}</ref> [[Rust (programming language)|Rust]], [[Swift (programming language)|Swift]],<ref name=\"lattner2014\">{{cite web|url=http://nondot.org/sabre/|title=Chris Lattner's Homepage|last=Lattner|first=Chris|date=2014-06-03|accessdate=2014-06-03|publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, CLU, and far too many others to list.}}</ref> [[Vala (programming language)|Vala]], [[TypeScript]]\n| platform = [[Common Language Infrastructure]]\n| license = [[Roslyn (compiler)|Roslyn]] compiler: [[Apache License|Apache License 2.0]]<ref name=\"auto\">{{Cite web|url=https://github.com/dotnet/roslyn|title=The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn|date=November 13, 2019|via=GitHub}}</ref><br/>\n[[.NET Core|.NET Core CLR]]: [[MIT License|MIT/X11]]<ref>{{Cite web|url=https://github.com/dotnet/coreclr|title=CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr|date=November 13, 2019|via=GitHub}}</ref>\n\n[[Mono (software)|Mono]] compiler: dual [[GPLv3]] and MIT/X11<br/>\n[[DotGNU]]: dual [[GPL]] and [[LGPL]]\n| file_ext = <code>.cs</code>\n| website = {{URL|http://csharp.net}}\n| wikibooks = C Sharp Programming\n| versions = See [[#Versions|\u00a7 Versions]]\n}}\n\n'''C#''' (pronounced ''see sharp'', like the musical note [[C\u266f (musical note)|C\u266f]], but written with the [[number sign]]){{efn|By convention, a [[number sign]] is used for the second character in normal text; in artistic representations, sometimes a true [[\u266f|sharp sign]] is used: C\u266f. However the ECMA 334 standard states: ''\"The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023).\"''}} is a general-purpose, [[multi-paradigm programming language]] encompassing [[strong typing]], [[lexically scoped]], [[Imperative programming|imperative]], [[Declarative programming|declarative]]<!--e.g. attributes-->, [[Functional programming|functional]], [[Generic programming|generic]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class]]-based), and [[Component-based software engineering|component-oriented]] programming disciplines.<ref name=\"ECMA-334\" /> It was developed around 2000 by [[Microsoft]] as part of its [[.NET Framework|.NET]] initiative, and later approved as an [[international standard]] by [[Ecma International|Ecma]] (ECMA-334) and [[International Organization for Standardization|ISO]] (ISO/IEC 23270:2018). [[Mono (software)|Mono]] is the name of the free and open-source project to develop a compiler and runtime for the language. C# is one of the programming languages designed for the [[Common Language Infrastructure]] (CLI).\n\nC# was designed by [[Anders Hejlsberg]], and its development team is currently led by [[Mads Torgersen]]. The most recent version is 8.0, which was released in 2019 alongside [[Visual Studio 2019]] version 16.3.<ref name=\"new_features_in_8\">{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes?view=vs-2019#16.3.0|title=Visual Studio 2019 version 16.3 Release Notes|last=|first=|date=|website=Microsoft Docs}}</ref>\n\n==Design goals==\nThe Ecma standard lists these design goals for C#:<ref name=\"ECMA-334\">{{cite book\n |url= https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf\n |title= C# Language Specification\n |publisher= [[Ecma International]]\n |edition= 4th\n |date=June 2006\n |accessdate= January 26, 2012\n}}</ref>\n\n* The language is intended to be a simple, modern, general-purpose, [[object-oriented programming]] language.\n* The language, and implementations there of, should provide support for software engineering principles such as [[strong type]] checking, array [[bounds checking]], detection of attempts to use [[uninitialized variable]]s, and automatic [[Garbage collection (computer science)|garbage collection]]. Software robustness, durability, and programmer productivity are important.\n* The language is intended for use in developing [[software components]] suitable for deployment in distributed environments.\n* Portability is very important for source code and programmers, especially those already familiar with [[C (programming language)|C]] and [[C++]].\n* Support for [[internationalization and localization|internationalization]] is very important.\n* C# is intended to be suitable for writing applications for both hosted and [[embedded system]]s, ranging from the very large that use sophisticated [[operating system]]s, down to the very small having dedicated functions.\n* Although C# applications are intended to be economical with regard to memory and [[processing power]] requirements, the language was not intended to compete directly on performance and size with C or assembly language\n\n==History==\nDuring the development of the .NET Framework, the [[Base Class Library|class libraries]] were originally written using a [[managed code]] compiler system called ''\"Simple Managed C\"'' (SMC).<ref>{{cite web\n |url= http://blogs.msdn.com/jasonz/archive/2007/11/23/couple-of-historical-facts.aspx\n |title= Couple of Historical Facts\n |first= Jason\n |last= Zander\n |date= November 24, 2008\n |accessdate= February 23, 2009\n}}</ref><ref>{{cite web\n |url= http://aspadvice.com/blogs/rbirkby/archive/2006/11/28/What-language-was-ASP.Net-originally-written-in_3F00_.aspx\n |archive-url= https://web.archive.org/web/20160624010356/http://aspadvice.com/blogs/rbirkby/archive/2006/11/28/What-language-was-ASP.Net-originally-written-in_3F00_.aspx\n |archive-date= June 24, 2016\n |title= What language was ASP.Net originally written in?\n |date= November 28, 2006\n |first= Scott\n |last= Guthrie\n |authorlink= Scott Guthrie\n |accessdate= February 21, 2008\n}}</ref> In January 1999, [[Anders Hejlsberg]] formed a team to build a new language at the time called Cool, which stood for \"[[C-like]] Object Oriented Language\".<ref name=\"computerworld2008\">{{cite magazine\n |url= http://www.computerworld.com.au/article/261958/-z_programming_languages_c\n |title= The A-Z of Programming Languages: C#\n |first= Naomi\n |last= Hamilton\n |magazine= [[Computerworld]]\n |date= October 1, 2008\n |accessdate= October 1, 2008\n}}</ref> Microsoft had considered keeping the name \"Cool\" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 [[Professional Developers Conference]], the language had been renamed C#, and the class libraries and [[ASP.NET]] runtime had been ported to C#.\n\nHejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of [[Turbo Pascal]], [[Embarcadero Delphi]] (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and [[Visual J++]]. In interviews and technical papers he has stated that flaws<ref>{{Cite web|url=http://nilsnaegele.com/techreview/Reviews/Details/1|title=Details|website=nilsnaegele.com|access-date=2019-04-07}}</ref> in most major programming languages (e.g. [[C++]], [[Java (programming language)|Java]], [[Embarcadero Delphi|Delphi]], and [[Smalltalk]]) drove the fundamentals of the [[Common Language Runtime]] (CLR), which, in turn, drove the design of the C# language itself.\n\n[[James Gosling]], who created the [[Java (programming language)|Java]] programming language in 1994, and [[Bill Joy]], a co-founder of [[Sun Microsystems]], the originator of Java, called C# an \"imitation\" of Java; Gosling further said that \"[C# is] sort of Java with reliability, productivity and security deleted.\"<ref name=\"gosling\">{{cite web\n |url=http://news.cnet.com/2100-1082-817522.html\n |title=Why Microsoft's C# isn't\n |author=Wylie Wong\n |publisher=CNET: CBS Interactive\n |year=2002\n |accessdate=May 28, 2014\n}}</ref><ref>{{cite web | url = http://news.cnet.com/2010-1071-831385.html | title = Microsoft's blind spot|author=Bill Joy | publisher = cnet.com| date = February 7, 2002| accessdate  = January 12, 2010| author-link = Bill Joy}}</ref> Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that \"Java and C# are almost identical programming languages. Boring repetition that lacks innovation,\"<ref name=\"kreft-langer\">{{cite web\n |url=http://www.artima.com/weblogs/viewpost.jsp?thread=6543\n |title=After Java and C# - what is next?\n |author=Klaus Kreft and Angelika Langer\n |year=2003\n |accessdate=June 18, 2013\n}}</ref> \"Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs,\" and  \"C# borrowed a lot from Java - and vice versa. Now that C# supports [[Boxing (Computer Science)|boxing]] and unboxing, we'll have a very similar feature in Java.\"<ref>{{cite web\n |accessdate= January 12, 2010\n |date= July 3, 2003\n |publisher= artima.com\n |title= After Java and C# - what is next?|author= Klaus Kreft and Angelika Langer\n |url= http://www.artima.com/weblogs/viewpost.jsp?thread=6543\n}}</ref>\nIn July 2000, Hejlsberg said that C# is \"not a Java clone\" and is \"much closer to C++\" in its design.<ref name=\"JohnOsborn\">{{Cite journal\n |last= Osborn\n |first= John\n |date= August 1, 2000\n |url= http://windowsdevcenter.com/pub/a/oreilly/windows/news/hejlsberg_0800.html\n |title= Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg\n |publisher= O'Reilly Media\n |accessdate= November 14, 2009\n }}</ref>\n\nSince the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of [[Generic programming|generics]] to both languages, with vastly different implementations. C# makes use of [[Reification (computer science)|reification]] to provide \"first-class\" generic objects that can be used like any other class, with [[code generation (compiler)|code generation]] performed at class-load time.<ref>{{cite web\n | url = http://msdn.microsoft.com/en-us/library/512aeb7t.aspx\n | title = Generics (C# Programming Guide)\n | publisher = Microsoft| accessdate  = March 21, 2011}}</ref>\nFurthermore, C# has added several major features to accommodate functional-style programming, culminating in the [[Language Integrated Query|LINQ]] extensions released with C# 3.0 and its supporting framework of [[lambda expressions]], [[extension method]]s, and [[anonymous type]]s.<ref>{{cite web\n | url = http://msdn.microsoft.com/en-us/library/bb308959.aspx\n | title = LINQ: .NET Language-Integrated Query|author=Don Box and Anders Hejlsberg\n | publisher = Microsoft\n | date = February 2007\n | accessdate  = March 21, 2011}}</ref>  These features enable C# programmers to use functional programming techniques, such as [[Closure (computer science)|closures]], when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of [[boilerplate code]] that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.<ref>{{cite web\n | url = http://blog.abodit.com/2010/04/why-functional-programming-is-better-linq-c-sharp-than-procedural-code/\n | title = Why functional programming and LINQ is often better than procedural code\n | last = Mercer\n | first = Ian\n | publisher = abodit.com\n | date = April 15, 2010\n | accessdate  = March 21, 2011}}</ref>\n\nC# used to have a [[mascot]] called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004.<ref>{{cite web|url=http://blogs.msdn.com/b/danielfe/archive/2004/01/29/64429.aspx |title=Andy Retires |work=Dan Fernandez's Blog |publisher=Blogs.msdn.com |date=January 29, 2004 |accessdate=October 4, 2012}}</ref>\n\nC# was originally submitted to the ISO subcommittee JTC 1/SC 22 for review,<ref>{{cite web|url=http://www.iso.org/iso/iso_technical_committee.html?commid=45202 |title=Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces |publisher=ISO |date= |accessdate=October 4, 2012}}</ref> under ISO/IEC 23270:2003,<ref>{{cite web|url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=36768 |title=ISO/IEC 23270:2003 - Information technology - C# Language Specification |publisher=Iso.org |date=August 23, 2006 |accessdate=October 4, 2012}}</ref> was withdrawn and was then approved under ISO/IEC 23270:2006.<ref>{{cite web|url=http://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?csnumber=42926 |title=ISO/IEC 23270:2006 - Information technology - Programming languages - C# |publisher=Iso.org |date=January 26, 2012 |accessdate=October 4, 2012}}</ref>\n\n===Name===\nMicrosoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation.<ref>{{cite web|last1=Mariani|first1=Rico|title=My History of Visual Studio (Part 1) \u2013 Rico Mariani's Performance Tidbits|url=https://blogs.msdn.microsoft.com/ricom/2009/10/05/my-history-of-visual-studio-part-1/|website=Rico Mariani's Performance Tidbits}}</ref> That project was not completed but the name lives on.\n\n[[File:Treblecsharp5.svg|thumb|100px|right|[[C\u266f (musical note)|C-sharp musical note]]]]\nThe name \"C sharp\" was inspired by the musical notation where a [[Sharp (music)|sharp]] indicates that the written note should be made a [[semitone]] higher in [[Pitch (music)|pitch]].<ref>{{cite web\n |url= http://www.jameskovacs.com/blog/CNETHistoryLesson.aspx\n |title= C#/.NET History Lesson\n |first= James\n |last= Kovacs\n |date= September 7, 2007\n |accessdate= June 18, 2009\n}}</ref>\nThis is similar to the language name of [[C++]], where \"++\" indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a [[Typographic ligature|ligature]] of four \"+\" symbols (in a two-by-two grid), further implying that the language is an increment of C++.<ref>{{cite magazine\n|url=http://www.computerworld.com.au/article/261958/a-z_programming_languages_c_/?pp=2\n|title=The A-Z of Programming Languages: C#\n|first= Anders\n|last= Hejlsberg\n|magazine= [[Computerworld]]\n|date= October 1, 2008\n}}</ref>\n\nDue to technical limitations of display (standard fonts, browsers, etc.) and the fact that the sharp symbol ({{unichar|266F|MUSIC SHARP SIGN|html=|nlink=Sharp (music)}}) is not present on most [[keyboard layout]]s, the [[number sign]] ({{unichar|0023|NUMBER SIGN|html=}}) was chosen to approximate the sharp symbol in the written name of the programming language.<ref name=\"MS CSharp FAQ\">{{cite web\n |url=http://msdn.microsoft.com/vcsharp/previous/2002/FAQ/default.aspx \n |title=Microsoft C# FAQ \n |publisher=[[Microsoft]] \n |accessdate=March 25, 2008 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20060214002638/http://msdn.microsoft.com/vcsharp/previous/2002/FAQ/default.aspx \n |archivedate=February 14, 2006 \n |df=mdy \n}}</ref>\nThis convention is reflected in the ECMA-334 C# Language Specification.<ref name=\"ECMA-334\"/>\n\nThe \"sharp\" suffix has been used by a number of other .NET languages that are variants of existing languages, including [[J Sharp|J#]] (a .NET language also designed by Microsoft that is derived from Java 1.1), [[A Sharp (.NET)|A#]] (from [[Ada (programming language)|Ada]]), and the [[functional programming]] language [[F Sharp (programming language)|F#]].<ref name=\"MS FSharp FAQ\">{{cite web\n |url=http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/faq.aspx \n |title=F# FAQ \n |publisher=Microsoft Research \n |accessdate=June 18, 2009 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20090218222543/http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/faq.aspx \n |archivedate=February 18, 2009 \n |df=mdy \n}}</ref> The original implementation of [[EiffelStudio|Eiffel for .NET]] was called Eiffel#,<ref>{{cite web\n |url= http://msdn.microsoft.com/en-us/library/ms973898.aspx\n |title= Full Eiffel on the .NET Framework\n |date=June 2002\n |first1= Raphael\n |last1= Simon\n |first2= Emmanuel\n |last2= Stapf\n |first3= Bertrand\n |last3= Meyer\n |publisher= [[Microsoft]]\n |accessdate= June 18, 2009\n}}</ref> a name retired since the full [[Eiffel (programming language)|Eiffel]] language is now supported. The suffix has also been used for [[Library (computing)|libraries]], such as [[Gtk Sharp|Gtk#]] (a .NET [[Wrapper pattern|wrapper]] for [[GTK+]] and other [[GNOME]] libraries) and [[Cocoa Sharp|Cocoa#]] (a wrapper for [[Cocoa (API)|Cocoa]]).\n\n===Versions===\n{| class=\"wikitable\" style=\"margin:0 auto 0 auto;\"\n|-\n! rowspan=\"2\" | Version\n! colspan=\"3\" | Language specification\n! rowspan=\"2\" | Date\n! rowspan=\"2\" | [[.NET Framework|.NET Version]]\n! rowspan=\"2\" | [[Visual Studio]]\n|-\n! [[Ecma International|Ecma]]\n! [[ISO/IEC]]\n! [[Microsoft]]\n|-\n| Version C# 1.0\n| rowspan=\"2\"|[http://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-334,%202nd%20edition,%20December%202002.pdf December 2002]\n| rowspan=\"2\"|[http://www.techstreet.com/cgi-bin/pdf/free/378672/ISO+IEC+23270-2003.pdf April 2003]\n| [http://download.microsoft.com/download/a/9/e/a9e229b9-fee5-4c3e-8476-917dee385062/CSharp%20Language%20Specification%20v1.0.doc January 2002]\n| January 2002\n| [[.NET Framework version history#.NET Framework 1.0|.NET Framework 1.0]]\n| [[Visual Studio .NET|Visual Studio .NET 2002]]\n|-\n| Version C# 1.1<br/>C# 1.2\n| [http://download.microsoft.com/download/5/e/5/5e58be0a-b02b-41ac-a4a3-7a22286214ff/csharp%20language%20specification%20v1.2.doc October 2003]\n| April 2003\n| [[.NET Framework 1.1]]\n| [[Visual Studio .NET 2003]]\n|-\n| [[C Sharp 2.0|Version C# 2.0]]\n| [https://web.archive.org/web/20121202194727/http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf June 2006]\n| [http://standards.iso.org/ittf/PubliclyAvailableStandards/c042926_ISO_IEC_23270_2006(E).zip September 2006]\n| [http://download.microsoft.com/download/9/8/f/98fdf0c7-2bbd-40d3-9fd1-5a4159fa8044/csharp%202.0%20specification_sept_2005.doc September 2005]{{efn|The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.}}\n| November 2005\n| [[.NET Framework 2.0]]<br/>[[.NET Framework 3.0]]\n| [[Visual Studio 2005]]<br/>[[Visual Studio 2008]]\n|-\n| [[C Sharp 3.0|Version C# 3.0]]\n| colspan=\"2\" rowspan=\"2\" {{no|None}}\n| [http://download.microsoft.com/download/3/8/8/388e7205-bc10-4226-b2a8-75351c669b09/CSharp%20Language%20Specification.doc August 2007]\n| November 2007\n| .NET Framework 2.0 (Except LINQ)<ref name=\"danielmoth1\">{{cite web|url=http://www.danielmoth.com/Blog/using-c-30-from-net-20.aspx |title=Using C# 3.0 from .NET 2.0 |publisher=Danielmoth.com |date=May 13, 2007 |accessdate=October 4, 2012}}</ref><br/>\n.NET Framework 3.0 (Except LINQ)<ref name=\"danielmoth1\"/><br/>\n[[.NET Framework 3.5]]\n| [[Visual Studio 2008]]\n|-\n| [[C Sharp 4.0|Version C# 4.0]]\n| April 2010\n| April 2010\n| [[.NET Framework 4.0|.NET Framework 4]]\n| [[Visual Studio 2010]]\n|-\n| Version C# 5.0\n| [https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf December 2017]\n| [https://standards.iso.org/ittf/PubliclyAvailableStandards/c075178_ISO_IEC_23270_2018.zip December 2018]\n| [https://www.microsoft.com/en-us/download/details.aspx?id=7029 June 2013]\n| August 2012\n| [[.NET Framework 4.5]]\n| [[Visual Studio 2012]]<br/>[[Visual Studio 2013]]\n|-\n| Version C# 6.0\n| colspan=\"2\" rowspan=\"6\" {{no|None}}\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/ Draft]\n| July 2015\n| [[.NET Framework 4.6]]<br/>.NET Core 1.0<br/>.NET Core 1.1\n| [[Visual Studio 2015]]\n|-\n| Version C# 7.0\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/ Specification proposal]\n| March 2017\n| [[.NET Framework 4.7]]\n| [[Visual Studio 2017]] version 15.0\n|-\n| Version C# 7.1\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.1/ Specification proposal]\n| August 2017\n| .NET Core 2.0\n| [[Visual Studio 2017]] version 15.3<ref>{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes-v15.3|title=Visual Studio 2017 15.3 Release Notes|website=docs.microsoft.com}}</ref>\n|-\n| Version C# 7.2\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.2/ Specification proposal]\n| November 2017\n| \n| [[Visual Studio 2017]] version 15.5<ref name=\"visualstudio.com\">{{Cite web|url=https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes|title=Visual Studio 2017 15.9 Release Notes|website=docs.microsoft.com}}</ref>\n|-\n| Version C# 7.3\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.3/ Specification proposal]\n| May 2018\n| .NET Core 2.1<br/>.NET Core 2.2<br/>[[.NET Framework 4.8]]\n| [[Visual Studio 2017]] version 15.7<ref name=\"visualstudio.com\"/>\n|-\n| Version C# 8\n| [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ Specification proposal]\n| September 2019\n| .NET Core 3.0\n| [[Visual Studio 2019]] version 16.3<ref name=\"visualstudio.com\"/>\n|}\n\n===New features===\n;C# 2.0\n{{colbegin}}\n* Generics<ref name=\"csv2_msdn\">{{cite web|title=What's new in the C# 2.0 Language and Compiler|url=http://msdn.microsoft.com/en-us/library/7cz8t42e(v=vs.80).aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Partial types<ref name=\"csv2_msdn\" />\n* [[Anonymous method]]s<ref name=\"csv2_msdn\" />\n* Iterators<ref name=\"csv2_msdn\" />\n* Nullable value types<ref name=\"csv2_msdn\" />\n* Getter/setter separate accessibility<ref name=\"csv2_msdn\" />\n* Method group conversions (delegates)<ref name=\"csv2_msdn\" />\n* Co- and Contra-variance for delegates<ref name=\"csv2_msdn\" />\n* Static classes<ref name=\"csv2_msdn\" />\n* Delegate inference<ref name=\"csv2_msdn\" />\n* [[Null coalescing operator]]<ref name=\"csv2_msdn\" />\n{{colend}}\n\n;C# 3.0\n{{colbegin}}\n* Implicitly typed local variables<ref name=\"csv3_msdn\">{{cite web|last1=Hejlsberg|first1=Anders|last2=Torgersen|first2=Mads|title=Overview of C# 3.0|url=http://msdn.microsoft.com/en-us/library/bb308966.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Object and collection initializers<ref name=\"csv3_msdn\" />\n* Auto-Implemented properties<ref name=\"csv3_msdn\" />\n* Anonymous types<ref name=\"csv3_msdn\" />\n* [[Extension method]]s<ref name=\"csv3_msdn\" />\n* Query expressions<ref name=\"csv3_msdn\" />\n* [[Anonymous function|Lambda expressions]]<ref name=\"csv3_msdn\" />\n* Expression trees<ref name=\"csv3_msdn\" />\n* Partial methods<ref name=csv3_partmeths>{{cite web|last1=Ghosh|first1=Wriju|title=C# 3.0 : Partial * Garbage Collection Methods|url=http://blogs.msdn.com/b/wriju/archive/2007/12/13/c-3-0-partial-methods.aspx|website=MSDN Blogs|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n{{colend}}\n\n;C# 4.0\n{{colbegin}}\n* Dynamic binding<ref name=\"csv4_msdn\">{{cite web|last1=Burrows|first1=Chris|title=C# 4.0 - New C# Features in the .NET Framework 4|url=http://msdn.microsoft.com/en-us/magazine/ff796223.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Named and optional arguments<ref name=\"csv4_msdn\" />\n* Generic co- and contravariance<ref name=\"csv4_msdn\" />\n* Embedded interop types (\"NoPIA\")<ref name=\"csv4_msdn\" />\n{{colend}}\n\n;C# 5.0<ref>{{cite web|last=Hejlsberg|first=Anders|title=Future directions for C# and Visual Basic|url=http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-816T|work=C# lead architect|publisher=Microsoft|accessdate=September 21, 2011}}</ref>\n{{colbegin}}\n* [[Async/await|Asynchronous methods]]<ref name=\"csv5_msdn\">{{cite web|title=An Introduction to New Features in C# 5.0|url=http://blogs.msdn.com/b/mvpawardprogram/archive/2012/03/26/introduction-of-new-features-in-c-5-0.aspx|website=MSDN Blogs|publisher=Microsoft|accessdate=11 June 2014}}</ref>\n* Caller info attributes<ref name=\"csv5_msdn\" />\n{{colend}}\n\n;C# 6.0\n{{colbegin}}\n* Compiler-as-a-service ([[Microsoft Roslyn|Roslyn]])\n* Import of static type members into namespace<ref name=\"roslyn_6\">{{cite web|title=Language feature implementation status|url=https://github.com/dotnet/roslyn/wiki/Languages-features-in-C%23-6-and-VB-14|website=github|publisher=Microsoft|accessdate=13 February 2015}}</ref>\n* Exception filters<ref name=\"roslyn_6\" />\n* Await in catch/finally blocks<ref name=\"roslyn_6\" />\n* Auto property initializers<ref name=\"roslyn_6\" />\n* Default values for getter-only properties<ref name=\"roslyn_6\" />\n* Expression-bodied members<ref name=\"roslyn_6\" />\n* Null propagator ([[Safe navigation operator|null-conditional operator]], succinct null checking)<ref name=\"roslyn_6\" />\n* String interpolation<ref name=\"roslyn_6\" />\n* nameof operator<ref name=\"roslyn_6\" />\n* Dictionary initializer<ref name=\"roslyn_6\" />\n{{colend}}\n\n;C# 7.0<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7|title=What's new in C# 7|last=|first=|date=2016-12-21|website=Microsoft Docs|access-date=}}</ref><ref name=\"new_features_in_7\">{{Cite web|title = New Features in C# 7.0|url = https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/|website = .NET Blog|access-date = 2017-06-09}}</ref>\n{{colbegin}}\n* Inline out variable declaration\n* [[Pattern matching]]\n* Tuple types and tuple literals\n* Deconstruction\n* [[Local function]]s\n* Digit separators\n* Binary literals\n* Ref returns and locals\n* Generalized async return types\n* Expression bodied constructors and finalizers\n* Expression bodied getters and setters\n* Throw can also be used as expression\n{{colend}}\n\n;C# 7.1<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1|title=What's new in C# 7.1|last=|first=|date=|website=Microsoft Docs|access-date=2017-10-09}}</ref>\n{{colbegin}}\n* Async main\n* Default literal expressions\n* Inferred tuple element names\n{{colend}}\n\n;C# 7.2<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2|title=What's new in C# 7.2|last=|first=|date=|website=Microsoft Docs|access-date=2017-11-26}}</ref>\n{{colbegin}}\n* Reference semantics with value types\n* Non-trailing named arguments\n* Leading underscores in numeric literals\n* private protected access modifier\n{{colend}}\n\n;C# 7.3<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3|title=What's new in C# 7.3|last=|first=|date=|website=Microsoft Docs|access-date=2018-06-23}}</ref>\n{{colbegin}}\n* Accessing fixed fields without pinning\n* Reassigning ref local variables\n* Using initializers on stackalloc arrays\n* Using fixed statements with any type that supports a pattern\n* Using additional generic constraints\n{{colend}}\n\n;C# 8.0<ref name=\"C#8\">{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8|title=What's new in C# 8.0|last=|first=|date=|website=Microsoft Docs}}</ref>\n{{colbegin}}\n* {{code|readonly struct}} members\n* Default interface members\n* {{code|switch}} expressions\n* Property, Tuple, and positional patterns\n* {{code|using}} declarations\n* {{code|static}} local functions\n* Disposable {{code|ref struct}}\n* Nullable reference types\n* Indices and Ranges\n* Null-coalescing assignment\n* Async Streams\n{{colend}}\n\n==Syntax==\n{{Main|C Sharp syntax}}\n{{See also|Syntax (programming languages)}}\nThe core syntax of C# language is similar to that of other C-style languages such as C, C++ and Java. In particular:\n\n* Semicolons are used to denote the end of a statement.\n* [[Curly brackets]] are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into [[namespaces]].\n* Variables are assigned using an [[equals sign]], but compared using [[==|two consecutive equals signs]].\n* [[Square brackets]] are used with [[Array data structure|arrays]], both to declare them and to get a value at a given index in one of them.\n\n==Distinguishing features==\n{{See also|Comparison of C Sharp and Java}}\nSome notable features of C# that distinguish it from C, C++, and Java where noted, are:\n\n===Portability===\nBy design, C# is the programming language that most directly reflects the underlying [[Common Language Infrastructure]]&nbsp;(CLI).<ref>{{cite book|title=Visual Studio 2010 and .NET 4 Six-in-One|year=2010|publisher=Wrox Press|isbn=978-0470499481}}</ref>  Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate [[Common Intermediate Language]] (CIL), or generate any other specific format. Theoretically, a C# compiler could generate machine code like traditional compilers of C++ or [[Fortran]].\n\n===Typing===\nC# supports strongly typed implicit variable declarations with the keyword <code>var</code>, and implicitly typed arrays with the keyword <code>new[]</code> followed by a collection initializer.\n\nC# supports a strict [[Boolean data type]], <code>bool</code>. Statements that take conditions, such as <code>while</code> and <code>if</code>, require an expression of a type that implements the <code>true</code> operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as <code>if (a)</code> require only that <code>a</code> is convertible to bool, allowing <code>a</code> to be an int, or a pointer. C# disallows this \"integer meaning true or false\" approach, on the grounds that forcing programmers to use expressions that return exactly <code>bool</code> can prevent certain types of programming mistakes such as <code>if (a = b)</code> (use of assignment <code>=</code> instead of equality <code>==</code>).\n\nC# is more [[Type safety|type safe]] than C++. The only [[implicit conversion]]s by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during [[Just-in-time compilation|JIT]], and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ [[copy constructor]]s and conversion operators, which are both implicit by default.\n\nC# has explicit support for [[Covariance and contravariance (computer science)|covariance and contravariance]] in generic types, unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods.\n\n[[enumerated type|Enumeration]] members are placed in their own [[Scope (programming)|scope]].\n\nThe C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions.\n\nLocal variables cannot [[Variable shadowing|shadow]] variables of the enclosing block, unlike C and C++.\n<!--NOTE TO EDITORS: Classes do NOT *NEED* to go in a Namespace. Check the spec or try it out yourself before stating otherwise.-->\n\n===Metaprogramming===\n[[Metaprogramming]] via C# attributes is part of the language. Many of these attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.\n\n===Methods and functions===\nA method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a class property. As in other syntactically similar languages, such as C++ and [[ANSI C]], the signature of a method is a declaration comprising in order: any optional scope modifier keywords (such as <code>private</code>), the explicit specification of its return type (such as <code>int</code>, or the keyword <code>void</code> if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Certain specific kinds of methods, such as those that simply get or set a class property by return value or assignment, do not require a full signature, but in the general case, the definition of a class includes the full signature declaration of its methods.\n\nLike C++, and unlike Java, C# programmers must use the scope modifier keyword <code>virtual</code> to allow methods to be overridden by subclasses.<ref>{{cite web|title=virtual (C# Reference)|url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual|website=docs.microsoft.com|language=en-us}}</ref>\n\n''Extension methods'' in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to add methods to an object that they feel should exist on that object and its derivatives.\n\nThe type <code>dynamic</code> allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.\n\nC# has support for strongly-typed function pointers via the keyword <code>delegate</code>. Like the Qt framework's pseudo-C++ ''signal'' and ''slot'', C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so.\n\nC# offers Java-like <code>synchronized</code> method calls, via the attribute <code>[MethodImpl(MethodImplOptions.Synchronized)]</code>, and has support for [[Mutual exclusion|mutually-exclusive locks]] via the keyword <code>lock</code>.\n\n===Property===\nC# provides [[property (programming)|properties]] as [[syntactic sugar]] for a common pattern in which a pair of methods, [[Mutator method|accessor (getter) and mutator (setter)]] encapsulate operations on a single [[Attribute (computing)|attribute]] of a class. No redundant method signatures{{Definition needed|The term signature/signatures are used in several places, and without any definition or explanation it is difficult to understand the concepts explained unless you have prior detailed knowledge of how C# define the concept \"Signature\"|date=May 2019}} for the getter/setter implementations need be written, and the property may be accessed using attribute syntax rather than more verbose method calls.\n\n===Namespace===\nA C# <code>namespace</code> provides the same level of code isolation as a Java <code>package</code> or a C++ {{C++|namespace}}, with very similar rules and features to a <code>package</code>. Namespaces can be imported with the \"using\" syntax.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive|title=using directive - C# Reference|last=|first=|date=|website=Microsoft Docs|language=en-us|access-date=2019-04-14}}</ref>\n\n===Memory access===\nIn C#, memory address pointers can only be used within blocks specifically marked as ''unsafe'', and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a \"live\" object or have the well-defined [[Nullable type|null]] value; it is impossible to obtain a reference to a \"dead\" object (one that has been garbage collected), or to a random block of memory. An unsafe pointer can point to an instance of an 'unmanaged' value type that does not contain any references to garbage-collected objects, array, string, or a block of stack-allocated memory. Code that is not marked as unsafe can still store and manipulate pointers through the <code>System.IntPtr</code> type, but it cannot dereference them.\n\nManaged memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of [[memory leak]]s by freeing the programmer of responsibility for releasing memory that is no longer needed.\n\n===Exception===\n[[Checked exceptions]] are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and versionability.<ref>{{cite web\n| url = http://www.artima.com/intv/handcuffs.html\n| title = The Trouble with Checked Exceptions\n| first1=Bill\n| last1=Venners\n| first2=Bruce\n| last2=Eckel\n| date = August 18, 2003\n| accessdate = March 30, 2010\n}}</ref>\n\n===Polymorphism===\nUnlike [[C++]], C# does not support [[multiple inheritance]], although a class can implement any number of [[Protocol (object-oriented programming)|interfaces]]. This was a design decision by the language's lead architect to avoid complication and simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same signature, i. e. two methods with the same name and taking parameters of the same type in the same order, C# allows implementing each method depending on which interface that method is being called through or, like Java, allows implementing the method once, and having that be the one invocation on a call through any of the class's interfaces.\n\nHowever, unlike [[Java (programming language)|Java]], C# supports [[operator overloading]]. Only the most commonly overloaded operators in C++ may be overloaded in C#.\n\n===Language Integrated Query (LINQ)===\nC# has the ability to utilize [[Language Integrated Query|LINQ]] through the .NET Framework. A developer can query any <code>IEnumerable&lt;T&gt;</code> object, XML documents, an ADO.NET dataset, and a SQL database.<ref>X. D. Zhang et al., \"Research of the Database Access Technology Under.NET Framework\", Applied Mechanics and Materials, Vols. 644-650, pp. 3077-3080, 2014</ref> Using LINQ in C# brings advantages like [[Intelligent code completion|Intellisense]] support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources.<ref>Otey, M. (2006, 02). LINQ to the future. SQL Server Magazine, 8, 17-21. Retrieved from https://search.proquest.com/docview/214859896</ref>  There are several different language structures that can be utilized with C# with LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.<ref>Sheldon, W. (2010, 11). New features in LINQ. SQL Server Magazine, 12, 37-40. Retrieved from https://search.proquest.com/docview/770609095</ref>\n\n===Functional programming===\nThough primarily an imperative language, C# 2.0 offered limited support for functional programming through [[first-class functions]] and closures in the form of anonymous delegates. C# 3.0 expanded support for functional programming with the introduction of a lightweight syntax for lambda expressions, extension methods (an affordance for modules), and a [[list comprehension]] syntax in the form of a \"query comprehension\" language. C# 7.0 adds features typically found in functional languages like tuples and pattern matching.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7|title=What's New in C# 7.0|last=|first=|date=|website=Microsoft Docs|language=en-us|access-date=2019-04-14}}</ref>\n\n==Common type system==\nC# has a ''unified type system''. This unified type system is called [[Common Type System]] (CTS).<ref name=\"insidecsharpp2ch4\">{{cite book| last = Archer| first = Tom| title = Inside C#| year = 2001| publisher = Microsoft Press|location=Redmond, Washington|isbn=0-7356-1288-9|chapter=Part 2, Chapter 4: The Type System}}</ref>\n\nA unified type system implies that all types, including primitives such as integers, are subclasses of the {{C sharp|System.Object}} class. For example, every type inherits a {{C sharp|ToString()}} method.\n\n===Categories of data types===\nCTS separates data types into two categories:<ref name=\"insidecsharpp2ch4\" />\n\n#  Reference types\n#  Value types\n\nInstances of value types do not have referential identity nor referential comparison semantics - equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from {{C sharp|System.ValueType}}, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as {{C sharp|int}} (a signed 32-bit integer), {{C sharp|float}} (a 32-bit IEEE floating-point number), {{C sharp|char}} (a 16-bit Unicode code unit), and {{C sharp|System.DateTime}} (identifies a specific point in time with nanosecond precision). Other examples are {{C sharp|enum}} (enumerations) and {{C sharp|struct}} (user defined structures).\n\nIn contrast, reference types have the notion of referential identity - each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for {{C sharp|System.String}}). In general, it is not always possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as {{C sharp|ICloneable}} or {{C sharp|IComparable}}). Examples of reference types are {{C sharp|object}} (the ultimate base class for all other C# classes), {{C sharp|System.String}} (a string of Unicode characters), and {{C sharp|System.Array}} (a base class for all C# arrays).\n\nBoth type categories are extensible with user-defined types.\n\n===Boxing and unboxing===\n''Boxing'' is the operation of converting a value-type object into a value of a corresponding reference type.<ref name=\"insidecsharpp2ch4\" /> Boxing in C# is implicit.\n\n''Unboxing'' is the operation of converting a value of a reference type (previously boxed) into a value of a value type.<ref name=\"insidecsharpp2ch4\" /> Unboxing in C# requires an explicit [[Type conversion|type cast]]. A boxed object of type T can only be unboxed to a T (or a nullable T).<ref>{{cite web|last=Lippert |first=Eric |url=http://blogs.msdn.com/b/ericlippert/archive/2009/03/19/representation-and-identity.aspx |title=Representation and Identity |work=Fabulous Adventures In Coding |publisher=Blogs.msdn.com |date=March 19, 2009 |accessdate=October 4, 2012}}</ref>\n\nExample:\n<syntaxhighlight lang=CSharp>\nint foo = 42;         // Value type.\nobject bar = foo;     // foo is boxed to bar.\nint foo2 = (int)bar;  // Unboxed back to value type.\n</syntaxhighlight>\n\n==Libraries==\nThe C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the [[Common Language Infrastructure]] (CLI), which is standardized as ECMA-335 ''Common Language Infrastructure (CLI)''.\n\nIn addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality.<ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/standard/framework-libraries|title=Framework Libraries|website=docs.microsoft.com}}</ref>\n\n==Examples==\nThe following is a very simple C# program, a version of the classic \"[[Hello world]]\" example:\n\n<syntaxhighlight lang=\"csharp\">\nusing System;\n\nclass Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}\n</syntaxhighlight>\n\nThis code will display this text in the console window:\n\n Hello, world!\n\nEach line has a purpose:\n\n<syntaxhighlight lang=CSharp>\nusing System;\n</syntaxhighlight>\n\nThe above line imports all types in the <code>System</code> namespace. For example, the <code>Console</code> class used later in the source code is defined in the <code>System</code> namespace, meaning it can be used without supplying the full name of the type (which includes the namespace).\n\n<syntaxhighlight lang=CSharp>\nclass Program\n</syntaxhighlight>\n\nAbove is a [[Class (computer science)|class]] definition. Everything between the following pair of braces describes {{C sharp|Program}}.\n\n<syntaxhighlight lang=CSharp>\nstatic void Main()\n</syntaxhighlight>\n\nThis declares the class member method where the program begins execution. The .NET runtime calls the {{C sharp|Main}} method. (Note: {{C sharp|Main}} may also be called from elsewhere, like any other method, e.g. from another method of {{C sharp|Program}}.) The [[Method (computer programming)#Static methods|static keyword]] makes the method accessible without an instance of {{C sharp|Program}}. Each console application's {{C sharp|Main}} entry point must be declared {{C sharp|static}}. Otherwise, the program would require an instance, but any instance would require a program. To avoid that irresolvable [[circular dependency]], C# compilers processing [[console application]]s (like that above) report an error if there is no {{C sharp|static Main}} method. The {{C sharp|void}} keyword declares that {{C sharp|Main}} has no [[return value]].\n\n<syntaxhighlight lang=CSharp>\nConsole.WriteLine(\"Hello, world!\");\n</syntaxhighlight>\n\nThis line writes the output. {{C sharp|Console}} is a static class in the {{C sharp|System}} namespace. It provides an interface to the standard input, output, and error streams for console applications. The program calls the {{C sharp|Console}} method {{C sharp|WriteLine}}, which displays on the console a line with the argument, the string {{C sharp|\"Hello, world!\"}}.\n\nA [[GUI]] example:\n\n<syntaxhighlight lang=\"CSharp\">\nusing System;\nusing System.Windows.Forms;\n\nclass Program\n{\n    static void Main()\n    {\n        MessageBox.Show(\"Hello, World!\");\n        Console.WriteLine(\"Is almost the same argument!\");\n    }\n}\n</syntaxhighlight>\n\nThis example is similar to the previous example, except that it generates a [[dialog box]] that contains the message \"Hello, World!\" instead of writing it to the console.\n\nAnother useful library is the <code>System.Drawing</code> library, which is used to programmatically draw images. For example:<syntaxhighlight lang=\"c#\">\nusing System;\nusing System.Drawing;\n\npublic class Example\n{\n    public static Image img;\n\n    public static void Main()\n    {\n        img = Image.FromFile(\"Image.png\");\n    }\n}\n</syntaxhighlight>This will create an image that is identical to that stored in \"Image.png\".\n\n==Standardization and licensing==\nIn August 2001, Microsoft Corporation, Hewlett-Packard and Intel Corporation co-sponsored the submission of specifications for C# as well as the [[Common Language Infrastructure|Common Language Infrastructure (CLI)]] to the standards organization [[Ecma International]].\nIn December 2001, ECMA released ECMA-334 ''C# Language Specification''. C# became an [[International Organization for Standardization|ISO]] standard in 2003 (ISO/IEC 23270:2003 - ''Information technology \u2014 Programming languages \u2014 C#''). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002.\n\nIn June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and [[Generic programming|generics]] (somewhat similar to C++ [[template (programming)|templates]]).\n\nIn July 2005, ECMA submitted to ISO/IEC JTC 1, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6\u20139 months.\n\nThe C# language definition and the [[Common Language Infrastructure|CLI]] are standardized under [[International Organization for Standardization|ISO]] and [[Ecma]] standards that provide [[Reasonable and Non Discriminatory Licensing|reasonable and non-discriminatory licensing]] protection from patent claims.\n\nMicrosoft has agreed not to sue open source developers for violating patents in non-profit projects for the part of the framework that is covered by the OSP.<ref>{{cite web| url = https://msdn.microsoft.com/en-us/openspecifications/dn646765| title = Patent Pledge for Open Source Developers}}</ref> Microsoft has also agreed not to enforce patents relating to [[Novell]] products against Novell's paying customers<ref>{{cite web\n |url          = http://www.microsoft.com/interop/msnovellcollab/patent_agreement.mspx\n |title        = Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration\n |date         = November 2, 2006\n |publisher    = [[Microsoft]]\n |accessdate   = July 5, 2009\n |quote        = Microsoft, on behalf of itself and its Subsidiaries (collectively \"Microsoft\"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively \"Novell\") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue.\n |archive-url  = https://web.archive.org/web/20090517140252/http://www.microsoft.com/interop/msnovellcollab/patent_agreement.mspx\n |archive-date = May 17, 2009\n |url-status=dead\n |df           = mdy-all\n}}</ref> with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET ([[Mono (software)|The Mono Project]]).<ref>{{cite web\n | url = http://www.microsoft.com/interop/msnovellcollab/definitions2.aspx\n | title = Definitions\n | date = November 2, 2006\n | publisher = [[Microsoft]]\n | accessdate  = July 5, 2009\n}}</ref> However, Novell maintains that Mono does not infringe any Microsoft patents.<ref>{{cite web\n | url = http://www.novell.com/linux/microsoft/faq_opensource.html\n | title = Novell Answers Questions from the Community\n | first = Justin\n | last = Steinman\n | date = November 7, 2006\n | accessdate  = July 5, 2009\n | quote = We maintain that Mono does not infringe any Microsoft patents.\n}}</ref> Microsoft has also made a specific agreement not to enforce patent rights related to the [[Moonlight (runtime)|Moonlight browser plugin]], which depends on Mono, provided it is obtained through [[Novell]].<ref name=\"MsCovenant\">{{cite web\n |url          = http://www.microsoft.com/interop/msnovellcollab/moonlight.mspx\n |title        = Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration\n |publisher    = [[Microsoft]]\n |quote        = \"Downstream Recipient\" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... \"Moonlight Implementation\" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License.\n |date         = September 28, 2007\n |accessdate   = March 8, 2008\n |archive-url  = https://web.archive.org/web/20100923213336/http://www.microsoft.com/interop/msnovellcollab/moonlight.mspx\n |archive-date = September 23, 2010\n |url-status=dead\n |df           = mdy-all\n}}</ref>\n\n==Implementations==\nMicrosoft is leading the development of the [[Open-source software|open-source]] reference C# compiler and set of tools, previously codenamed \"[[Microsoft Roslyn|Roslyn]]\". The compiler, which is entirely written in [[managed code]] (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools.<ref name=\"auto\"/><ref>{{Cite web|url=https://docs.microsoft.com/en-us/dotnet/csharp/|title=C# Guide|website=docs.microsoft.com}}</ref>\n\nOther C# compilers (some of which include an implementation of the [[Common Language Infrastructure]] and .NET class libraries):\n* The [[Mono (software)|Mono]] project provides an open-source C# compiler, a complete open-source implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and a nearly complete implementation of the Microsoft proprietary .NET class libraries up to .NET 3.5. As of Mono 2.6, no plans exist to implement [[Windows Presentation Foundation|WPF]]; [[Windows Workflow Foundation|WF]] is planned for a later release; and there are only partial implementations of [[Language Integrated Query#LINQ to SQL|LINQ to SQL]] and [[Windows Communication Foundation|WCF]].<ref>{{cite web|url=http://www.mono-project.com/Compatibility |title=Compatibility - Mono |publisher=Mono-project.com |date=December 19, 2011 |accessdate=October 4, 2012}}</ref>\n* The [[DotGNU]] project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution).\n* Microsoft's [[Shared Source Common Language Infrastructure]], codenamed \"Rotor\", provides a [[shared source]] implementation of the CLR runtime and a C# compiler licensed for educational and research use only, and a subset of the required [[Common Language Infrastructure]] framework libraries in the ECMA specification (up to C# 2.0, and supported on Windows XP only).\n* [[Xamarin]] provides tools to develop cross-platform applications for common mobile and desktop operating systems, using C# as a codebase and compiling to native code.\n\nMono is a common choice for game engines due to its cross-platform nature. The [[Unity (game engine)|Unity game engine]] uses Mono C# as its primary scripting language. The [[Godot (game engine)|Godot game engine]] has implemented an optional Mono C# module thanks to a donation of $24,000 from Microsoft.<ref>{{cite news|title=Introducing C# in Godot |work=[[Godot (game engine)|Godot Engine]] |url=https://godotengine.org/article/introducing-csharp-godot |accessdate=October 26, 2018 |url-status=live |archiveurl=https://web.archive.org/web/20181026084022/https://godotengine.org/article/introducing-csharp-godot |archivedate=October 26, 2018 |df= |date=October 21, 2017|first1=Ignacio|last1=Etcheverry}}</ref>\n\n==See also==\n{{Col-begin}}\n{{Col-break}}\n;C# topics\n* [[C Sharp syntax|C# syntax]]\n* [[Comparison of C Sharp and Java|Comparison of C# and Java]]\n* [[Comparison of C Sharp and Visual Basic .NET|Comparison of C# and Visual Basic .NET]]\n* [[Standard Libraries (CLI)|.NET standard libraries]]\n\n{{Col-break}}\n{{Portal|Computer programming}}\n;IDEs\n* [[Microsoft Visual Studio]]\n* [[Microsoft Visual Studio Express]]\n* [[Visual Studio Code]]\n* [[MonoDevelop]]\n* [[Morfik]]\n* [[SharpDevelop]]\n* [[Turbo C Sharp|Turbo C#]]\n* [[JetBrains#Rider|Rider]]\n* [[Xamarin Studio]]\n{{col-end}}\n{{Clear}}\n\n==Notes==\n{{Notelist}}\n\n==References==\n{{Reflist|30em|refs=\n\n<ref name=\"dynamic\">{{cite web |url = http://code.msdn.microsoft.com/csharpfuture/Release/ProjectReleases.aspx?ReleaseId=1686 |title = New features in C# 4.0 |first = Mads |last = Torgersen |date = October 27, 2008 |publisher = [[Microsoft]] |accessdate  = October 28, 2008 }}</ref>\n\n<ref name=\"influenced by CPP\">{{cite journal |last = Naugler |first = David |date=May 2007 |title       = C# 2.0 for C++ and Java programmer: conference workshop |journal = Journal of Computing Sciences in Colleges |volume = 22 |issue = 5 |quote = Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.}}</ref>\n\n<ref name=\"influenced by op\">{{cite magazine |url = http://www.computerworld.com.au/article/261958/a-z_programming_languages_c_/?pp=7 |title = The A-Z of Programming Languages: C# |date = October 1, 2008 |magazine = [[Computerworld]] |first = Naomi |last = Hamilton |accessdate  = February 12, 2010 |quote = We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. ([[Anders Hejlsberg]]) }}</ref>\n\n<ref name=\"influenced\">{{cite web |url = http://www.barrycornelius.com/papers/java5/onefile/ |title = Java 5 catches up with C# |date = December 1, 2005 |publisher  = [[University of Oxford]] Computing Services |first = Barry |last = Cornelius |accessdate = June 18, 2014 |quote = In my opinion, it is C# that has caused these radical changes to the Java language. ([[Barry Cornelius]]) }}</ref>\n}}\n\n==Further reading==\n* {{cite book | title = C# Language Pocket Reference| url = https://archive.org/details/clanguagepocketr00pete| url-access = registration| first1=Peter | last1=Drayton | first2=Ben | last2=Albahari | first3=Ted | last3=Neward| year=2002| publisher = O'Reilly| isbn=0-596-00429-X}}\n* {{cite book| title=Programming Microsoft Windows with C#| last=Petzold| first=Charles| year=2002| publisher=Microsoft Press| isbn=0-7356-1370-2| url-access=registration| url=https://archive.org/details/isbn_9780735613706}}\n\n==External links==\n{{Wikibooks|C Sharp Programming}}\n* [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/ C# Language Specification]\n* [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index C# Programming Guide]\n* [https://standards.iso.org/ittf/PubliclyAvailableStandards/c075178_ISO_IEC_23270_2018.zip ISO C# Language Specification]\n* [https://github.com/dotnet/roslyn C# Compiler Platform (\"Roslyn\") source code]\n\n{{Common Language Infrastructure}}\n{{Microsoft FOSS}}\n{{Ecma International Standards}}\n{{ISO standards}}\n{{Programming languages}}\n{{List of International Electrotechnical Commission standards}}\n{{Authority control}}\n\n[[Category:American inventions]]\n[[Category:Programming languages]]\n[[Category:C Sharp programming language family| ]]\n[[Category:.NET programming languages]]\n[[Category:Class-based programming languages]]\n[[Category:Ecma standards]]\n[[Category:Functional languages]]\n[[Category:IEC standards]]\n[[Category:ISO standards]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:Programming languages created in 2000]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Statically typed programming languages]]\n[[Category:2000 software]]\n", "name_user": "DavidBrooks", "label": "safe", "comment": "\u2192\u200eDesign goals:ce", "url_page": "//en.wikipedia.org/wiki/C_Sharp_(programming_language)"}
